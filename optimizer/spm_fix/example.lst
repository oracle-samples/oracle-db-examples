SQL> @example
Connected.

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01

 SUM(T1.C)  SUM(T2.C)
---------- ----------
    250001     250001

Elapsed: 00:00:00.22

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  0ptw8zskuh9r4, child number 2
-------------------------------------
select /*+ NO_ADAPTIVE_PLAN */ sum(t1.c), sum(t2.c) from   t1, t2 where
 t1.a = t2.a and    t1.d = 10

Plan hash value: 3534348942

--------------------------------------------------------------------------------------
| Id  | Operation                     | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT              |      |       |       |   560 (100)|          |
|   1 |  SORT AGGREGATE               |      |     1 |    22 |            |          |
|   2 |   NESTED LOOPS                |      |     2 |    44 |   560   (2)| 00:00:01 |
|   3 |    NESTED LOOPS               |      |     2 |    44 |   560   (2)| 00:00:01 |
|*  4 |     TABLE ACCESS FULL         | T1   |     2 |    26 |   554   (2)| 00:00:01 |
|*  5 |     INDEX RANGE SCAN          | T2I  |     1 |       |     2   (0)| 00:00:01 |
|   6 |    TABLE ACCESS BY INDEX ROWID| T2   |     1 |     9 |     3   (0)| 00:00:01 |
--------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - filter("T1"."D"=10)
   5 - access("T1"."A"="T2"."A")


25 rows selected.

Elapsed: 00:00:00.05

 SUM(T1.C)  SUM(T2.C)
---------- ----------
         1          1

Elapsed: 00:00:00.01

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  7455bm00pr945, child number 1
-------------------------------------
select /*+ NO_ADAPTIVE_PLAN */ sum(t1.c), sum(t2.c) from   t1, t2 where
 t1.a = t2.a and    t1.d = 1000

Plan hash value: 3534348942

--------------------------------------------------------------------------------------
| Id  | Operation                     | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT              |      |       |       |   560 (100)|          |
|   1 |  SORT AGGREGATE               |      |     1 |    22 |            |          |
|   2 |   NESTED LOOPS                |      |     2 |    44 |   560   (2)| 00:00:01 |
|   3 |    NESTED LOOPS               |      |     2 |    44 |   560   (2)| 00:00:01 |
|*  4 |     TABLE ACCESS FULL         | T1   |     2 |    26 |   554   (2)| 00:00:01 |
|*  5 |     INDEX RANGE SCAN          | T2I  |     1 |       |     2   (0)| 00:00:01 |
|   6 |    TABLE ACCESS BY INDEX ROWID| T2   |     1 |     9 |     3   (0)| 00:00:01 |
--------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - filter("T1"."D"=1000)
   5 - access("T1"."A"="T2"."A")


25 rows selected.

Elapsed: 00:00:00.03

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.40

PL/SQL procedure successfully completed.

Elapsed: 00:00:19.99

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.27
SQL> exec dbms_stats.delete_column_stats(user,'t1','d',no_invalidate=>false,col_stat_type=>'HISTOGRAM');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
SQL> exec dbms_stats.delete_column_stats(user,'t2','d',no_invalidate=>false,col_stat_type=>'HISTOGRAM');

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.01
SQL> --
SQL> -- Q1 now uses a NL JOIN, which in this case is bad because of data skew
SQL> -- The query has experienced a performance regression
SQL> --
SQL> @@q1
SQL> set timing on
SQL> --
SQL> -- The adaptive plan feature can potentially avoid performance regressions
SQL> -- associate with the wrong join type being chosen, so we are going to disable it because
SQL> -- we WANT to induce a performance regression for SPM to fix.
SQL> --
SQL> --
SQL> -- Literals are used rather than bind variables to
SQL> -- avoid adaptive cursor sharing from changing the plan
SQL> --
SQL> 
SQL> select /*+ NO_ADAPTIVE_PLAN */ sum(t1.c), sum(t2.c)
  2  from   t1, t2
  3  where  t1.a = t2.a
  4  and    t1.d = 10;

 SUM(T1.C)  SUM(T2.C)
---------- ----------
    250001     250001

Elapsed: 00:00:00.20
SQL> 
SQL> @plan
SQL> set linesize 250
SQL> set trims on
SQL> set tab off
SQL> set tab off
SQL> set pagesize 1000
SQL> column plan_table_output format a180
SQL> 
SQL> SELECT *
  2  FROM table(DBMS_XPLAN.DISPLAY_CURSOR(FORMAT=>'TYPICAL'));

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  0ptw8zskuh9r4, child number 3
-------------------------------------
select /*+ NO_ADAPTIVE_PLAN */ sum(t1.c), sum(t2.c) from   t1, t2 where
 t1.a = t2.a and    t1.d = 10

Plan hash value: 3534348942

--------------------------------------------------------------------------------------
| Id  | Operation                     | Name | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT              |      |       |       |   560 (100)|          |
|   1 |  SORT AGGREGATE               |      |     1 |    22 |            |          |
|   2 |   NESTED LOOPS                |      |     2 |    44 |   560   (2)| 00:00:01 |
|   3 |    NESTED LOOPS               |      |     2 |    44 |   560   (2)| 00:00:01 |
|*  4 |     TABLE ACCESS FULL         | T1   |     2 |    26 |   554   (2)| 00:00:01 |
|*  5 |     INDEX RANGE SCAN          | T2I  |     1 |       |     2   (0)| 00:00:01 |
|   6 |    TABLE ACCESS BY INDEX ROWID| T2   |     1 |     9 |     3   (0)| 00:00:01 |
--------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - filter("T1"."D"=10)
   5 - access("T1"."A"="T2"."A")


25 rows selected.

Elapsed: 00:00:00.04
SQL> 
SQL> --
SQL> -- Now 'repair' the plan - SPM will find the better plan in AWR,
SQL> -- test execute it and then create a SQL plan baseline to enforce it
SQL> --
SQL> -- Automatic SQL Plan management will look in AWR for resource-intensive
SQL> -- SQL so it is capable of finding our regressed plan automatically.
SQL> --
SQL> -- But in this case, the DBA has to identify the long-running SQL statement
SQL> -- by SQL ID and Plan Hash Value. However, once this has been done, SPM will
SQL> -- locate, test and apply the better plan automatically.
SQL> --
SQL> --
SQL> @@spm
SQL> var rep clob
SQL> set linesize 250
SQL> set pagesize 10000
SQL> set trims on
SQL> set tab off
SQL> set long 1000000
SQL> column report format a200
SQL> set echo on
SQL> 
SQL> exec select '' into :rep from dual;

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
SQL> 
SQL> --
SQL> -- This example assumes that you have the bad plan in the
SQL> -- cursor cache but this is not essential. Take a look
SQL> -- at the documentation for DBMS_SPM because there are a
SQL> -- large number of options for creating the initial SQL plan
SQL> -- baseline. Also, you might even have a SQL plan baseline already.
SQL> --
SQL> -- The example SQL ID hard coded in this example
SQL> --
SQL> 
SQL> set linesize 100
SQL> set trims on
SQL> set tab off
SQL> set pagesize 1000
SQL> column plan_table_output format 95
SQL> 
SQL> var childid varchar2(100)
SQL> var childnum number
SQL> --
SQL> -- The SQL_ID of our SQL statement
SQL> --
SQL> exec :childid := '0ptw8zskuh9r4';

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
SQL> 
SQL> exec select max(child_number) into :childnum from v$sql where sql_id = :childid;

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
SQL> 
SQL> SELECT *
  2  FROM table(DBMS_XPLAN.DISPLAY_CURSOR(FORMAT=>'BASIC', SQL_ID=>:childid, cursor_child_no=>:childnum));

PLAN_TABLE_OUTPUT
----------------------------------------------------------------------------------------------------
EXPLAINED SQL STATEMENT:
------------------------
select /*+ NO_ADAPTIVE_PLAN */ sum(t1.c), sum(t2.c) from   t1, t2 where
 t1.a = t2.a and    t1.d = 10

Plan hash value: 3534348942

----------------------------------------------
| Id  | Operation                     | Name |
----------------------------------------------
|   0 | SELECT STATEMENT              |      |
|   1 |  SORT AGGREGATE               |      |
|   2 |   NESTED LOOPS                |      |
|   3 |    NESTED LOOPS               |      |
|   4 |     TABLE ACCESS FULL         | T1   |
|   5 |     INDEX RANGE SCAN          | T2I  |
|   6 |    TABLE ACCESS BY INDEX ROWID| T2   |
----------------------------------------------


19 rows selected.

Elapsed: 00:00:00.04
SQL> 
SQL> accept myphv char prompt 'Enter the plan hash value of the bad NL plan (above): '
Enter the plan hash value of the bad NL plan (above): 3534348942
SQL> 
SQL> DECLARE
  2     tname varchar2(1000);
  3     ename varchar2(1000);
  4     n number;
  5     sig number;
  6     sqlid varchar2(1000) := :childid;
  7     phv   number         := &myphv;
  8     handle varchar2(1000);
  9     nc     number;
 10  BEGIN
 11     select count(*) into nc
 12     from   v$sql
 13     where sql_id = sqlid
 14     and   plan_hash_value = phv;
 15  
 16     if (nc = 0)
 17     then
 18        raise_application_error(-20001, 'The SQL_ID/PHV combination not found in V$SQL');
 19     end if;
 20  
 21     select exact_matching_signature into sig
 22     from   v$sqlarea
 23     where  sql_id = sqlid;
 24  
 25  -- Enabled=NO because we will assume that this is a bad plan
 26  
 27     n := dbms_spm.load_plans_from_cursor_cache(
 28                    sql_id => sqlid,
 29                    plan_hash_value=> phv,
 30                    enabled => 'no');
 31  
 32     select distinct sql_handle
 33     into   handle
 34     from   dba_sql_plan_baselines
 35     where  signature = sig;
 36  
 37     tname := DBMS_SPM.CREATE_EVOLVE_TASK(sql_handle=>handle);
 38  
 39     DBMS_SPM.SET_EVOLVE_TASK_PARAMETER(
 40        task_name => tname,
 41        parameter => 'ALTERNATE_PLAN_BASELINE',
 42        value     => 'EXISTING');
 43  
 49     DBMS_SPM.SET_EVOLVE_TASK_PARAMETER(
 50        task_name => tname,
 51        parameter => 'ALTERNATE_PLAN_SOURCE',
 52        value     => 'CURSOR_CACHE+AUTOMATIC_WORKLOAD_REPOSITORY');
 53  
 54     DBMS_SPM.SET_EVOLVE_TASK_PARAMETER(
 55        task_name => tname,
 56        parameter => 'ALTERNATE_PLAN_LIMIT',
 57        value     => 'UNLIMITED');
 58  
 59     ename := DBMS_SPM.EXECUTE_EVOLVE_TASK(tname);
 60  
 61     n := DBMS_SPM.IMPLEMENT_EVOLVE_TASK(tname);
 62  
 63     select DBMS_SPM.REPORT_EVOLVE_TASK(task_name=>tname) into :rep from dual;
 64  END;
 65  /
old   7:    phv   number         := &myphv;
new   7:    phv   number         := 3534348942;

PL/SQL procedure successfully completed.

Elapsed: 00:00:02.71
SQL> 
SQL> set echo off
Note!
Take a look at the following report to confirm that the previous plan
passes the performance criteria to be accepted.
Be aware that on some systems the difference may not be significant
enough to warrant acceptance of the SQL plan baseline.
If this happens in your case, you should increase the number of rows
in the test tables to boost the performance difference between
the nested loop and hash join versions of the test query.

REPORT
----------------------------------------------------------------------------------------------------
GENERAL INFORMATION SECTION
---------------------------------------------------------------------------------------------

 Task Information:
 ---------------------------------------------
 Task Name            : TASK_296
 Task Owner           : SPMDEMO
 Execution Name       : EXEC_366
 Execution Type       : SPM EVOLVE
 Scope                : COMPREHENSIVE
 Status               : COMPLETED
 Started              : 10/07/2019 03:53:27
 Finished             : 10/07/2019 03:53:29
 Last Updated         : 10/07/2019 03:53:29
 Global Time Limit    : 2147483646
 Per-Plan Time Limit  : UNUSED
 Number of Errors     : 0
---------------------------------------------------------------------------------------------

SUMMARY SECTION
---------------------------------------------------------------------------------------------
  Number of plans processed  : 1
  Number of findings         : 1
  Number of recommendations  : 1
  Number of errors           : 0
---------------------------------------------------------------------------------------------

DETAILS SECTION
---------------------------------------------------------------------------------------------
 Object ID          : 2
 Test Plan Name     : SQL_PLAN_2jnv3vhwv9nsnc6a45b88
 Base Plan Name     : Cost-based plan
 SQL Handle         : SQL_28d363dc39b4d314
 Parsing Schema     : SPMDEMO
 Test Plan Creator  : SYS
 SQL Text           : select /*+ NO_ADAPTIVE_PLAN */ sum(t1.c), sum(t2.c) from
                    t1, t2 where t1.a = t2.a and t1.d = 10

Execution Statistics:
-----------------------------
                    Base Plan                     Test Plan
                    ----------------------------  ----------------------------
 Elapsed Time (s):  .043147                       .012352
 CPU Time (s):      .041965                       .01203
 Buffer Gets:       2215                          439
 Optimizer Cost:    560                           1109
 Disk Reads:        0                             0
 Direct Writes:     0                             0
 Rows Processed:    0                             0
 Executions:        5                             9


FINDINGS SECTION
---------------------------------------------------------------------------------------------

Findings (1):
-----------------------------
 1. The plan was verified in 2.08500 seconds. It passed the benefit criterion
    because its verified performance was 2.80103 times better than that of the
    baseline plan.

Recommendation:
-----------------------------
 Consider accepting the plan. Execute
 dbms_spm.accept_sql_plan_baseline(task_name => 'TASK_296', object_id => 2,
 task_owner => 'SPMDEMO');


EXPLAIN PLANS SECTION
---------------------------------------------------------------------------------------------

Baseline Plan
-----------------------------
 Plan Id          : 2303
 Plan Hash Value  : 3467815966

---------------------------------------------------------------------------------
| Id  | Operation                       | Name | Rows | Bytes | Cost | Time     |
---------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                |      |    1 |    22 |  560 | 00:00:01 |
|   1 |   SORT AGGREGATE                |      |    1 |    22 |      |          |
|   2 |    NESTED LOOPS                 |      |    2 |    44 |  560 | 00:00:01 |
|   3 |     NESTED LOOPS                |      |    2 |    44 |  560 | 00:00:01 |
| * 4 |      TABLE ACCESS FULL          | T1   |    2 |    26 |  554 | 00:00:01 |
| * 5 |      INDEX RANGE SCAN           | T2I  |    1 |       |    2 | 00:00:01 |
|   6 |     TABLE ACCESS BY INDEX ROWID | T2   |    1 |     9 |    3 | 00:00:01 |
---------------------------------------------------------------------------------

Predicate Information (identified by operation id):
------------------------------------------
* 4 - filter("T1"."D"=10)
* 5 - access("T1"."A"="T2"."A")

Hint Report (identified by operation id / Query Block Name / Object Alias):
Total hints for statement: 1 (U - Unused (1))
-------------------------------------------------------------------------------

 0 -  STATEMENT
       U -  NO_ADAPTIVE_PLAN / rejected by IGNORE_OPTIM_EMBEDDED_HINTS

Test Plan
-----------------------------
 Plan Id          : 2304
 Plan Hash Value  : 3332660104

---------------------------------------------------------------------------
| Id  | Operation             | Name | Rows   | Bytes   | Cost | Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT      |      |      1 |      22 | 1109 | 00:00:01 |
|   1 |   SORT AGGREGATE      |      |      1 |      22 |      |          |
| * 2 |    HASH JOIN          |      |      2 |      44 | 1109 | 00:00:01 |
| * 3 |     TABLE ACCESS FULL | T1   |      2 |      26 |  554 | 00:00:01 |
|   4 |     TABLE ACCESS FULL | T2   | 500000 | 4500000 |  552 | 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
------------------------------------------
* 2 - access("T1"."A"="T2"."A")
* 3 - filter("T1"."D"=10)

Hint Report (identified by operation id / Query Block Name / Object Alias):
Total hints for statement: 1 (U - Unused (1))
-------------------------------------------------------------------------------

 0 -  STATEMENT
       U -  NO_ADAPTIVE_PLAN / rejected by IGNORE_OPTIM_EMBEDDED_HINTS
---------------------------------------------------------------------------------------------


Elapsed: 00:00:00.00

 SUM(T1.C)  SUM(T2.C)
---------- ----------
    250001     250001

Elapsed: 00:00:00.13

PLAN_TABLE_OUTPUT
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL_ID  0ptw8zskuh9r4, child number 3
-------------------------------------
select /*+ NO_ADAPTIVE_PLAN */ sum(t1.c), sum(t2.c) from   t1, t2 where
 t1.a = t2.a and    t1.d = 10

Plan hash value: 906334482

----------------------------------------------------------------------------
| Id  | Operation           | Name | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------
|   0 | SELECT STATEMENT    |      |       |       |  1109 (100)|          |
|   1 |  SORT AGGREGATE     |      |     1 |    22 |            |          |
|*  2 |   HASH JOIN         |      |     2 |    44 |  1109   (2)| 00:00:01 |
|*  3 |    TABLE ACCESS FULL| T1   |     2 |    26 |   554   (2)| 00:00:01 |
|   4 |    TABLE ACCESS FULL| T2   |   500K|  4394K|   552   (2)| 00:00:01 |
----------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("T1"."A"="T2"."A")
   3 - filter("T1"."D"=10)

Hint Report (identified by operation id / Query Block Name / Object Alias):
Total hints for statement: 1 (U - Unused (1))
---------------------------------------------------------------------------

   0 -  STATEMENT
         U -  NO_ADAPTIVE_PLAN / rejected by IGNORE_OPTIM_EMBEDDED_HINTS

Note
-----
   - SQL plan baseline SQL_PLAN_2jnv3vhwv9nsnc6a45b88 used for this statement


34 rows selected.

Elapsed: 00:00:00.03
SQL> spool off
