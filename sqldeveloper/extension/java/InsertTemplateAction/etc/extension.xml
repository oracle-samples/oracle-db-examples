<?xml version="1.0" encoding="UTF-8"?>
<!--  
Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved. 

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. 
-->

<extension xmlns="http://jcp.org/jsr/198/extension-manifest"
           id="@@extension.id@@" version="@@extension.version@@.@@extension.build@@"
           esdk-version="1.0"
           rsbundle-class="@@extension.resources@@">

    <name>@@extension.name@@</name>
    <owner>@@extension.owner@@ @@extension.owner.url@@</owner>

<!--
     <feature-category xmlns="http://xmlns.oracle.com/ide/extension" id="example-category">
        <name>${CATEGORY_NAME}</name>
        <description>${CATEGORY_DESCRIPTION}</description>
    </feature-category>
    Duplicate category definitions cause a severe error to be logged. 
    Only way around it from the outside I can think of is an extension just to add
    the category and all the others dependent on it.
    The pre-defined ones are:
{db-category=Database, ide-category=IDE, db-migrations-category=Database Migrations, 
 database-category=Database Development, java-se-category=Java SE, 
 vcs-category=Version Control, xml-category=XML}
and example-category=Examples, if you've installed the XMLPackedExample
Not supplying a category or giving a non-existent one will just show the extension
at the root of the features tree.    
 -->
    <feature id="@@extension.id@@" xmlns="http://xmlns.oracle.com/ide/extension">
        <name>@@extension.name@@</name>
        <description>@@extension.descr@@</description>
        <type>
            <service can-user-disable="true" reload-if-used="true"/>
        </type>
    </feature>
	<trigger-hooks xmlns="http://xmlns.oracle.com/ide/extension">
        <rules>
            <!--  Need to have rule for the declarations below, but it is a "severe"
                  exception to duplicate them. Need to collate a list of the existing
                  ones - seems there would be little chance new ones are really needed. -->
                  
            <!-- See ActionController.doAction - we are counting on this -->
		    <rule id="insertTemplateAction-view-is-editorPaneContainer" type="context-has-view">
		        <parameters>
		            <param name="view-class" value="oracle.javatools.editor.BasicEditorPaneContainer"/>
		        </parameters>
		    </rule>
        </rules>
   		<triggers xmlns:c="http://xmlns.oracle.com/ide/customization">
			<actions xmlns="http://xmlns.oracle.com/jdeveloper/1013/extension">
				<action id="InsertTemplateAction_ID">
					<properties>
						<property name="Name">${ACTION_LABEL}</property>
						<!-- You could also use your own by putting path in rsbundle 
						     e.g., MY_ICON = /oracle/db/example/sqldeveloper/extension/dependency/icons/my_icon.png
						     and referencing its key as res:${MY_ICON} -->
						<!-- <property name="SmallIcon">${OracleIcons.DUKE}</property>  -->
					</properties>
				</action>
			</actions>
			<controllers xmlns="http://xmlns.oracle.com/ide/extension">
				<controller class="oracle.db.example.sqldeveloper.extension.insertTemplateAction.ActionController">
				<!-- Not needed if the context-menu-hook is using a rule to determine if it shows up at all? -->
					<update-rules>
						<update-rule rule="insertTemplateAction-view-is-editorPaneContainer">
							<action id="InsertTemplateAction_ID"/>
						</update-rule>
					</update-rules>
				</controller>
			</controllers>
			<context-menu-hook rule="insertTemplateAction-view-is-editorPaneContainer">
				<site idref="editor"/> <!-- can do multiple e.g.;, "db_nav;editor" -->
				<menu>
					<section xmlns="http://jcp.org/jsr/198/extension-manifest" id="SECTION_WINDOW_CTXT_MENU" weight="1.0">
						<item action-ref="InsertTemplateAction_ID" weight="1.0"/>
					</section>
				</menu>
			</context-menu-hook>

			<!--  When placed here in the trigger-hooks section, these will be loaded right away -->
			<sqldev-action-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-actions">
			    <!-- This is the directory to read all action *.xml from
				<actionDescriptor package="oracle.db.example.sqldeveloper.extension.dependency.action"/>
				-->
			</sqldev-action-hook>
	        <sqldev-navigator-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-navigator">
	            <!--  These are the navigator XML files to read
	            <descriptor>/oracle/db/example/sqldeveloper/extension/dependency/navigator/DependencyExampleNavigator.xml</descriptor>
	             -->
	        </sqldev-navigator-hook>
	        <!-- viewer-hook cannot be a trigger -->
	        <!-- BUT doing this will add a menu toggle entry in the connection
	             context menu for Manage Features->your feature for users to
	             enable/disable xml based things with requiredFeatures="your dynamic id"
	             See oracle.db.example.sqldeveloper.extension.dependency.viewer.DependencyExampleGraphViewer.xml
	             AS A SIDE EFFECT, enabling it the 1st time will fully load the extension  
	         -->
	         <!-- Need to check on this. Works in current dev version, but not EA1.
	         SO FOR NOW, you have to use the context menu show viewer once then object viewers 
	         opened afterwards will have the dependency viewer tab -->
	        <!--  
			<sqldev-feature-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-feature">
	        	<dynamicFeature id="dependencyObjectViewerExample">${DEPENDENCY_VIEWER_TAB_LABEL}</dynamicFeature>
	        </sqldev-feature-hook>
	         -->
   		</triggers>
   	</trigger-hooks>
    <hooks>
        <jdeveloper-hook xmlns="http://xmlns.oracle.com/jdeveloper/1013/extension"> 
            <addins>
            <!-- 
            	<addin>oracle.db.example.sqldeveloper.extension.dumpObjectTypes.DumpObjectTypesAddin</addin>
            -->
    		</addins>
		</jdeveloper-hook> 
		<!-- When placed here in the hooks section, these won't be loaded until the extension is by one of the above triggers --> 
		<sqldev-action-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-actions">
		    <!-- This is the directory to read all action *.xml from
			<actionDescriptor package="oracle.db.example.sqldeveloper.extension.dependency.action.xml"/>
			  -->
		</sqldev-action-hook>
        <sqldev-navigator-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-navigator">
            <!--  These are the navigator XML files to read
            <descriptor>oracle.db.example.sqldeveloper.extension.dependency/navigator/DependencyExampleNavigator.xml</descriptor>
             -->
        </sqldev-navigator-hook>
        <!-- viewer-hook cannot be a trigger -->
		<sqldev-viewer-hook xmlns="http://xmlns.oracle.com/sqldeveloper/sqldev-viewers">
		    <!-- This is the directory to read all viewer *.xml from
			<viewerDescriptor package="oracle.db.example.sqldeveloper.extension.dependency.viewer"/>
			-->
		</sqldev-viewer-hook>
    	
    </hooks>  
   	
</extension>
