[{"layout":null,"template":null,"templateConfig":null,"name":"OML4R Data Transformation Categorical Recode","description":null,"readOnly":false,"type":"low","paragraphs":[{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":null,"message":["%md"," "],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":true,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","# OML4R Data Transformation: recode categorical variable to numeric variable","","In this notebook, we demonstrate how to recode a categorical string variable to a numeric variable and string-to-string recoding using OML4R.","","Using the customer insurance lifetime value data set, which contains customer financial information, lifetime value, and whether or not the customer bought insurance, we show how to convert a categorical variable with each distinct level/value coded to an integer data type. Note that ***ore.recode***, which supports this transformation, can also be used to recode string values as illustrated in the last example. ","","The dataset CUSTOMER_INSURANCE_LTV is generated by the \"OML Run-me-first\" notebook, which MUST be run before this notebook.","","---","","###### IMPORTANT: The `\"OML Run-me-first\"` notebook is available under the menu `Templates -> Examples` and is a prerequisite to the current notebook.","","---","","Copyright (c) 2024 Oracle Corporation ","###### <a href=\"https://oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0<\/a>","---"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"For more information...","message":["%md","","<a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml4r/2.0.0/oreug/prepare-and-explore-data-database.html\" target=\"_blank\">OML4R documentation on Data Preparation<\/a>"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Import R libraries","message":["%r","","library(ORE)","library(OREdplyr)","options(ore.warn.order=FALSE)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Overview of the data","message":["%r","","ore.sync(query = c(\"CUST_DF\" = \"select * from CUSTOMER_INSURANCE_LTV\"))","ore.attach()","z.show(head(CUST_DF, 5))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Check the unique states by count","message":["%r","","output <- count(CUST_DF, STATE)","colnames(output)[2] <- \"count\"","z.show(arrange(output, count))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Replace the state names with integers","message":["%r","","# Get vector of unique values in STATE column and create vector of integers to replace with.","state_names <- ore.pull(c(unique(CUST_DF$STATE)))","state_nums <- c(1:length(state_names))","","# Set STATE column to ore.character datatype before replacement.","CUST_DF$STATE <- as.ore.character(CUST_DF$STATE)","","# Replace the state names. ","CUST_DF$STATE <- ore.recode(CUST_DF$STATE, state_names, state_nums)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":"Check the unique states encoded as integers","message":["%r","","output <- arrange(count(CUST_DF, STATE), n)","colnames(output)[2] <- \"count\"","","class(output$STATE)","z.show(output)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Simple example recoding string values on a vector","message":["%r","","vec <- ore.push(c(\"a\", \"b\", NA, \"a\", \"c\", NA, \"e\"))","","cat(class(vec), \"\\n\")","","ore.recode(vec, c(\"a\", \"b\", \"c\"), c(\"able\", \"baker\", \"charlie\"))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Recode to multiple columns with different values","message":["%r","","ore.recode(vec, c(\"a\", \"b\", \"c\"),","            cbind(lower = c(\"able\", \"baker\", \"charlie\"),","                  upper = c(\"ABLE\", \"BAKER\", \"CHARLIE\")))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","## End of Script"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":true,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"}],"version":"6","snapshot":false,"tags":null}]