[{"layout":null,"template":null,"templateConfig":null,"name":"OML4R Data Transformation One-Hot Encoding","description":null,"readOnly":false,"type":"low","paragraphs":[{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":null,"message":["%md"," "],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":true,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","# OML4R Data Transformation: One-Hot Encoding","In this notebook, we demonstrate how to perform one-hot encoding using OML4R using the customer insurance lifetime value dataset, which contains customer financial information, lifetime value, and whether or not the customer bought insurance.","","The dataset `CUSTOMER_INSURANCE_LTV` is generated by the `\"OML Run-me-first\"` notebook, which `MUST` be run before this notebook.","","###### IMPORTANT: The `\"OML Run-me-first\"` notebook is available under the menu `Templates -> Examples` and is a pre-requisite to the current notebook.","","","**Note**: If the user plans to use the in-database algorithms, one hot encoding is automatically applied for those algorithms requiring it. The in-databae algorithms automatically explode the categorical columns and fit the model on the prepared data internally. For more details, see <a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml4sql/21/dmcon/generalized-linear-model.html#GUID-19B8E133-0029-4892-88BB-3E1C9E83EB12\" onclick=\"return ! window.open('https://docs.oracle.com/en/database/oracle/machine-learning/oml4sql/21/dmcon/generalized-linear-model.html#GUID-19B8E133-0029-4892-88BB-3E1C9E83EB12');\"> Data Preparation for GLM <\/a>","","Copyright (c) 2024 Oracle Corporation ","###### <a href=\"https://oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0<\/a>"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"For more information...","message":["%md ","","<a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml4r/2.0.0/oreug/prepare-and-explore-data-database.html\" target=\"_blank\">OML4R documentation on Data Preparation<\/a>"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Import R libraries","message":["%r","","library(ORE)","library(OREdplyr)","options(ore.warn.order=FALSE)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Get a proxy object to CUSTOMER_INSURANCE_LTV and subset of columns","message":["%r","","ore.sync(query = c(\"CUST_DF\" = \"SELECT * FROM CUSTOMER_INSURANCE_LTV\"))","ore.attach()","","CUST_CAT_DF <- CUST_DF[, c(\"CUSTOMER_ID\", \"MARITAL_STATUS\", \"STATE\", \"GENDER\", \"REGION\")]","","z.show(head(CUST_CAT_DF, 5))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Create function for one hot encoding","message":["%r ","","encode <- function(DF, ids, col) {","  uniqueValues <- ore.pull(unique(DF[col])) # Get the unique values of column col","  RESULT <- cbind(ids, DF[col]) # RESULT begins as ids and col to be encoded","","  # Rename columns","  col_index <- which(colnames(RESULT) == col)","  colnames(RESULT)[col_index] <- \"target_col\""," ","  # Add One Hot Encoded columns to RESULT","  for (x in 1:nrow(uniqueValues)){","    RESULT <- cbind(RESULT, new_col = ifelse(RESULT$target_col == uniqueValues[x,], 1, 0)) # Add encoded column","    # Rename encoded column","    index <- which(colnames(RESULT) == \"new_col\")","    colnames(RESULT)[index] <- paste(col, gsub(\" \", \"\", uniqueValues[x,1]), sep='.')","  }"," ","  # Now that One Hot Encoded columns have been added, remove original column","  RESULT <- RESULT[-c(col_index)]"," ","  return(RESULT)","}"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Apply one hot encoding to MARITAL_STATUS column and check the transformed data","message":["%r","","rownames(CUST_CAT_DF) <- CUST_CAT_DF$CUSTOMER_ID # Ordering rows of CUST_CAT_DF before applying function","","ONEHOT_DF <- encode(CUST_CAT_DF, CUST_CAT_DF['CUSTOMER_ID'], \"MARITAL_STATUS\")","","z.show(head(ONEHOT_DF))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Apply one-hot encoding to all selected categorical columns","message":["%r","","RES_DF <- CUST_CAT_DF[\"CUSTOMER_ID\"]","","for (col in colnames(CUST_CAT_DF)[-c(1)]){","  ","  ONEHOT_DF <- encode(CUST_CAT_DF, CUST_CAT_DF[\"CUSTOMER_ID\"], col)","  ","  RES_DF <- full_join(RES_DF, ONEHOT_DF)","}","","rownames(RES_DF) <- 1:nrow(RES_DF) # Renaming rows of RES_DF","","z.show(head(RES_DF))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","## End of Script"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":null,"message":["%md"," "],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":0,"hideResult":true,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"}],"version":"6","snapshot":false,"tags":null}]