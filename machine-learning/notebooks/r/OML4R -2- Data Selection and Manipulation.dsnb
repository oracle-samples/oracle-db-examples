[{"layout":null,"template":null,"templateConfig":null,"name":"OML4R -2- Data Selection and Manipulation","description":null,"readOnly":false,"type":"medium","paragraphs":[{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":null,"message":["%md"," "],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":true,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","","# Oracle Machine Learning for R - Data Selection and Manipulation","","***Oracle Machine Learning for R*** (OML4R) makes the open source R scripting language and environment ready for the enterprise and big data. Designed for problems involving both large and small data volumes, OML4R integrates R with Oracle Autonomous Database, allowing users to run R commands and scripts for statistical, machine learning, and visualization analyses on database tables and views using R syntax. Many familiar R functions are overloaded that translate R behavior into SQL for running in-database, as well as new automatic machine learning capabilities.","","In this notebook, we highlight features of the transparency layer involving data selection and manipulation.","","Copyright (c) 2024 Oracle Corporation ","###### <a href=\"https://oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0<\/a>","---"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","### Import libraries supporting OML4R and create data table"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":"[{\"raw\":{\"height\":300,\"lastColumns\":[],\"version\":1}}]","hideInIFrame":false,"selectedVisualization":"raw","title":"Import libraries","message":["%r","","library(ORE)","library(OREdplyr)","options(ore.warn.order=FALSE)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":"[{\"table\":{\"version\":1},\"raw\":{\"height\":300,\"lastColumns\":[\"'data.frame':\",\"150 obs. of  5 variables:\"],\"version\":1}}]","hideInIFrame":false,"selectedVisualization":"raw","title":"Obtain proxy object for IRIS_R table and view proxy object structure","message":["%r","","ore.sync(table=\"IRIS_R\")","","IRIS <- IRIS_R","","str(IRIS)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":"[{\"table\":{\"version\":1},\"boxplot\":{\"showSeries\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\"],\"title\":{\"text\":\"Boxplot of IRIS species flower dimensions\",\"color\":\"rgb(1, 154, 4)\"},\"lastColumns\":[\"Sepal.Length\",\"Sepal.Width\",\"Petal.Length\",\"Petal.Width\",\"Species\"],\"version\":1}}]","hideInIFrame":false,"selectedVisualization":"boxplot","title":"Compare flower dimension distribution across iris species","message":["%r","","z.show(IRIS)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","### Select table columns using proxy object IRIS"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Select columns by name","message":["%r","","IRIS_projected1 <- IRIS[, c(\"Sepal.Length\", \"Petal.Length\")]","z.show(head(IRIS_projected1))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Select columns by index range","message":["%r","","IRIS_projected2 <- IRIS[1:3]","z.show(head(IRIS_projected2))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Select columns by data type","message":["%r","","IRIS_projected3 <- IRIS[,sapply(as.list(IRIS), is.numeric)]","z.show(head(IRIS_projected3))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","### Select table rows using proxy object IRIS","","* Select sepal length and petal length where petal length is less than 1.5","* Select all rows in which petal length is less than 1.5 or sepal length is 5.0, using the AND and OR conditions in filtering","* Select all rows in which petal length is less than 1.5 and sepal length is larger than 5.0"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Select rows based on simple filter","message":["%r","","IRIS_projected4 <- IRIS_projected1[IRIS_projected1$Petal.Length <1.5 ,]","z.show(head(IRIS_projected4))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Compound row selection with 'or'","message":["%r","","IRIS_projected5 <- IRIS[IRIS$Petal.Length <1.5 | IRIS$Sepal.Length == 5 ,]","z.show(head(IRIS_projected5))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Compound row selection with 'and'","message":["%r","","IRIS_projected6 <- IRIS[IRIS$Petal.Length <1.5 & IRIS$Sepal.Length > 5 ,]","z.show(head(IRIS_projected6))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","### Use DataFrame objects","","Let's explore operations involving DataFrames."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Create demo data in temporary table","message":["%r","","my_df <- data.frame(id  = c(1,2,3,4,5),","                    val = c(\"a\", \"b\", \"c\", \"d\", \"e\"),","                    ch  = c(\"p\", \"q\", \"r\", \"a\", \"b\"),","                    num = c(4,3,6.7,7.2,5))","","MY_DF <- ore.push(my_df)","","NUM1 <- MY_DF$id","NUM2 <- MY_DF$num","","NUM_APPENDED <- cbind(NUM1,NUM2)","z.show(NUM_APPENDED)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Using concat()","message":["%md","","Next, try a few examples using the ***concat*** function.","","* Create two ore.frame proxy objects and combine the objects column-wise","* Create an derived column with the rounded exponential of two times the values in the num column of the ore.frame proxy object, then concatenate it with another ore.frame proxy object using a new column name","* Concatenate an ore.frame proxy object with multiple objects "],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Column-wise concatenation","message":["%r","","X <- MY_DF[, c(\"id\", \"val\")]","Y <- MY_DF[, c(\"num\", \"ch\")]","","XY_APPEND <- cbind(X,Y)","z.show(XY_APPEND)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Concatenate new derived column","message":["%r","","W <- round((exp(MY_DF$num*2)),2)","","YW_APPEND <- cbind(Y,W)","z.show(YW_APPEND)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Concatenate with renaming","message":["%r","","colnames(Y) <- c(\"New_Num\", \"New_ch\")","","XWY_APPEND <- cbind(X,W,Y)","z.show(XWY_APPEND)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","Next, explore merging data using ***merge***. Perform:","","* cross join","* left outer join","* right outer join"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Cross Join","message":["%r","","JOIN <- merge(X,Y)","z.show(JOIN)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Left outer join","message":["%r","","LEFT_JOIN <- merge(X,MY_DF, by = \"id\", all.x = TRUE)","z.show(LEFT_JOIN)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Right Outer Join","message":["%r","","RIGHT_JOIN <- merge(MY_DF,X, by = \"id\", all.y = TRUE)","z.show(RIGHT_JOIN)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","Next, try the drop functonality with ***na.omit***, ***is.na***, ***unique***, and ***distinct***."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Create demo data","message":["%r","","my_df2 <- data.frame(numeric1 = c(1,1.4,-4,-4,5.432,NA,NA), ","                     string1 = c(NA,NA,\"a\",\"a\",\"a\",\"b\",NA),","                     string2 = c(\"x\",NA,\"z\",\"z\",\"z\",\"x\",NA))","","MY_DF2 <- ore.push(my_df2)","z.show(MY_DF2)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Drop rows with any missing values","message":["%r","","MISS_VAL <- na.omit(MY_DF2)","z.show(MISS_VAL)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Drop rows with any missing values in column 'numeric1'","message":["%r","","MISS_VAL2 <- MY_DF2[!is.na(MY_DF2$numeric),]","z.show(MISS_VAL2)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Drop rows where all column values missing","message":["%r","","MISS_VAL3 <- rowSums(MY_DF2[-1] == \"NA\") == ncol(MY_DF2[-1])","z.show(MY_DF2[!MISS_VAL3,])"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Drop duplicate rows","message":["%r","","MISS_VAL4 <- unique(MY_DF2)","z.show(MISS_VAL4)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Drop rows with same value in named columns","message":["%r","","z.show(distinct(my_df2, string1, string2, .keep_all= TRUE))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Drop specific columns using column index","message":["%r","","DROP <- MY_DF2[,-3]","","z.show(DROP)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","### Splitting Data","","Next, explore splitting data into train and test sets using ore.frame proxy objects using the digitis dataset from sklearn.datasets, loaded using OML4Py. "],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":"[{\"raw\":{\"lastColumns\":[],\"version\":1}}]","hideInIFrame":false,"selectedVisualization":"raw","title":"Use digits data from Python scikit-learn datasets and create temporary table with proxy object in DIGITS","message":["%python","","import pandas as pd","import oml","from sklearn.datasets import load_digits","","digits = load_digits()","pd_digits = pd.DataFrame(digits.data,","                         columns=['IMG'+str(i) for i in","                         range(digits['data'].shape[1])])","pd_digits = pd.concat([pd_digits,","                       pd.Series(digits.target,","                                  name = 'target')],","                                  axis = 1)","oml.drop(table=\"DIGITS\")","oml.create(pd_digits, table=\"DIGITS\")"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Split data 80/20","message":["%r","","ore.sync(table=\"DIGITS\")","","rownames(DIGITS) <- DIGITS$target","sampleSize       <- .8 * nrow(DIGITS)","index            <- sample(1:nrow(DIGITS),sampleSize)","group            <- as.integer(1:nrow(DIGITS) %in% index)","","# Create train","DIGITS.train <- DIGITS[group==TRUE,]","cat(paste(\"TRAIN:\",nrow(DIGITS.train)))","","","# Create test","DIGITS.test <- DIGITS[group==FALSE,]","cat(paste(\"\\nTEST:\",nrow(DIGITS.test)))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Stratified sampling","message":["%r","","set.seed(1)","N <- nrow(DIGITS)","sampleSize <- 1000","stratifiedSample <-","  do.call(rbind,","          lapply(split(DIGITS, DIGITS$target),","                 function(y) {","                   ny <- nrow(y)","                   y[sample(ny, sampleSize*ny/N),,drop = FALSE]","                 }))","class(stratifiedSample)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"View stratified data with group column","message":["%r","","z.show(head(stratifiedSample[,c(1:3,64:65)], 10))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Verify stratified data","message":["%r","","table(stratifiedSample$target)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","Explore overloaded ***cor*** function to compute correlation on a small ore.frame proxy object. "],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Create demo data as temporary table and compute correlation \u200b","message":["%r","","my_df3 <- data.frame(","  A = c(0,1,2,3),","  B = c(0,2,4,6))","MY_DF3 <- ore.push(my_df3)","","cor(MY_DF3)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Modify data to alter correlation results","message":["%r","","my_df3[\"A\"][my_df3[\"A\"] == 2] <- 1.5","my_df3[\"B\"][my_df3[\"B\"] == 2] <- NA","MY_NDF3 <- ore.push(my_df3)","","z.show(MY_NDF3)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Default corr skipping missing values","message":["%r","","OMIT <- na.omit(MY_NDF3)","cor(OMIT)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Not skipping missing values produces NaNs","message":["%r","","cor(MY_NDF3)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","Next, explore the ***table*** function and ***dplyr***-related functions on a DataFrame relating gender, ","left or right handedness, and speed and accuracy on some task."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Create demo data as temporary table","message":["%r","","my_df4 = data.frame(","  GENDER   = c('M', 'M', 'F', 'M', 'F', 'M', 'F', 'F', NA, 'F', 'M', 'F'),","  HAND     = c('L', 'R', 'R', 'L', 'R', NA, 'L', 'R', 'R', 'R', 'R', 'R'),","  SPEED    = c(40.5, 30.4, 60.8, 51.2, 54, 29.3, 34.1, 39.6, 46.4, 12, 25.3, 37.5),","  ACCURACY = c(0.92, 0.94, 0.87, 0.90, 0.85, 0.97, 0.96, 0.93, 0.89, 0.84, 0.91, 0.95))","  ","MY_DF4 = ore.push(my_df4)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Find the categories that the most entries belonged to","message":["%r","","CROSSTAB <- table(MY_DF4$GENDER, MY_DF4$HAND) ","CROSSTAB"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"For each gender and across entries, find ratio of entries with different hand values","message":["%r","","round(CROSSTAB/nrow(MY_DF4),3)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Find the mean speed across all gender and hand combinations","message":["%r","","group <- MY_DF4 %>% group_by(GENDER, HAND)","","z.show(group %>% summarise(meanSPEED = mean(SPEED)))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Find the median vlaues for accuracy and speed by gender and hand","message":["%r","","group2 <- MY_DF4 %>% group_by(GENDER, HAND)","","z.show(group2 %>% summarise(mSPEED = median(SPEED), mACCURACY = median(ACCURACY)))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Find the max and min speeds for every gender and hand combination and across all combinations","message":["%r","","group3 <- MY_DF4 %>% group_by(GENDER, HAND)","","z.show(group3 %>% summarise(minSPEED = min(SPEED), maxSPEED = max(SPEED)))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","### Create new columns","","Next, explore creating new columns using a simple shopping cart data set. Note, that using the transparency layer, all these computations occur in-database. Neither the input nor the result needs to be brought to the client engine."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Create demo data as temporary table","message":["%r","","shopping_cart <- data.frame(","  ItemName = c('paper_towel', 'ground_pork', 'tofu', 'eggs',","                'pork_loin', 'whole_milk', 'egg_custard'),","  ItemType = c('grocery', 'meat', 'grocery', 'dairy', 'meat',","                'dairy', 'bakery'),","  Quantity = c(1, 2.6, 4, 1, 1.9, 1, 1),","  UnitPrice = c(1.19, 2.79, 0.99, 2.49, 3.19, 2.5, 3.99)",")","","SHOPPING_CART <- ore.push(shopping_cart)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Create a column Total = Quantity * Unit_price","message":["%r","","SHOPPING_CART$Total <- with(SHOPPING_CART, Quantity * UnitPrice)","z.show(SHOPPING_CART)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Count the pattern 'egg' in the Item_name column","message":["%r","","char <- as.character(shopping_cart$\"ItemName\") # MH: there should be no need to use \" around the col name","EggPattern <- lengths(regmatches(char, gregexpr(\"egg\", char)))","LCHAR_FRAME <- ore.frame(EggPattern)","EGG_PATTERN <- cbind(SHOPPING_CART,LCHAR_FRAME)","","z.show(EGG_PATTERN)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Check whether items are of grocery category","message":["%r","","SHOPPING_CART$IsGrocery <- ifelse(SHOPPING_CART$ItemType == \"grocery\",\"YES\") ","z.show(SHOPPING_CART)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Calculate the length of item names","message":["%r","","SHOPPING_CART$NameLength <- nchar(as.character(SHOPPING_CART$ItemName))","z.show(SHOPPING_CART)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Calculate ceiling of UnitPrice","message":["%r","","SHOPPING_CART$UnitPriceCeiling <- ceiling(SHOPPING_CART$UnitPrice)","z.show(SHOPPING_CART)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Use a few other functions to modify the Price column","message":["%r","","SHOPPING_CART$UnitPriceFloor <- floor(SHOPPING_CART$UnitPrice)","SHOPPING_CART$UnitPriceExp   <- exp(SHOPPING_CART$UnitPrice)","SHOPPING_CART$UnitPriceLog   <- log(SHOPPING_CART$UnitPrice)","SHOPPING_CART$UnitPriceSqrt  <- sqrt(SHOPPING_CART$UnitPrice)","z.show(SHOPPING_CART)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","Next, using a modified version of the *iris* data set, explore ***sort_values*** and ***tail*** functions.","","We modify the dataset by replacing a few entries with NaNs to test how the ***na_position*** parameter works in the ***sort_values*** method."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Sort data set by Sepal.Length then by Sepal.Width in descending order","message":["%r","","res <- ore.sort(data = IRIS, by = c(\"Sepal.Length\", \"Sepal.Width\"), reverse = TRUE)","z.show(head(res))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Display last 5 rows of the data set","message":["%r","","z.show(tail(IRIS))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","Next, we explore column creation/renaming, describing data statistics, and computing a variety of statistics."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Create demo data as temporary table","message":["%r","","my_df5 <- data.frame(","  numeric_col = c(1, 1.4, -4, 3.145, 5, NA),","  string_col = c(NA, NA, 'a', 'a', 'a', 'b'),","  byte_col = c('ba', 'bb', 'bc', 'bc', 'bd', 'be'))","","MY_DF5 <- ore.push(my_df5)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":4,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Combine a Boolean column with MY_DF4","message":["%r","","boolean_col <- MY_DF5$numeric_col > 3","MY_NDF5 <- cbind(MY_DF5,boolean_col)","","z.show(MY_NDF5)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":8,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","Use the `summary` function to compute a variety of statistics on all columns. Then, exclude the Float columns."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Get summary statistics on all columns","message":["%r","","summary(MY_NDF5)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":"Compute the sum of values in each Float or Boolean column","message":["%r","","sum(MY_NDF5$numeric_col, na.rm = TRUE)","sum(MY_NDF5$boolean_col, na.rm = TRUE)"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","","Find the cumulative sum of values in each Float or Boolean column after MY_DF5 is sorted by the bytes column in descending order. Then, compute skew, median, and kurtosis for float columns."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Compute cumulative sum","message":["%r","","MY_CDF5 <- MY_NDF5[, c(\"numeric_col\", \"boolean_col\")]","z.show(cumsum(MY_CDF5))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","Next, use the overloaded ***boxplot*** and ***hist*** functions using the *wine* data set. The statistics supporting these plots are computed in-database, so transfer of data or client side memory limitations are avoided."],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"table","title":"Create WINE data table from Python Scikit-learn","message":["%python","","import pandas as pd","import oml","import matplotlib.pyplot as plt","from sklearn.datasets import load_wine","","wine = load_wine()","wine_data = pd.DataFrame(wine.data, columns = wine.feature_names)","","oml.drop(\"WINE\")","","WINE = oml.create(wine_data, \"WINE\")","z.show(WINE.head(10))"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":"[{\"image\":{\"height\":400,\"lastColumns\":[]}}]","hideInIFrame":false,"selectedVisualization":"image","title":"Boxplot of proanthocyanins and histogram of proline","message":["%r","","ore.sync(table=\"WINE\")","","par(mfrow=c(1,2))","boxplot(WINE$proanthocyanins,main = \"Proanthocyanins\\nDistribution\", col=\"darkred\")","hist(WINE$proline, breaks = 10, col = 'darkgreen', ","     xlab = 'proline content', ","     ylab = '# of wine instances', main = 'Proline content' )"],"enabled":true,"result":null,"sizeX":0,"hideCode":false,"width":8,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","## End of Script"],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":null,"message":["%md"," "],"enabled":true,"result":null,"sizeX":0,"hideCode":true,"width":0,"hideResult":true,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"}],"version":"6","snapshot":false,"tags":null}]