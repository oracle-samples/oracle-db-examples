[{"layout":null,"template":null,"templateConfig":null,"name":"OML4Py Data Transformation Date Datatypes","description":null,"readOnly":false,"type":"medium","paragraphs":[{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":null,"message":[],"enabled":true,"result":{"startTime":1714497363869,"interpreter":"md.medium","endTime":1714497364025,"results":[],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":0,"hideResult":true,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","# OML4Py Date and Time Classes","","Oracle Machine Learning for Python (OML4Py) makes the open source Python scripting language and environment ready for the enterprise and big data. Designed for problems involving both large and small data volumes, OML4Py integrates Python with Oracle Autonomous Database, allowing users to run Python commands and scripts for statistical, machine learning, and visualization analyses on database tables and views using Python syntax. Many familiar Python functions are overloaded that translate Python behavior into SQL for running in-database, as well as new automatic machine learning capabilities.","","OML4Py provides three classes for manipulating dates and times: `oml.Datetime`, `oml.Timezone`, and `oml.Timedelta`.","","- `oml.Datetime` represents a table column of dates to support DATE or TIMESTAMP in Oracle Database. ","- `oml.Timezone` represents a table column of time zone data to support TIMESTAMP WITH TIMEZONE.","- `oml.Timedelta` represents a single column of differences between two dates or times to support INTERVAL DAY TO SECOND in Oracle Database.   ","","These classes are based on the <a href=\"https://docs.python.org/3.10/library/datetime.html\" onclick=\"return ! window.open('https://docs.python.org/3.10/library/datetime.html');\">Python datetime library.<\/a>","","In this notebook, we highlight features of OML4Py's date and time functionality.","","---","Copyright (c) 2024 Oracle Corporation ","###### <a href=\"https://oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0<\/a>","---"],"enabled":true,"result":{"startTime":1714497386279,"interpreter":"md.medium","endTime":1714497386340,"results":[{"message":"<h1 id=\"oml4py-date-and-time-classes\">OML4Py Date and Time Classes<\/h1>\n<p>Oracle Machine Learning for Python (OML4Py) makes the open source Python scripting language and environment ready for the enterprise and big data. Designed for problems involving both large and small data volumes, OML4Py integrates Python with Oracle Autonomous Database, allowing users to run Python commands and scripts for statistical, machine learning, and visualization analyses on database tables and views using Python syntax. Many familiar Python functions are overloaded that translate Python behavior into SQL for running in-database, as well as new automatic machine learning capabilities.<\/p>\n<p>OML4Py provides three classes for manipulating dates and times: <code>oml.Datetime<\/code>, <code>oml.Timezone<\/code>, and <code>oml.Timedelta<\/code>.<\/p>\n<ul>\n<li><code>oml.Datetime<\/code> represents a table column of dates to support DATE or TIMESTAMP in Oracle Database.<\/li>\n<li><code>oml.Timezone<\/code> represents a table column of time zone data to support TIMESTAMP WITH TIMEZONE.<\/li>\n<li><code>oml.Timedelta<\/code> represents a single column of differences between two dates or times to support INTERVAL DAY TO SECOND in Oracle Database.<\/li>\n<\/ul>\n<p>These classes are based on the <a href=\"https://docs.python.org/3.10/library/datetime.html\" onclick=\"return ! window.open('https://docs.python.org/3.10/library/datetime.html');\">Python datetime library.<\/a><\/p>\n<p>In this notebook, we highlight features of OML4Py's date and time functionality.<\/p>\n<hr />\n<p>Copyright (c) 2024 Oracle Corporation<\/p>\n<h6 id=\"the-universal-permissive-license-upl-version-10\"><a href=\"https://oss.oracle.com/licenses/upl/\" onclick=\"return ! window.open('https://oss.oracle.com/licenses/upl/');\">The Universal Permissive License (UPL), Version 1.0<\/a><\/h6>\n<hr />\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":"Import libraries","message":["%python","","import oml","","import pandas as pd","import numpy as np","","import datetime","from datetime import datetime, timezone, timedelta"],"enabled":true,"result":{"startTime":1714497364485,"interpreter":"python.medium","endTime":1714497366590,"results":[],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","## OML Datetime","","To create a date in Python, we use the `datetime` class of the `datetime` module, which is included in Python. The `datetime` class requires three parameters: *year*, *month*, and *day*. It also contains optional parameters for time and timezone, including *hour*, *minute*, *second*, *microsecond*, and *tzone*.","","Create a datetime object with the year, month, and day, then create a temporary proxy object using `oml.push`. The `oml.push `function requires a data frame or list as input, so we first convert the date object to a list. The resulting object is an object of class `oml.Datetime`.","","*Note: oml.Datetime is an alias to oml.core.datetime.Datetime. They are interchangeable functionally, as are aliases for the other `oml` classes, e.g., `oml.DateFrame`, `oml.Float`, etc.*"],"enabled":true,"result":{"startTime":1714497366681,"interpreter":"md.medium","endTime":1714497366761,"results":[{"message":"<h2 id=\"oml-datetime\">OML Datetime<\/h2>\n<p>To create a date in Python, we use the <code>datetime<\/code> class of the <code>datetime<\/code> module, which is included in Python. The <code>datetime<\/code> class requires three parameters: <em>year<\/em>, <em>month<\/em>, and <em>day<\/em>. It also contains optional parameters for time and timezone, including <em>hour<\/em>, <em>minute<\/em>, <em>second<\/em>, <em>microsecond<\/em>, and <em>tzone<\/em>.<\/p>\n<p>Create a datetime object with the year, month, and day, then create a temporary proxy object using <code>oml.push<\/code>. The <code>oml.push <\/code>function requires a data frame or list as input, so we first convert the date object to a list. The resulting object is an object of class <code>oml.Datetime<\/code>.<\/p>\n<p><em>Note: oml.Datetime is an alias to oml.core.datetime.Datetime. They are interchangeable functionally, as are aliases for the other <code>oml<\/code> classes, e.g., <code>oml.DateFrame<\/code>, <code>oml.Float<\/code>, etc.<\/em><\/p>\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"datetime ","message":["%python","","d1 = datetime(year=2004, month=7, day=24)","","print('d1:', d1)","print('type:', type(d1))","print('year:', d1.year)","print('month:', d1.month)","print('day:', d1.day)"],"enabled":true,"result":{"startTime":1714497366848,"interpreter":"python.medium","endTime":1714497367002,"results":[{"message":"d1: 2004-07-24 00:00:00\ntype: <class 'datetime.datetime'>\nyear: 2004\nmonth: 7\nday: 24\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"oml.Datetime","message":["%python","","d1_lst = [d1] ","D1 = oml.push(d1_lst)","","print('D1:', D1)","print('type:', type(D1))","print('year:', D1.year)","print('month:', D1.month)","print('day:', D1.day)"],"enabled":true,"result":{"startTime":1714497367089,"interpreter":"python.medium","endTime":1714497367529,"results":[{"message":"D1: [datetime.datetime(2004, 7, 24, 0, 0)]\ntype: <class 'oml.core.datetime.Datetime'>\nyear: [2004]\nmonth: [7]\nday: [24]\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","## Datetime method `fromisoformat`","The datetime method `fromisoformat` constructs a date or datetime object from a string containing date in ISO format, e.g., yyyy-mm-dd. Create a datetime object with the year, month, day, and time, then create a temporary proxy object using `oml.push`. The resulting object is an object of class `oml.Datetime`.","","---"],"enabled":true,"result":{"startTime":1714497367611,"interpreter":"md.medium","endTime":1714497367674,"results":[{"message":"<h2 id=\"datetime-method-fromisoformat\">Datetime method <code>fromisoformat<\/code><\/h2>\n<p>The datetime method <code>fromisoformat<\/code> constructs a date or datetime object from a string containing date in ISO format, e.g., yyyy-mm-dd. Create a datetime object with the year, month, day, and time, then create a temporary proxy object using <code>oml.push<\/code>. The resulting object is an object of class <code>oml.Datetime<\/code>.<\/p>\n<hr />\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":null,"message":["%python","","d2 = datetime.fromisoformat('2004-07-24 00:05:23+04:00')","d2_lst=[d2]","","D2 = oml.push(d2_lst)","","print('D2', D2)","print('type', type(D2))"],"enabled":true,"result":{"startTime":1714497367754,"interpreter":"python.medium","endTime":1714497367942,"results":[{"message":"D2 [datetime.datetime(2004, 7, 24, 0, 5, 23, tzinfo=datetime.timezone(datetime.timedelta(seconds=14400)))]\ntype <class 'oml.core.datetime.Datetime'>\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":null,"message":["%python","","datetime.now()"],"enabled":true,"result":{"startTime":1714497368036,"interpreter":"python.medium","endTime":1714497368116,"results":[{"message":"datetime.datetime(2024, 4, 30, 17, 16, 8, 102199)\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","","## Date format codes","","The `strftime` method converts a datetime object to a string, and `strptime` converts a string to a datetime object. Dates have a default representation of: **YYYY-MM-DD:HH:MM:SS.mmmmmm**","but you may want to print them in a specific format. In that case, you can get a custom string representation using the available <a href=\"https://docs.python.org/3/library/datetime.html\" onclick=\"return ! window.open('https://docs.python.org/3/library/datetime.html');\">format codes.<\/a>","","The format codes for the default date representation are shown in the table below.","","<table>","  <tr>","    <th>Code<\/th>","    <th>Example<\/th>","    <th>Description<\/th>","  <\/tr>","  <tr>","    <td>%a<\/td>","    <td>Sun<\/td>","    <td>Day abbreviated<\/td>","  <\/tr>","  <tr>","    <td>%b<\/td>","    <td>Sep<\/td>","    <td>Month abbreviated<\/td>","  <\/tr>","  <tr>","    <td>%d<\/td>","    <td>08<\/td>","    <td>Decimal Month<\/td>","  <\/tr>","  <tr>","    <td>%H<\/td>","    <td>07<\/td>","    <td>Decimal Hour<\/td>","  <\/tr>","  <tr>","    <td>%M<\/td>","    <td>06<\/td>","    <td>Decimal Minute<\/td>","  <\/tr>","  <tr>","    <td>%S<\/td>","    <td>05<\/td>","    <td>Decimal Second<\/td>","  <\/tr>","  <tr>","    <td>%Y<\/td>","    <td>2015<\/td>","    <td>Decimal Year<\/td>","  <\/tr>","<\/table>","<br>","","---"],"enabled":true,"result":{"startTime":1714497368201,"interpreter":"md.medium","endTime":1714497368280,"results":[{"message":"<h2 id=\"date-format-codes\">Date format codes<\/h2>\n<p>The <code>strftime<\/code> method converts a datetime object to a string, and <code>strptime<\/code> converts a string to a datetime object. Dates have a default representation of: <strong>YYYY-MM-DD:HH:MM:SS.mmmmmm<\/strong>\nbut you may want to print them in a specific format. In that case, you can get a custom string representation using the available <a href=\"https://docs.python.org/3/library/datetime.html\" onclick=\"return ! window.open('https://docs.python.org/3/library/datetime.html');\">format codes.<\/a><\/p>\n<p>The format codes for the default date representation are shown in the table below.<\/p>\n<table>\n  <tr>\n    <th>Code<\/th>\n    <th>Example<\/th>\n    <th>Description<\/th>\n  <\/tr>\n  <tr>\n    <td>%a<\/td>\n    <td>Sun<\/td>\n    <td>Day abbreviated<\/td>\n  <\/tr>\n  <tr>\n    <td>%b<\/td>\n    <td>Sep<\/td>\n    <td>Month abbreviated<\/td>\n  <\/tr>\n  <tr>\n    <td>%d<\/td>\n    <td>08<\/td>\n    <td>Decimal Month<\/td>\n  <\/tr>\n  <tr>\n    <td>%H<\/td>\n    <td>07<\/td>\n    <td>Decimal Hour<\/td>\n  <\/tr>\n  <tr>\n    <td>%M<\/td>\n    <td>06<\/td>\n    <td>Decimal Minute<\/td>\n  <\/tr>\n  <tr>\n    <td>%S<\/td>\n    <td>05<\/td>\n    <td>Decimal Second<\/td>\n  <\/tr>\n  <tr>\n    <td>%Y<\/td>\n    <td>2015<\/td>\n    <td>Decimal Year<\/td>\n  <\/tr>\n<\/table>\n<br>\n<hr />\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Convert date to string","message":["#%python","","D3 = D2.strftime()","","print('D3', D3)","print('type', type(D3))"],"enabled":true,"result":{"startTime":1714497368361,"interpreter":"md.medium","endTime":1714497368440,"results":[{"message":"<p>#%python<\/p>\n<p>D3 = D2.strftime()<\/p>\n<p>print('D3', D3)\nprint('type', type(D3))<\/p>\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Convert string to date","message":["%python","","d4 = \"14-Jul-05 20:01:01\"","d4_lst = [d4]","","# create a temporary proxy object","D4 = oml.push(d4_lst)","","# convert the string to an oml.Datetime object with the provided format","D5 = oml.Datetime.strptime(D4, format=\"DD-Mon-RR HH24:MI:SS\")","","print('D5', D5)","print('type', type(D5))"],"enabled":true,"result":{"startTime":1714497368522,"interpreter":"python.medium","endTime":1714497368708,"results":[{"message":"D5 [datetime.datetime(2005, 7, 14, 20, 1, 1)]\ntype <class 'oml.core.datetime.Datetime'>\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","## OML Timedelta","","`oml.Timedelta` objects represent a column of differences between two dates or times and can be used to perform simple arithmetic operations on `oml.Datetime` objects. `oml.Timedelta` objects can be multiplied by an integer value or a floating point value. Subtracting dates produces an `oml.Timedelta` object that can be added or subtracted by an `oml.Timedate` object to produce another date.","","Create a time-based object using the current date and time, and create an `oml.Timedelta` object named DELT1 to determine a past and future dates.","","---"],"enabled":true,"result":{"startTime":1714497368793,"interpreter":"md.medium","endTime":1714497368873,"results":[{"message":"<h2 id=\"oml-timedelta\">OML Timedelta<\/h2>\n<p><code>oml.Timedelta<\/code> objects represent a column of differences between two dates or times and can be used to perform simple arithmetic operations on <code>oml.Datetime<\/code> objects. <code>oml.Timedelta<\/code> objects can be multiplied by an integer value or a floating point value. Subtracting dates produces an <code>oml.Timedelta<\/code> object that can be added or subtracted by an <code>oml.Timedate<\/code> object to produce another date.<\/p>\n<p>Create a time-based object using the current date and time, and create an <code>oml.Timedelta<\/code> object named DELT1 to determine a past and future dates.<\/p>\n<hr />\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"timedelta","message":["%python","","today = datetime.now()","print('today:', today)","","delt1 = timedelta(days=1, hours=2, seconds=5)","print('delt1:', delt1)","print('type:', type(delt1))"],"enabled":true,"result":{"startTime":1714497368958,"interpreter":"python.medium","endTime":1714497369039,"results":[{"message":"today: 2024-04-30 17:16:09.021485\ndelt1: 1 day, 2:00:05\ntype: <class 'datetime.timedelta'>\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"oml.Timedelta","message":["%python","","dat = pd.DataFrame({'datetime': [today], 'timedelta': [delt1]})","","DAT = oml.push(dat, dbtypes = ['TIMESTAMP', 'INTERVAL DAY TO SECOND'])","print(DAT)","","TODAY = DAT['datetime']","DELT1 = DAT['timedelta']","","print('TODAY:', today)","print('DELT1:', DELT1)","print('type:', type(DELT1))"],"enabled":true,"result":{"startTime":1714497369120,"interpreter":"python.medium","endTime":1714497369348,"results":[{"message":"                    datetime       timedelta\n0 2024-04-30 17:16:09.021485 1 days 02:00:05\nTODAY: 2024-04-30 17:16:09.021485\nDELT1: [datetime.timedelta(days=1, seconds=7205)]\ntype: <class 'oml.core.timedelta.Timedelta'>\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"timedelta operations","message":["%python","","past_date1 = today - delt1","print('past date 1:', past_date1)","","past_date2 = today - (delt1 *3)","print('past date 2:', past_date2)","","future_date1 = today + delt1","print('future date 1:', future_date1)","","future_date2 = today + (delt1 *3)","print('future date 2:', future_date2)"],"enabled":true,"result":{"startTime":1714497369439,"interpreter":"python.medium","endTime":1714497369518,"results":[{"message":"past date 1: 2024-04-29 15:16:04.021485\npast date 2: 2024-04-27 11:15:54.021485\nfuture date 1: 2024-05-01 19:16:14.021485\nfuture date 2: 2024-05-03 23:16:24.021485\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"oml.Timedelta operations","message":["%python","","past_date3 = TODAY - DELT1","print('past date 3:', past_date1)","","past_date4 = TODAY - (DELT1 *3)","print('past date 4:', past_date2)","","future_date3 = TODAY + DELT1","print('future date 3:', future_date1)","","future_date4 = TODAY + (DELT1 *3)","print('future date 4:', future_date2)"],"enabled":true,"result":{"startTime":1714497369605,"interpreter":"python.medium","endTime":1714497369683,"results":[{"message":"past date 3: 2024-04-29 15:16:04.021485\npast date 4: 2024-04-27 11:15:54.021485\nfuture date 3: 2024-05-01 19:16:14.021485\nfuture date 4: 2024-05-03 23:16:24.021485\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","## Value Comparison","","Dates and datetime objects can be compared using standard arithmetic comparison operators (like <, >, <=, >=, != etc.). ","","The examples below compare `oml.Datetime` columns in a proxy object."],"enabled":true,"result":{"startTime":1714497369764,"interpreter":"md.medium","endTime":1714497369826,"results":[{"message":"<h2 id=\"value-comparison\">Value Comparison<\/h2>\n<p>Dates and datetime objects can be compared using standard arithmetic comparison operators (like &lt;, &gt;, &lt;=, &gt;=, != etc.).<\/p>\n<p>The examples below compare <code>oml.Datetime<\/code> columns in a proxy object.<\/p>\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"Create Proxy data frame with two oml.Datetime columns","message":["%python","","d1 = datetime(2005, 7, 14, 5, 10, 30)","d2 = datetime(2004, 6, 30, 1, 22, 46)","d3 = datetime(2003, 12, 10, 12, 50, 25)","d4 = datetime(2002, 3, 20, 20, 42, 59)","","d3 = pd.DataFrame({'X': [d1, d2], 'Y': [d3, d4]})                                                              ","D3 = oml.push(d3, dbtypes = ['TIMESTAMP', 'TIMESTAMP'])","","print(D3)"],"enabled":true,"result":{"startTime":1714497369912,"interpreter":"python.medium","endTime":1714497370116,"results":[{"message":"                    X                   Y\n0 2005-07-14 05:10:30 2003-12-10 12:50:25\n1 2004-06-30 01:22:46 2002-03-20 20:42:59\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":null,"message":["","%python","","D4 = D3['X']","D5 = D3['Y']","","print(\"D4:\", D4)","print(\"D4 type:\", type(D4))","","print(\"D5:\", D5)","print(\"D5 type:\", type(D5))"],"enabled":true,"result":{"startTime":1714497370204,"interpreter":"python.medium","endTime":1714497370478,"results":[{"message":"D4: [datetime.datetime(2005, 7, 14, 5, 10, 30), datetime.datetime(2004, 6, 30, 1, 22, 46)]\nD4 type: <class 'oml.core.datetime.Datetime'>\nD5: [datetime.datetime(2003, 12, 10, 12, 50, 25), datetime.datetime(2002, 3, 20, 20, 42, 59)]\nD5 type: <class 'oml.core.datetime.Datetime'>\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"equal to","message":["%python","","# equal to","print(D4 == D5)","","# not equal to","print(D4 != D5) "],"enabled":true,"result":{"startTime":1714497370564,"interpreter":"python.medium","endTime":1714497370721,"results":[{"message":"[False, False]\n[True, True]\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"greater than","message":["%python","","# greater than","print(D4 > D5) ","","# greater than or equal to","print(D4 >= D5) ## "],"enabled":true,"result":{"startTime":1714497370806,"interpreter":"python.medium","endTime":1714497370959,"results":[{"message":"[True, True]\n[True, True]\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"less than","message":["%python","","# less than","print(D4 < D5)","","# less than or equal to","print(D4 <= D5)"],"enabled":true,"result":{"startTime":1714497371040,"interpreter":"python.medium","endTime":1714497371192,"results":[{"message":"[False, False]\n[False, False]\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"max/min","message":["%python","","print(\"max:\", D3['X'].max())","","print(\"min:\", D3['Y'].min())"],"enabled":true,"result":{"startTime":1714497371278,"interpreter":"python.medium","endTime":1714497371400,"results":[{"message":"max: 2005-07-14 05:10:30\nmin: 2002-03-20 20:42:59\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","## Value Replacement","","Update specific or all elements of an `oml.Datetime` object, such as year, month, and day."],"enabled":true,"result":{"startTime":1714497371484,"interpreter":"md.medium","endTime":1714497371548,"results":[{"message":"<h2 id=\"value-replacement\">Value Replacement<\/h2>\n<p>Update specific or all elements of an <code>oml.Datetime<\/code> object, such as year, month, and day.<\/p>\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":null,"message":["%python","","D4 = D3['X'].replace(year=2000)","print(\"D4:\", D4)","","D5 = D3['X'].replace(month=11)","print(\"D5:\", D5)","","D6 = D3['X'].replace(day=6)","print(\"D6:\", D6)"],"enabled":true,"result":{"startTime":1714497371630,"interpreter":"python.medium","endTime":1714497371817,"results":[{"message":"D4: [datetime.datetime(2000, 7, 14, 5, 10, 30), datetime.datetime(2000, 6, 30, 1, 22, 46)]\nD5: [datetime.datetime(2005, 11, 14, 5, 10, 30), datetime.datetime(2004, 11, 30, 1, 22, 46)]\nD6: [datetime.datetime(2005, 7, 6, 5, 10, 30), datetime.datetime(2004, 6, 6, 1, 22, 46)]\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","## Date Exploration","","Create an OML proxy object containing a datetime column and explore the object using the transparency layer functions `describe`, `nunique`, `min` and `max`.","","---"],"enabled":true,"result":{"startTime":1714497371906,"interpreter":"md.medium","endTime":1714497371970,"results":[{"message":"<h2 id=\"date-exploration\">Date Exploration<\/h2>\n<p>Create an OML proxy object containing a datetime column and explore the object using the transparency layer functions <code>describe<\/code>, <code>nunique<\/code>, <code>min<\/code> and <code>max<\/code>.<\/p>\n<hr />\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":null,"message":["%python","","date_today = datetime.now()","ndays = 10","","df = pd.DataFrame({'Date': [date_today + timedelta(days=x) for x in range(ndays)], ","                   'Val': pd.Series(np.random.randn(ndays))})","","DF = oml.push(df)","DF.head()"],"enabled":true,"result":{"startTime":1714497372052,"interpreter":"python.medium","endTime":1714497372431,"results":[{"message":"                        Date       Val\n0 2024-04-30 17:16:12.113756 -0.204708\n1 2024-05-01 17:16:12.113756  0.478943\n2 2024-05-02 17:16:12.113756 -0.519439\n3 2024-05-03 17:16:12.113756 -0.555730\n4 2024-05-04 17:16:12.113756  1.965781\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"describe date column","message":["%python","","DF['Date'].describe()"],"enabled":true,"result":{"startTime":1714497372513,"interpreter":"python.medium","endTime":1714497372635,"results":[{"message":"count                             10\nunique                            10\ntop       2024-05-09 17:16:12.113756\nfreq                               1\nName: Date, dtype: object\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":3,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"number of unique dates","message":["%python","","DF['Date'].nunique()"],"enabled":true,"result":{"startTime":1714497372715,"interpreter":"python.medium","endTime":1714497372812,"results":[{"message":"10\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":3,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"earliest date","message":["%python","","DF['Date'].min()"],"enabled":true,"result":{"startTime":1714497372892,"interpreter":"python.medium","endTime":1714497372989,"results":[{"message":"Timestamp('2024-04-30 17:16:12.113756')\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":3,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"latest date","message":["%python","","DF['Date'].max()"],"enabled":true,"result":{"startTime":1714497373072,"interpreter":"python.medium","endTime":1714497373194,"results":[{"message":"Timestamp('2024-05-09 17:16:12.113756')\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":3,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","## Date sorting","","Explore the `sort_values`, `head`, and  `tail` functions by sorting values by Date in ascending and descending order.","","---"],"enabled":true,"result":{"startTime":1714497373272,"interpreter":"md.medium","endTime":1714497373337,"results":[{"message":"<h2 id=\"date-sorting\">Date sorting<\/h2>\n<p>Explore the <code>sort_values<\/code>, <code>head<\/code>, and  <code>tail<\/code> functions by sorting values by Date in ascending and descending order.<\/p>\n<hr />\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"ascending order - first five rows","message":["%python","","DF.sort_values(by = ['Date'], ascending=False).head(5)"],"enabled":true,"result":{"startTime":1714497373414,"interpreter":"python.medium","endTime":1714497374158,"results":[{"message":"                        Date       Val\n0 2024-05-09 17:16:12.113756  1.246435\n1 2024-05-08 17:16:12.113756  0.769023\n2 2024-05-07 17:16:12.113756  0.281746\n3 2024-05-06 17:16:12.113756  0.092908\n4 2024-05-05 17:16:12.113756  1.393406\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"raw","title":"descending order - last 5 rows","message":["%python","","DF.sort_values(by = ['Date'], ascending=False).tail(5)"],"enabled":true,"result":{"startTime":1714497374240,"interpreter":"python.medium","endTime":1714497374968,"results":[{"message":"                        Date       Val\n0 2024-05-04 17:16:12.113756  1.965781\n1 2024-05-03 17:16:12.113756 -0.555730\n2 2024-05-02 17:16:12.113756 -0.519439\n3 2024-05-01 17:16:12.113756  0.478943\n4 2024-04-30 17:16:12.113756 -0.204708\n","type":"TEXT"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":false,"width":6,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":true,"hideVizConfig":false,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":"html","title":null,"message":["%md","","# End of Script"],"enabled":true,"result":{"startTime":1714497375051,"interpreter":"md.medium","endTime":1714497375114,"results":[{"message":"<h1 id=\"end-of-script\">End of Script<\/h1>\n","type":"HTML"}],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":12,"hideResult":false,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"},{"col":0,"visualizationConfig":null,"hideInIFrame":false,"selectedVisualization":null,"title":null,"message":[],"enabled":true,"result":{"startTime":1714497375231,"interpreter":"md.medium","endTime":1714497375294,"results":[],"taskStatus":"SUCCESS","forms":"[]","status":"SUCCESS"},"sizeX":0,"hideCode":true,"width":0,"hideResult":true,"dynamicFormParams":null,"row":0,"hasTitle":false,"hideVizConfig":true,"hideGutter":true,"relations":[],"forms":"[]"}],"version":"6","snapshot":false,"tags":null}]