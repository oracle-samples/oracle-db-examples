{"paragraphs":[{"text":"%md\n\n# Oracle Machine Learning for Python (OML4Py)\n\n***Oracle Machine Learning for Python*** (OML4Py) makes the open source Python scripting language and environment ready for the enterprise and big data. Designed for problems involving both large and small data volumes, OML4Py integrates Python with Oracle Autonomous Database, allowing users to run Python commands and scripts for statistical, machine learning, and visualization analyses on database tables and views using Python syntax. Many familiar Python functions are overloaded that translate Python behavior into SQL for running in-database, as well as new automatic machine learning capabilities. \n\nIn this lab, you will learn about the **datastore** feature of OML4Py.\n\nDatastores exist in the user’s Oracle Database schema. A datastore, and the objects it contains, persist in the database until explicitly deleted. By using a datastore, you can store Python objects in a named datastore entry. This named datastore can then be used in subsequent Python sessions, and even be made available to other users or programs by granting/revoking read permissions.\n\nPython objects, including OML DataFrame proxy objects, exist for the duration of the current Python session unless you explicitly save them. You can save one or more Python objects, including OML DataFrame proxy objects, to a named datastore and then load those objects in a later Python session. This is also useful when using embedded Python execution.\n\nBy using a **datastore**, you can:\n\n* Save OML4Py and other Python objects in one Python session and load them in another Python session\n* Pass non-scalar arguments to Python functions for use in embedded Python execution from both the Python, and more importantly, the SQL API where only scalar values can be passed to functions\n* List available datastores and explore the contents of a datastore\n\nCopyright (c) 2021 Oracle Corporation                             \n###### [The Universal Permissive License (UPL), Version 1.0](https://oss.oracle.com/licenses/upl/)","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:06+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","fontSize":9,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Oracle Machine Learning for Python (OML4Py)</h1>\n<p><strong><em>Oracle Machine Learning for Python</em></strong> (OML4Py) makes the open source Python scripting language and environment ready for the enterprise and big data. Designed for problems involving both large and small data volumes, OML4Py integrates Python with Oracle Autonomous Database, allowing users to run Python commands and scripts for statistical, machine learning, and visualization analyses on database tables and views using Python syntax. Many familiar Python functions are overloaded that translate Python behavior into SQL for running in-database, as well as new automatic machine learning capabilities.</p>\n<p>In this lab, you will learn about the <strong>datastore</strong> feature of OML4Py.</p>\n<p>Datastores exist in the user’s Oracle Database schema. A datastore, and the objects it contains, persist in the database until explicitly deleted. By using a datastore, you can store Python objects in a named datastore entry. This named datastore can then be used in subsequent Python sessions, and even be made available to other users or programs by granting/revoking read permissions.</p>\n<p>Python objects, including OML DataFrame proxy objects, exist for the duration of the current Python session unless you explicitly save them. You can save one or more Python objects, including OML DataFrame proxy objects, to a named datastore and then load those objects in a later Python session. This is also useful when using embedded Python execution.</p>\n<p>By using a <strong>datastore</strong>, you can:</p>\n<ul>\n<li>Save OML4Py and other Python objects in one Python session and load them in another Python session</li>\n<li>Pass non-scalar arguments to Python functions for use in embedded Python execution from both the Python, and more importantly, the SQL API where only scalar values can be passed to functions</li>\n<li>List available datastores and explore the contents of a datastore</li>\n</ul>\n<p>Copyright (c) 2021 Oracle Corporation</p>\n<h6><a href=\"https://oss.oracle.com/licenses/upl/\">The Universal Permissive License (UPL), Version 1.0</a></h6>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-993084845","id":"20210125-170340_2110973553","dateCreated":"2021-01-10T19:41:20+0000","dateStarted":"2021-02-05T20:48:07+0000","dateFinished":"2021-02-05T20:48:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"focus":true,"$$hashKey":"object:40"},{"title":"Step 1: Import OML4Py and supporting libraries","text":"%md\n\nTo use OML4Py, first import the package *oml*. Import the *Pandas* package to work with oml DataFrames.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To use OML4Py, first import the package <em>oml</em>. Import the <em>Pandas</em> package to work with oml DataFrames.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1317290829","id":"20210125-170340_752438213","dateCreated":"2021-01-10T19:49:44+0000","dateStarted":"2021-02-05T20:48:10+0000","dateFinished":"2021-02-05T20:48:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:41"},{"text":"%python\n\nimport pandas as pd\nimport oml\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:10+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1611594220183_538571376","id":"20210125-170340_378965383","dateCreated":"2021-01-10T19:54:18+0000","dateStarted":"2021-02-05T20:48:10+0000","dateFinished":"2021-02-05T20:48:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:42"},{"title":"Step 2: Create Pandas DataFrames and load them into Autonomous Database","text":"%md\n\nIn this section, you will work with three data sets - *IRIS* data set, *Diabetes* data set, and *Boston* data set. \n\nYou will learn how to:\n\n* Get an OML DataFrame proxy object for the IRIS table and display the columns.\n* Create and display the columns for each data set\n* Use the dataframe to explore the datastore functionality\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In this section, you will work with three data sets - <em>IRIS</em> data set, <em>Diabetes</em> data set, and <em>Boston</em> data set.</p>\n<p>You will learn how to:</p>\n<ul>\n<li>Get an OML DataFrame proxy object for the IRIS table and display the columns.</li>\n<li>Create and display the columns for each data set</li>\n<li>Use the dataframe to explore the datastore functionality</li>\n</ul>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_502467029","id":"20210125-170340_1390673741","dateCreated":"2021-01-10T19:54:47+0000","dateStarted":"2021-02-05T20:48:19+0000","dateFinished":"2021-02-05T20:48:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:43"},{"text":"%md\n\n.\nSync the *IRIS* table in the OMLUSER schema to an OML DataFrame proxy object.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Sync the <em>IRIS</em> table in the OMLUSER schema to an OML DataFrame proxy object.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1251005264","id":"20210125-170340_954759694","dateCreated":"2021-01-10T19:58:58+0000","dateStarted":"2021-02-05T20:48:20+0000","dateFinished":"2021-02-05T20:48:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:44"},{"text":"%python\n\nIRIS = oml.sync(\"OMLUSER\", view = \"IRIS_VIEW\")\n\nprint(IRIS.columns)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['SEPAL_LENGTH', 'SEPAL_WIDTH', 'PETAL_LENGTH', 'PETAL_WIDTH', 'SPECIES']\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-751788575","id":"20210125-170340_1577683381","dateCreated":"2021-01-10T19:59:22+0000","dateStarted":"2021-02-05T20:48:20+0000","dateFinished":"2021-02-05T20:48:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:45"},{"text":"%md\n\n.\nCreate the temporary *diabetes* table.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Create the temporary <em>diabetes</em> table.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-279322637","id":"20210125-170340_2085739846","dateCreated":"2021-01-10T19:59:53+0000","dateStarted":"2021-02-05T20:48:21+0000","dateFinished":"2021-02-05T20:48:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:46"},{"text":"%python\n\nfrom sklearn import datasets\ndiabetes = datasets.load_diabetes()\nx = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\ny = pd.DataFrame(diabetes.target, columns=['disease_progression'])\n\nDIABETES_TMP = oml.push(pd.concat([x, y], axis=1))\nprint(DIABETES_TMP.columns)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6', 'disease_progression']\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1700828016","id":"20210125-170340_822434838","dateCreated":"2021-01-10T20:02:17+0000","dateStarted":"2021-02-05T20:48:21+0000","dateFinished":"2021-02-05T20:48:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:47"},{"text":"%md\n\n.\nCreate the temporary *Boston* table.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:22+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Create the temporary <em>Boston</em> table.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_2094428760","id":"20210125-170340_1254516786","dateCreated":"2021-01-10T20:02:32+0000","dateStarted":"2021-02-05T20:48:22+0000","dateFinished":"2021-02-05T20:48:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:48"},{"text":"%python\n\nboston = datasets.load_boston()\nx = pd.DataFrame(boston.data, columns = boston.feature_names.tolist())\ny = pd.DataFrame(boston.target, columns = ['Value'])\n\nBOSTON_TMP = oml.push(pd.concat([x, y], axis=1))\nprint(BOSTON_TMP.columns)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:22+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'Value']\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_2074735972","id":"20210125-170340_1477448958","dateCreated":"2021-01-10T20:03:05+0000","dateStarted":"2021-02-05T20:48:23+0000","dateFinished":"2021-02-05T20:48:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:49"},{"title":"Step 3: Save Python objects to datastore","text":"%md\n\nSave the *IRIS* data set and the temporary *BOSTON* proxy object to a datastore named *ds_pydata*, overwriting if the named datastore already exists. Note that you can store actual data objects in a datastore, but large data objects should remain as database tables for performance and scalability.\n\nBy storing the *BOSTON_TMP* object, the temporary table will not be deleted when the session terminates.\n\n\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Save the <em>IRIS</em> data set and the temporary <em>BOSTON</em> proxy object to a datastore named <em>ds_pydata</em>, overwriting if the named datastore already exists. Note that you can store actual data objects in a datastore, but large data objects should remain as database tables for performance and scalability.</p>\n<p>By storing the <em>BOSTON_TMP</em> object, the temporary table will not be deleted when the session terminates.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1802978259","id":"20210125-170340_710494551","dateCreated":"2021-01-10T20:03:28+0000","dateStarted":"2021-02-05T20:48:23+0000","dateFinished":"2021-02-05T20:48:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:50"},{"text":"%md\n\n.\nSave the *IRIS* and *BOSTON* tables in the OML4Py Autonomous Database datastore.\n\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Save the <em>IRIS</em> and <em>BOSTON</em> tables in the OML4Py Autonomous Database datastore.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1295400331","id":"20210125-170340_833050086","dateCreated":"2021-01-10T20:04:19+0000","dateStarted":"2021-02-05T20:48:24+0000","dateFinished":"2021-02-05T20:48:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:51"},{"text":"%python\n\noml.ds.save(objs={'oml_iris':IRIS, 'oml_boston':BOSTON_TMP},\n            name=\"ds_pydata\", description = \"python datasets\",\n            overwrite=True)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1611594220183_-1657367655","id":"20210125-170340_1222196248","dateCreated":"2021-01-10T21:08:12+0000","dateStarted":"2021-02-05T20:48:24+0000","dateFinished":"2021-02-05T20:48:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:52"},{"text":"%md\n\n.\nAdd the temporary DIABETES_TMP proxy object to the same datastore. Note the use of *append=True*.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Add the temporary DIABETES_TMP proxy object to the same datastore. Note the use of <em>append=True</em>.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_26350783","id":"20210125-170340_280389145","dateCreated":"2021-01-10T21:08:22+0000","dateStarted":"2021-02-05T20:48:47+0000","dateFinished":"2021-02-05T20:48:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:53"},{"text":"%python\n\noml.ds.save(objs={'oml_diabetes':DIABETES_TMP}, name=\"ds_pydata\", append=True)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1611594220183_-1151917328","id":"20210125-170340_1891997353","dateCreated":"2021-01-10T21:10:17+0000","dateStarted":"2021-02-05T20:48:48+0000","dateFinished":"2021-02-05T20:48:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:54"},{"text":"%md\n\n.\nSave the *IRIS* table to a new datastore, and then list the datastores. Notice we see the datastore name, the number of objects in the datastore, the size in bytes consumed, when the datastore was create/updated, and any description provided by the user. Our two datastores *ds_iris_data* and *ds_pydata* are present, with the latter containing the three objects we added\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Save the <em>IRIS</em> table to a new datastore, and then list the datastores. Notice we see the datastore name, the number of objects in the datastore, the size in bytes consumed, when the datastore was create/updated, and any description provided by the user. Our two datastores <em>ds_iris_data</em> and <em>ds_pydata</em> are present, with the latter containing the three objects we added</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_642254897","id":"20210125-170340_2068243762","dateCreated":"2021-01-10T21:11:58+0000","dateStarted":"2021-02-05T20:48:50+0000","dateFinished":"2021-02-05T20:48:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:55"},{"text":"%python\n\noml.ds.save(objs={'IRIS':IRIS},\nname=\"IRIS\", description = \"IRIS dataset\", overwrite=True)\n\noml.ds.dir()\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name  object_count  size                date      description\n0           IRIS             1   697 2021-02-05 20:48:51     IRIS dataset\n1      ds_pydata             3  2622 2021-02-05 20:48:41  python datasets\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1764215570","id":"20210125-170340_2063478718","dateCreated":"2021-01-10T21:16:42+0000","dateStarted":"2021-02-05T20:48:51+0000","dateFinished":"2021-02-05T20:48:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:56"},{"title":"Step 4: Save model objects in a datastore","text":"%md\n\nThis step illustrates how to store other types of objects in datastores. For this, you will create regression models using sklearn and OML4Py.\n\nThe following script builds two regression models - *regr1* and *regr2*. One model (regr1) uses the open source function LinearRegression() and regr2 uses the OML function ***oml.glm***.\n\nNote, this highlights that both open source models and in-database model proxy objects can be stored in a datastore. Like tables created using the ***oml.push*** function, default-named model proxy objects are dropped at the end of the database connection unless they are saved in a datastore.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>This step illustrates how to store other types of objects in datastores. For this, you will create regression models using sklearn and OML4Py.</p>\n<p>The following script builds two regression models - <em>regr1</em> and <em>regr2</em>. One model (regr1) uses the open source function LinearRegression() and regr2 uses the OML function <strong><em>oml.glm</em></strong>.</p>\n<p>Note, this highlights that both open source models and in-database model proxy objects can be stored in a datastore. Like tables created using the <strong><em>oml.push</em></strong> function, default-named model proxy objects are dropped at the end of the database connection unless they are saved in a datastore.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1575806995","id":"20210125-170340_1499142230","dateCreated":"2021-01-10T21:18:16+0000","dateStarted":"2021-02-05T20:48:52+0000","dateFinished":"2021-02-05T20:48:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:57"},{"text":"%python\n\nfrom sklearn import linear_model\n\nregr1 = linear_model.LinearRegression()\nregr1.fit(boston.data, boston.target)\n\nregr2 = oml.glm(\"regression\")\nX = BOSTON_TMP.drop('Value')\ny = BOSTON_TMP['Value']\nregr2 = regr2.fit(X, y)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1611594220183_-1903938551","id":"20210125-170340_100117770","dateCreated":"2021-01-10T21:19:50+0000","dateStarted":"2021-02-05T20:48:52+0000","dateFinished":"2021-02-05T20:48:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:58"},{"text":"%md\n\n.\nSave the objects *regr1* and *regr2* to the datastore named \"ds_pymodels\" and allow the read privilege to be granted to them.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:55+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Save the objects <em>regr1</em> and <em>regr2</em> to the datastore named &ldquo;ds_pymodels&rdquo; and allow the read privilege to be granted to them.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1175423963","id":"20210125-170340_1238677491","dateCreated":"2021-01-10T21:20:32+0000","dateStarted":"2021-02-05T20:48:55+0000","dateFinished":"2021-02-05T20:48:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:59"},{"text":"%python\n\noml.ds.save(objs={'regr1':regr1, 'regr2':regr2},\n            name=\"ds_pymodels\", grantable=True, \n            overwrite=True)\n\noml.ds.dir()\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:55+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name  object_count  size                date      description\n0           IRIS             1   697 2021-02-05 20:48:51     IRIS dataset\n1      ds_pydata             3  2622 2021-02-05 20:48:41  python datasets\n2    ds_pymodels             2  4065 2021-02-05 20:48:56             None\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-688251575","id":"20210125-170340_1113383592","dateCreated":"2021-01-10T21:21:04+0000","dateStarted":"2021-02-05T20:48:56+0000","dateFinished":"2021-02-05T20:48:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:60"},{"text":"%md\n.\nGrant the read privilege to all users by specifying *user=None*. Finally, list the datastores to which the read privilege has been granted.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:56+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Grant the read privilege to all users by specifying <em>user=None</em>. Finally, list the datastores to which the read privilege has been granted.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-11329792","id":"20210125-170340_1136974621","dateCreated":"2021-01-10T21:21:16+0000","dateStarted":"2021-02-05T20:48:56+0000","dateFinished":"2021-02-05T20:48:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:61"},{"text":"%python\n\noml.grant(name=\"ds_pymodels\", typ=\"datastore\", user=None)\n\noml.ds.dir(dstype=\"grant\")\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:48:56+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name grantee\n0    ds_pymodels  PUBLIC\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1094236171","id":"20210125-170340_2078519698","dateCreated":"2021-01-10T21:21:54+0000","dateStarted":"2021-02-05T20:48:57+0000","dateFinished":"2021-02-05T20:49:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:62"},{"title":"Step 5: Load datastore objects into memory","text":"%md\n\nLoad all Python objects from a datastore to the global workspace and sort the result by name. Notice that they have the name specified in the dictionary when saved.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:02+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Load all Python objects from a datastore to the global workspace and sort the result by name. Notice that they have the name specified in the dictionary when saved.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1958362037","id":"20210125-170340_392489522","dateCreated":"2021-01-10T21:22:09+0000","dateStarted":"2021-02-05T20:49:03+0000","dateFinished":"2021-02-05T20:49:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:63"},{"text":"%md\n.\nLoad the objects associated with the datastore named *ds_pydata* into memory\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Load the objects associated with the datastore named <em>ds_pydata</em> into memory</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_172917325","id":"20210125-170340_847774676","dateCreated":"2021-01-10T21:22:50+0000","dateStarted":"2021-02-05T20:49:03+0000","dateFinished":"2021-02-05T20:49:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:64"},{"text":"%python\n\nsorted(oml.ds.load(name=\"ds_pydata\"))\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['oml_boston', 'oml_diabetes', 'oml_iris']\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_119183017","id":"20210125-170340_1475426987","dateCreated":"2021-01-10T21:23:24+0000","dateStarted":"2021-02-05T20:49:04+0000","dateFinished":"2021-02-05T20:49:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:65"},{"text":"%md\n\n.\nLoad the Python object named *regr2* from the datastore *ds_pymodels* to theglobal workspace. Display the model details for model *regr2*. With the boolean *to_globals* parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument *to_globals* is *True*, then ***oml.ds.load*** function loads the objects into the global workspace. If the argument is *False*, then the function returns a dict object that contains pairs of object names and values.\n\nNote, *True* is the default value for *to_globals*, so it it not necessary to specify this argument explicitly.  \n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Load the Python object named <em>regr2</em> from the datastore <em>ds_pymodels</em> to theglobal workspace. Display the model details for model <em>regr2</em>. With the boolean <em>to_globals</em> parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument <em>to_globals</em> is <em>True</em>, then <strong><em>oml.ds.load</em></strong> function loads the objects into the global workspace. If the argument is <em>False</em>, then the function returns a dict object that contains pairs of object names and values.</p>\n<p>Note, <em>True</em> is the default value for <em>to_globals</em>, so it it not necessary to specify this argument explicitly.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_281265016","id":"20210125-170340_829976294","dateCreated":"2021-01-10T21:23:40+0000","dateStarted":"2021-02-05T20:49:09+0000","dateFinished":"2021-02-05T20:49:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:66"},{"text":"%python\n\noml.ds.load(name=\"ds_pymodels\", objs=[\"regr2\"], to_globals=True)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['regr2']\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1658149011","id":"20210125-170340_24979329","dateCreated":"2021-01-10T21:24:22+0000","dateStarted":"2021-02-05T20:49:10+0000","dateFinished":"2021-02-05T20:49:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:67"},{"text":"%python\n\nregr2","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:15+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nAlgorithm Name: Generalized Linear Model\n\nMining Function: REGRESSION\n\nTarget: Value\n\nSettings: \n                   setting name                  setting value\n0                     ALGO_NAME  ALGO_GENERALIZED_LINEAR_MODEL\n1               GLMS_CONF_LEVEL                            .95\n2           GLMS_FTR_GENERATION    GLMS_FTR_GENERATION_DISABLE\n3            GLMS_FTR_SELECTION     GLMS_FTR_SELECTION_DISABLE\n4                  ODMS_DETAILS                    ODMS_ENABLE\n5  ODMS_MISSING_VALUE_TREATMENT        ODMS_MISSING_VALUE_AUTO\n6                 ODMS_SAMPLING          ODMS_SAMPLING_DISABLE\n7                     PREP_AUTO                             ON\n\nComputed Settings: \n            setting name            setting value\n0    GLMS_CONV_TOLERANCE  .0000050000000000000004\n1    GLMS_NUM_ITERATIONS                       30\n2  GLMS_RIDGE_REGRESSION   GLMS_RIDGE_REG_DISABLE\n3            GLMS_SOLVER         GLMS_SOLVER_CHOL\n\nGlobal Statistics: \n             attribute name attribute value\n0         ADJUSTED_R_SQUARE         0.73379\n1                       AIC         1589.64\n2                 COEFF_VAR         21.0595\n3                 CONVERGED             YES\n4        CORRECTED_TOTAL_DF             505\n5          CORRECTED_TOT_SS         42716.3\n6            DEPENDENT_MEAN         22.5328\n7                  ERROR_DF             492\n8         ERROR_MEAN_SQUARE         22.5179\n9         ERROR_SUM_SQUARES         11078.8\n10                  F_VALUE         108.077\n11                    GMSEP         23.1597\n12               HOCKING_SP        0.045861\n13                      J_P         23.1409\n14                 MODEL_DF              13\n15          MODEL_F_P_VALUE               0\n16        MODEL_MEAN_SQUARE         2433.65\n17        MODEL_SUM_SQUARES         31637.5\n18               NUM_PARAMS              14\n19                 NUM_ROWS             506\n20          RANK_DEFICIENCY               0\n21             ROOT_MEAN_SQ          4.7453\n22                     R_SQ        0.740643\n23                     SBIC         1648.81\n24  VALID_COVARIANCE_MATRIX             YES\n\nAttributes: \nAGE\nB\nCHAS\nCRIM\nDIS\nINDUS\nLSTAT\nNOX\nPTRATIO\nRAD\nRM\nTAX\nZN\n\nPartition: NO\n\nCoefficients: \n\n           name level   estimate\n0   (Intercept)  None  36.459488\n1           AGE  None   0.000692\n2             B  None   0.009312\n3          CHAS  None   2.686734\n4          CRIM  None  -0.108011\n5           DIS  None  -1.475567\n6         INDUS  None   0.020559\n7         LSTAT  None  -0.524758\n8           NOX  None -17.766611\n9       PTRATIO  None  -0.952747\n10          RAD  None   0.306049\n11           RM  None   3.809865\n12          TAX  None  -0.012335\n13           ZN  None   0.046420\n\nFit Details: \n\n                       name         value\n0         ADJUSTED_R_SQUARE      0.733790\n1                       AIC   1589.642798\n2                 COEFF_VAR     21.059508\n3        CORRECTED_TOTAL_DF    505.000000\n4          CORRECTED_TOT_SS  42716.295415\n5            DEPENDENT_MEAN     22.532806\n6                  ERROR_DF    492.000000\n7         ERROR_MEAN_SQUARE     22.517855\n8         ERROR_SUM_SQUARES  11078.784578\n9                   F_VALUE    108.076666\n10                    GMSEP     23.159731\n11               HOCKING_SP      0.045861\n12                      J_P     23.140878\n13          MODEL_CONVERGED      1.000000\n14                 MODEL_DF     13.000000\n15          MODEL_F_P_VALUE      0.000000\n16        MODEL_MEAN_SQUARE   2433.654680\n17        MODEL_SUM_SQUARES  31637.510837\n18               NUM_PARAMS     14.000000\n19                 NUM_ROWS    506.000000\n20          RANK_DEFICIENCY      0.000000\n21             ROOT_MEAN_SQ      4.745298\n22                     R_SQ      0.740643\n23                     SBIC   1648.814312\n24  VALID_COVARIANCE_MATRIX      1.000000\n\nRank: \n\n14\n\nDeviance: \n\n11078.784578\n\nAIC: \n\n1590\n\nNull Deviance: \n\n42716.295415\n\nDF Residual: \n\n492.0\n\nDF Null: \n\n505.0\n\nConverged: \n\nTrue\n\n\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1848638402","id":"20210125-170340_1931023065","dateCreated":"2021-01-16T19:05:32+0000","dateStarted":"2021-02-05T20:49:15+0000","dateFinished":"2021-02-05T20:49:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:68"},{"text":"%md\n\n.\nRun the following command to load the named Python object (regression model) *regr1*, from the datastore to the user's workspace.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:16+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Run the following command to load the named Python object (regression model) <em>regr1</em>, from the datastore to the user's workspace.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1356997968","id":"20210125-170340_761481843","dateCreated":"2021-01-10T21:24:46+0000","dateStarted":"2021-02-05T20:49:16+0000","dateFinished":"2021-02-05T20:49:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:69"},{"text":"%python\n\noml.ds.load(name=\"ds_pymodels\", objs=[\"regr1\"], to_globals=False)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:16+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"{'regr1': LinearRegression()}\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_600014729","id":"20210125-170340_1604193895","dateCreated":"2021-01-10T21:25:29+0000","dateStarted":"2021-02-05T20:49:17+0000","dateFinished":"2021-02-05T20:49:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:70"},{"title":"Step 6: View datastores and other details","text":"%md\n\nList the datastores to which other users have been granted the read privilege. Notice that this is shared with PUBLIC, so other users have access to this datastore as well.\n\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>List the datastores to which other users have been granted the read privilege. Notice that this is shared with PUBLIC, so other users have access to this datastore as well.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-134946584","id":"20210125-170340_926378810","dateCreated":"2021-01-10T21:26:16+0000","dateStarted":"2021-02-05T20:49:20+0000","dateFinished":"2021-02-05T20:49:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:71"},{"text":"%python\n\noml.ds.dir(dstype=\"all\")[['owner', 'datastore_name', 'object_count']]\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"        owner datastore_name  object_count\n0   OMLUSER03           IRIS             1\n1   OMLUSER03      ds_pydata             3\n2   OMLUSER03    ds_pymodels             2\n3   OMLUSER07    ds_pymodels             2\n4  OMLUSER108    ds_pymodels             2\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1825500788","id":"20210125-170340_209922271","dateCreated":"2021-01-10T21:42:48+0000","dateStarted":"2021-02-05T20:49:21+0000","dateFinished":"2021-02-05T20:49:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:72"},{"text":"%md\n\n.\nList the datastores to which other users have been granted the read privilege.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />List the datastores to which other users have been granted the read privilege.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-948311261","id":"20210125-170340_990174190","dateCreated":"2021-01-10T21:43:05+0000","dateStarted":"2021-02-05T20:49:23+0000","dateFinished":"2021-02-05T20:49:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:73"},{"text":"%python\n\noml.ds.dir(dstype=\"grant\")\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:23+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name grantee\n0    ds_pymodels  PUBLIC\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_2018042649","id":"20210125-170340_340133855","dateCreated":"2021-01-10T21:43:33+0000","dateStarted":"2021-02-05T20:49:24+0000","dateFinished":"2021-02-05T20:49:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:74"},{"title":"Step 7: View contents of a datastore","text":"%md\n\nThis step shows how to view and describe the content of a datastore. This example highlights the *ds_pydata* datastore.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:26+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>This step shows how to view and describe the content of a datastore. This example highlights the <em>ds_pydata</em> datastore.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1111856987","id":"20210125-170340_405061846","dateCreated":"2021-01-10T21:43:47+0000","dateStarted":"2021-02-05T20:49:27+0000","dateFinished":"2021-02-05T20:49:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:75"},{"text":"%md\n\n.\nList the content of datastore *ds_pydata*. The script returns the description of three proxy objects - *iris*, *oml_boston*, and *oml_diabetes*. It lists the class, \nsize, length, row and column count for each object. Notice that the two proxy objects and one Pandas DataFrame are listed.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />List the content of datastore <em>ds_pydata</em>. The script returns the description of three proxy objects - <em>iris</em>, <em>oml_boston</em>, and <em>oml_diabetes</em>. It lists the class,\n<br  />size, length, row and column count for each object. Notice that the two proxy objects and one Pandas DataFrame are listed.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-207599023","id":"20210125-170340_225756893","dateCreated":"2021-01-10T21:46:30+0000","dateStarted":"2021-02-05T20:49:27+0000","dateFinished":"2021-02-05T20:49:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:76"},{"text":"%python\n\noml.ds.describe(name='ds_pydata')\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"    object_name          class  size  length  row_count  col_count\n0    oml_boston  oml.DataFrame  1018     506        506         14\n1  oml_diabetes  oml.DataFrame   908     442        442         11\n2      oml_iris  oml.DataFrame   696     150        150          5\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1090724880","id":"20210125-170340_280147766","dateCreated":"2021-01-10T21:47:49+0000","dateStarted":"2021-02-05T20:49:28+0000","dateFinished":"2021-02-05T20:49:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:77"},{"title":"Step 8: Manage datastore privileges","text":"%md\n\nThis section shows how to revoke read privilege, show datastores to which read privilege has been granted, and again grant read privilege to a user.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>This section shows how to revoke read privilege, show datastores to which read privilege has been granted, and again grant read privilege to a user.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-822344818","id":"20210125-170340_879636992","dateCreated":"2021-01-10T21:48:14+0000","dateStarted":"2021-02-05T20:49:30+0000","dateFinished":"2021-02-05T20:49:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:78"},{"text":"%md\n\n.\nRevoke the read privilege from every user by specifying *user=None* on the datastore *ds_pymodels*. The result is empty. Notice that the type is *datastore*. In the next lab we'll see that this same function can be used for scripts in the script repository. \n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Revoke the read privilege from every user by specifying <em>user=None</em> on the datastore <em>ds_pymodels</em>. The result is empty. Notice that the type is <em>datastore</em>. In the next lab we'll see that this same function can be used for scripts in the script repository.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-338692743","id":"20210125-170340_183662123","dateCreated":"2021-01-10T21:55:44+0000","dateStarted":"2021-02-05T20:49:30+0000","dateFinished":"2021-02-05T20:49:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:79"},{"text":"%python\n\noml.revoke(name=\"ds_pymodels\", typ=\"datastore\", user=None)\n\noml.ds.dir(dstype=\"grant\")\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:31+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Empty DataFrame\nColumns: [datastore_name, grantee]\nIndex: []\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_476364716","id":"20210125-170340_555424646","dateCreated":"2021-01-10T21:56:44+0000","dateStarted":"2021-02-05T20:49:31+0000","dateFinished":"2021-02-05T20:49:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:80"},{"text":"%md\n\n.\nGrant the read privilege to *OMLUSER*.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:31+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />Grant the read privilege to <em>OMLUSER</em>.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1399227982","id":"20210125-170340_613745556","dateCreated":"2021-01-10T21:57:00+0000","dateStarted":"2021-02-05T20:49:32+0000","dateFinished":"2021-02-05T20:49:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:81"},{"text":"%python\n\noml.grant(name=\"ds_pymodels\", typ=\"datastore\", user=\"OMLUSER\")\n\noml.ds.dir(dstype=\"grant\")\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:32+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name  grantee\n0    ds_pymodels  OMLUSER\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-90897758","id":"20210125-170340_1638845236","dateCreated":"2021-01-10T21:58:23+0000","dateStarted":"2021-02-05T20:49:32+0000","dateFinished":"2021-02-05T20:49:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:82"},{"title":"Step 9: Delete datastore contents","text":"%md\n\nThis step shows how to use the ***oml.ds.delete function*** to delete datastores or datastore contents.","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>This step shows how to use the <strong><em>oml.ds.delete function</em></strong> to delete datastores or datastore contents.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-877544286","id":"20210125-170340_2020915716","dateCreated":"2021-01-10T21:58:40+0000","dateStarted":"2021-02-05T20:49:33+0000","dateFinished":"2021-02-05T20:49:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:83"},{"text":"%md\n\n.\nFirst, delete the contents of datastore *ds_pydata*, then delete the datastore itself. Next, use regular expression pattern matching to delete the datastore *ds_pymodels*.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>.\n<br  />First, delete the contents of datastore <em>ds_pydata</em>, then delete the datastore itself. Next, use regular expression pattern matching to delete the datastore <em>ds_pymodels</em>.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1200697280","id":"20210125-170340_30038439","dateCreated":"2021-01-10T22:04:02+0000","dateStarted":"2021-02-05T20:49:33+0000","dateFinished":"2021-02-05T20:49:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:84"},{"text":"%python\n\noml.ds.delete(name=\"ds_pydata\", objs=[\"IRIS\", \"oml_boston\"])\n\noml.ds.delete(name=\"ds_pydata\")\n\noml.ds.delete(name=\"_pymodels\", regex_match=True)\n\noml.ds.dir()\n\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name  object_count  size                date   description\n0           IRIS             1   697 2021-02-05 20:48:51  IRIS dataset\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1339992209","id":"20210125-170340_231699369","dateCreated":"2021-01-10T22:04:31+0000","dateStarted":"2021-02-05T20:49:34+0000","dateFinished":"2021-02-05T20:49:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:85"},{"title":"Try it yourself","text":"%md\n\nDelete the *IRIS* table from datastore *IRIS*, then delete the entire datastore.","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Delete the <em>IRIS</em> table from datastore <em>IRIS</em>, then delete the entire datastore.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_-1914951019","id":"20210125-170340_447741519","dateCreated":"2021-01-21T01:01:48+0000","dateStarted":"2021-02-05T20:49:39+0000","dateFinished":"2021-02-05T20:49:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:86"},{"text":"%python\n\n# Insert code here\n\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1611594220183_222105699","id":"20210125-170340_1205257092","dateCreated":"2021-01-21T01:02:59+0000","dateStarted":"2021-02-05T20:49:39+0000","dateFinished":"2021-02-05T20:49:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:87"},{"text":"%md\n\n# End of Script\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>End of Script</h1>\n"}]},"interrupted":false,"jobName":"paragraph_1611594220183_1860628418","id":"20210125-170340_344112568","dateCreated":"2021-01-17T04:21:30+0000","dateStarted":"2021-02-05T20:49:40+0000","dateFinished":"2021-02-05T20:49:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:88"},{"text":"%md\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:49:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"interrupted":false,"jobName":"paragraph_1611594220183_496094319","id":"20210125-170340_1646708410","dateCreated":"2021-01-17T04:39:22+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:89"}],"name":"Lab 4: OML4Py Datastore","id":"32096","noteParams":{},"noteForms":{},"angularObjects":{"ORA96849F3DDA:shared_process":[],"ORA7A60DC9B32:shared_process":[],"ORA7CC90ACC73:shared_process":[],"MDW381939C745:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}