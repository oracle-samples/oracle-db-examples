{"paragraphs":[{"text":"%md\n\n# Oracle Machine Learning for Python (OML4Py)\n\n***Oracle Machine Learning for Python*** (OML4Py) makes the open source Python scripting language and environment ready for the enterprise and big data. Designed for problems involving both large and small data volumes, OML4Py integrates Python with Oracle Autonomous Database, allowing users to run Python commands and scripts for statistical, machine learning, and visualization analyses on database tables and views using Python syntax. Many familiar Python functions are overloaded that translate Python behavior into SQL for running in-database, as well as new automatic machine learning capabilities.\n\nThis example shows you how to:\n\n* Set OML notebook bindings and interpreters\n* Enable the Python interpreter to run Python commands\n* Import the OML4Py **oml** package and verify the database connection\n\nCopyright (c) 2021 Oracle Corporation                             \n###### [The Universal Permissive License (UPL), Version 1.0](https://oss.oracle.com/licenses/upl/)","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Oracle Machine Learning for Python (OML4Py)</h1>\n<p><strong><em>Oracle Machine Learning for Python</em></strong> (OML4Py) makes the open source Python scripting language and environment ready for the enterprise and big data. Designed for problems involving both large and small data volumes, OML4Py integrates Python with Oracle Autonomous Database, allowing users to run Python commands and scripts for statistical, machine learning, and visualization analyses on database tables and views using Python syntax. Many familiar Python functions are overloaded that translate Python behavior into SQL for running in-database, as well as new automatic machine learning capabilities.</p>\n<p>This example shows you how to:</p>\n<ul>\n<li>Set OML notebook bindings and interpreters</li>\n<li>Enable the Python interpreter to run Python commands</li>\n<li>Import the OML4Py <strong>oml</strong> package and verify the database connection</li>\n</ul>\n<p>Copyright (c) 2021 Oracle Corporation</p>\n<h6><a href=\"https://oss.oracle.com/licenses/upl/\">The Universal Permissive License (UPL), Version 1.0</a></h6>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_1250562782","id":"20210125-170339_804682799","dateCreated":"2021-01-08T18:21:43+0000","dateStarted":"2021-02-05T20:35:34+0000","dateFinished":"2021-02-05T20:35:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"focus":true,"$$hashKey":"object:40"},{"title":"Zeppelin notebook toolbar","text":"%md\nThe notebook toolbar contains buttons for running code in paragraphs and for setting configuration and display options. \n\nFor example, it displays the current status and the number of users connected to the notebook. It also contains a menu item for keyboard shortcuts and options to show or hide the markdown editor and paragraph output. Additional settings are shown here.","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:34+0000","config":{"colWidth":4,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The notebook toolbar contains buttons for running code in paragraphs and for setting configuration and display options.</p>\n<p>For example, it displays the current status and the number of users connected to the notebook. It also contains a menu item for keyboard shortcuts and options to show or hide the markdown editor and paragraph output. Additional settings are shown here.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_-823691855","id":"20210125-170339_711433015","dateCreated":"2021-01-19T22:17:44+0000","dateStarted":"2021-02-05T20:35:34+0000","dateFinished":"2021-02-05T20:35:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:41"},{"text":"%md\n\n<dl><img src=\"http://www.oracle.com/a/tech/img/otn-batch1/oml-notebook-tool.jpg\" alt=\"OML Notebook Tool\" width=\"800\"/></dl>","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:34+0000","config":{"colWidth":8,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<dl><img src=\"http://www.oracle.com/a/tech/img/otn-batch1/oml-notebook-tool.jpg\" alt=\"OML Notebook Tool\" width=\"800\"/></dl>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_-902205764","id":"20210125-170339_1808412327","dateCreated":"2021-01-19T22:14:59+0000","dateStarted":"2021-02-05T20:35:35+0000","dateFinished":"2021-02-05T20:35:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:42"},{"title":"OML notebook bindings","text":"%md\n\nOracle Machine Learning notebooks contain an internal list of bindings to fetch data from the database or another data source, such as Oracle Cloud Object Storage. For this lab, we set the interpreter binding to connect to the ADW database and run queries. \n\nClick the interpreter bindings icon in the upper right-corner of the Noteook to view the available interpreter bindings.\n\n<dl><img src=\"https://www.oracle.com/a/tech/img/otn-batch1/oml-notebook-bindings.png\" alt=\"OML Notebook Bindings\" width=\"800\"/></dl>\n\nThe default service is *low*. Click to bind or unbind an interpreter. Drag-and-drop individual interpreter binding settings up or down to order which binding will be used by default. The first interpeter on the list becomes the default. Those highlighted in blue are active.\n\n\nFor more information on Autonomous Database service levels, refer to the Autonomous Databse User's Guide.\n\n###### [Autonomous Database User's Guide](https://docs.oracle.com/en/cloud/paas/autonomous-database/adbsa/manage-priorities.html#GUID-19175472-D200-445F-897A-F39801B0E953)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:35+0000","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Oracle Machine Learning notebooks contain an internal list of bindings to fetch data from the database or another data source, such as Oracle Cloud Object Storage. For this lab, we set the interpreter binding to connect to the ADW database and run queries.</p>\n<p>Click the interpreter bindings icon in the upper right-corner of the Noteook to view the available interpreter bindings.</p>\n<dl><img src=\"https://www.oracle.com/a/tech/img/otn-batch1/oml-notebook-bindings.png\" alt=\"OML Notebook Bindings\" width=\"800\"/></dl>\n<p>The default service is <em>low</em>. Click to bind or unbind an interpreter. Drag-and-drop individual interpreter binding settings up or down to order which binding will be used by default. The first interpeter on the list becomes the default. Those highlighted in blue are active.</p>\n<p>For more information on Autonomous Database service levels, refer to the Autonomous Databse User's Guide.</p>\n<h6><a href=\"https://docs.oracle.com/en/cloud/paas/autonomous-database/adbsa/manage-priorities.html#GUID-19175472-D200-445F-897A-F39801B0E953\">Autonomous Database User's Guide</a></h6>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_1314447289","id":"20210125-170339_1501354314","dateCreated":"2021-01-08T18:03:16+0000","dateStarted":"2021-02-05T20:35:35+0000","dateFinished":"2021-02-05T20:35:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:43"},{"title":"OML notebook interpreters","text":"%md\n\nAn interpreter is a plug-in that allows you to use a specific data processing\nlanguage in your Oracle Machine Learning notebook. You can add multiple paragraphs, and each paragraph can be connected to different interpreters such as SQL or Python. \n\nWe create different paragraphs with different interpreters based on the code we want to run in the paragraphs. The interpreter is set at the top of the paragraph.\n\nThe available interpreters are:\n\n* **%sql** - To call the SQL interpreter and run SQL statements\n* **%script** - To call and run PL/SQL scripts\n* **%md** - To call the Markdown interpreter and generate static html from Markdown plain text\n* **%python** - To call the Python interpreter and run Python scripts\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:35+0000","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>An interpreter is a plug-in that allows you to use a specific data processing\n<br  />language in your Oracle Machine Learning notebook. You can add multiple paragraphs, and each paragraph can be connected to different interpreters such as SQL or Python.</p>\n<p>We create different paragraphs with different interpreters based on the code we want to run in the paragraphs. The interpreter is set at the top of the paragraph.</p>\n<p>The available interpreters are:</p>\n<ul>\n<li><strong>%sql</strong> - To call the SQL interpreter and run SQL statements</li>\n<li><strong>%script</strong> - To call and run PL/SQL scripts</li>\n<li><strong>%md</strong> - To call the Markdown interpreter and generate static html from Markdown plain text</li>\n<li><strong>%python</strong> - To call the Python interpreter and run Python scripts</li>\n</ul>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_693401225","id":"20210125-170339_1173864782","dateCreated":"2021-01-08T19:27:31+0000","dateStarted":"2021-02-05T20:35:36+0000","dateFinished":"2021-02-05T20:35:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:44"},{"title":"Try it yourself","text":"%md\nUse the Markdown interpreter:\n\nPaste the Markdown code below into the following **%md** paragraph. Then click on the arrow to run the code. Note that it displays the formatted text, and adds a new paragraph. Notebooks save automatically, there is no need to click a save button.\n\n\n\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:36+0000","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Use the Markdown interpreter:</p>\n<p>Paste the Markdown code below into the following <strong>%md</strong> paragraph. Then click on the arrow to run the code. Note that it displays the formatted text, and adds a new paragraph. Notebooks save automatically, there is no need to click a save button.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_1329918445","id":"20210125-170339_1407141092","dateCreated":"2021-01-12T05:25:21+0000","dateStarted":"2021-02-05T20:35:36+0000","dateFinished":"2021-02-05T20:35:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:45"},{"text":"#### Oracle Machine Learning for Python Live Lab\nWelcome to the **OML4Py** Live Lab!\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:37+0000","config":{"colWidth":6,"fontSize":9,"enabled":false,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/osql","editorHide":false},"settings":{"params":{},"forms":{}},"interrupted":false,"jobName":"paragraph_1611594219658_-824398990","id":"20210125-170339_1767565102","dateCreated":"2021-01-12T20:47:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:46"},{"text":"%md\n\n\n\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:37+0000","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":false},"settings":{"params":{},"forms":{}},"interrupted":false,"jobName":"paragraph_1611594219658_-889946946","id":"20210125-170339_1448334790","dateCreated":"2021-01-12T05:26:52+0000","dateStarted":"2021-01-12T20:50:04+0000","dateFinished":"2021-01-12T20:50:04+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:47"},{"title":"Enable Python interpreter","text":"%md\n\nTo connect to the Python interpreter, we use **%python** at the top of a new paragraph in the notebook.\n\nRun a simple addition command in Python and select the arrow to run the paragraph. Alternatively, you can press the **Shift+Enter** keys to run commands in the notebook.","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To connect to the Python interpreter, we use <strong>%python</strong> at the top of a new paragraph in the notebook.</p>\n<p>Run a simple addition command in Python and select the arrow to run the paragraph. Alternatively, you can press the <strong>Shift+Enter</strong> keys to run commands in the notebook.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_-1112594032","id":"20210125-170339_768967667","dateCreated":"2021-01-08T18:40:36+0000","dateStarted":"2021-02-05T20:35:37+0000","dateFinished":"2021-02-05T20:35:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:48"},{"text":"%python\n\n1+1\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:37+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"2\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_-673203002","id":"20210125-170339_75762377","dateCreated":"2021-01-08T19:48:29+0000","dateStarted":"2021-02-05T20:35:38+0000","dateFinished":"2021-02-05T20:35:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:49"},{"title":"Import the oml package","text":"%md\n\nTo use OML4Py, import the **oml** package. This automatically establishes a connection to the Autonomous database.\n\nThe notebook connects to the Python interpreter, and you are ready to run Python and OML4Py commands in your notebook.\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To use OML4Py, import the <strong>oml</strong> package. This automatically establishes a connection to the Autonomous database.</p>\n<p>The notebook connects to the Python interpreter, and you are ready to run Python and OML4Py commands in your notebook.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_2125658335","id":"20210125-170339_978976480","dateCreated":"2021-01-08T19:48:40+0000","dateStarted":"2021-02-05T20:35:38+0000","dateFinished":"2021-02-05T20:35:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:50"},{"text":"%python\n\nimport oml","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:39+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/undefined","fontSize":9,"results":{},"editorSetting":{"language":"text","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1611594219658_-1377868160","id":"20210125-170339_1928130952","dateCreated":"2021-01-08T17:49:03+0000","dateStarted":"2021-02-05T20:35:39+0000","dateFinished":"2021-02-05T20:35:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:51"},{"title":"Verify Autonomous Database connection","text":"%md\n\n\nRun the ***oml.isconnected()*** command to verify if the oml module is connected to the Autonomous Database. Once your notebook is connected, the command returns *True*. \n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Run the <strong><em>oml.isconnected()</em></strong> command to verify if the oml module is connected to the Autonomous Database. Once your notebook is connected, the command returns <em>True</em>.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_1865015923","id":"20210125-170339_1931951677","dateCreated":"2021-01-08T18:05:44+0000","dateStarted":"2021-02-05T20:35:40+0000","dateFinished":"2021-02-05T20:35:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:52"},{"text":"%python\n\noml.isconnected()\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"True\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_-1061656716","id":"20210125-170339_1473360082","dateCreated":"2021-01-08T17:55:44+0000","dateStarted":"2021-02-05T20:35:40+0000","dateFinished":"2021-02-05T20:35:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:53"},{"title":"View help files","text":"%md\n\nThe Python ***help*** function is used to display the documentation of packages, modules, functions, classes, and keywords. The help function has the following syntax:\n\n    help([object])\n\nFor example, the ***oml.create*** function creates persistent table in your database schema from data in your Python session.  To view the help file for ***oml.create***, do the following:","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The Python <strong><em>help</em></strong> function is used to display the documentation of packages, modules, functions, classes, and keywords. The help function has the following syntax:</p>\n<pre><code>help([object])\n</code></pre>\n<p>For example, the <strong><em>oml.create</em></strong> function creates persistent table in your database schema from data in your Python session.  To view the help file for <strong><em>oml.create</em></strong>, do the following:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_469021300","id":"20210125-170339_571144758","dateCreated":"2021-01-12T23:07:51+0000","dateStarted":"2021-02-05T20:35:41+0000","dateFinished":"2021-02-05T20:35:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:54"},{"text":"%python\n\nhelp(oml.create)\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:41+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Help on cython_function_or_method in module oml.core.methods:\n\ncreate(x, table, oranumber=True, dbtypes=None, append=False)\n    Creates a table in Oracle Database from a Python data set.\n    \n    Parameters\n    ----------\n    x : pandas.DataFrame or a list of tuples of equal size\n      If ``x`` is a list of tuples of equal size, each tuple represents\n      a row in the table. The column names are set to COL1, COL2, ... and so on.\n    table : str\n      A name for the table.\n    oranumber : bool, True (default)\n      If True, use SQL NUMBER for numeric columns. Otherwise, use BINARY_DOUBLE.\n      Ignored if ``append`` is True.\n    dbtypes : dict mapping str to str or list of str\n      A list of SQL types to use on the new table. If a list, its length should\n      be equal to the number of columns. If a dict, the keys are the names of the\n      columns. Ignored if ``append`` is True.\n    append : bool, False (default)\n      Indicates whether to append the data to the existing table.\n    \n    Notes\n    -----\n     * When creating a new table, for columns whose SQL types are not specified in\n       ``dbtypes``, NUMBER is used for numeric columns when ``oranumber`` is True\n       and BINARY_DOUBLE is used when ``oranumber`` is False. Users should set\n       ``oranumber`` to False when the data contains NaN values. For string columns,\n       the default type is VARCHAR2(4000), and for bytes columns, the default type\n       is BLOB.\n     * When ``x`` is specified with an empty pandas.DataFrame, OML creates an\n       empty table. NUMBER is used for numeric columns when ``oranumber`` is True\n       and BINARY_DOUBLE is used when ``oranumber`` is False. VARCHAR2(4000) is\n       used for columns of object dtype in the pandas.DataFrame.\n     * OML does not support columns containing values of multiple data types,\n       data conversion is needed or a TypeError may be raised.\n     * OML determines default column types by looking at 20 random rows sampled\n       from the table. For tables with less than 20 rows, all rows are used\n       in column type determination. NaN values are considered as float type.\n       If a column has all Nones, or has inconsistent data types that are not\n       None in the sampled rows, a default column type cannot be determined,\n       and a ValueError is raised unless a SQL type for the column is specified\n       in ``dbtypes``.\n    \n    Returns\n    -------\n    new_table : oml.DataFrame\n      A proxy object that represents the newly-created table.\n\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_-117335030","id":"20210125-170339_939474766","dateCreated":"2021-01-12T23:11:03+0000","dateStarted":"2021-02-05T20:35:41+0000","dateFinished":"2021-02-05T20:35:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:55"},{"title":"View help for the oml package","text":"%python\n\nhelp(oml)","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:41+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/undefined","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Help on package oml:\n\nNAME\n    oml - Oracle Machine Learning for Python\n\nDESCRIPTION\n    A component of the Oracle Advanced Analytics Option, Oracle Machine Learning\n    for Python makes the open source Python programming language and environment\n    ready for enterprise in-database data. Designed for problems involving both\n    large and small volumes of data, Oracle Machine Learning for Python integrates\n    Python with Oracle Database. Python users can run Python commands and scripts\n    for statistical, machine learning, and graphical analyses on data stored in\n    Oracle Database. Python users can develop, refine, and deploy Python scripts\n    that leverage the parallelism and scalability of Oracle Database to automate\n    data analysis. Data analysts and data scientists can run Python modules and\n    develop and operationalize Python scripts for machine learning applications\n    in one step without having to learn SQL. Oracle Machine Learning for Python\n    performs function pushdown for in-database execution of core Python and\n    popular Python module functions. Being integrated with Oracle Database,\n    Oracle Machine Learning for Python can run any Python module via embedded\n    Python while the database manages the data served to the Python engines.\n\nPACKAGE CONTENTS\n    algo (package)\n    automl (package)\n    core (package)\n    ds (package)\n    embed (package)\n    graphics (package)\n    mlx (package)\n    script (package)\n\nCLASSES\n    oml.algo.model.odmModel(builtins.object)\n        oml.algo.ai.ai\n        oml.algo.ar.ar\n        oml.algo.dt.dt\n        oml.algo.em.em\n        oml.algo.esa.esa\n        oml.algo.glm.glm\n        oml.algo.km.km\n        oml.algo.nb.nb\n        oml.algo.nn.nn\n        oml.algo.rf.rf\n        oml.algo.svd.svd\n        oml.algo.svm.svm\n    oml.core.number._Number(oml.core.series._Series)\n        oml.core.float.Float\n    oml.core.series._Series(oml.core.vector._Vector)\n        oml.core.boolean.Boolean\n        oml.core.bytes.Bytes\n        oml.core.string.String\n    oml.core.vector._Vector(builtins.object)\n        oml.core.frame.DataFrame\n    \n    class Boolean(oml.core.series._Series)\n     |  Boolean series data class.\n     |  \n     |  Represents a single column of 0, 1, and NULL values in Oracle Database.\n     |  \n     |  Method resolution order:\n     |      Boolean\n     |      oml.core.series._Series\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __and__(self, other)\n     |  \n     |  __init__(self)\n     |  \n     |  __invert__(self)\n     |  \n     |  __or__(self, other)\n     |  \n     |  all(self)\n     |      Checks whether all elements in the Boolean series data object are True.\n     |      \n     |      Returns\n     |      =======\n     |      all: bool\n     |  \n     |  any(self)\n     |      Checks whether any elements in the Boolean series data object are True.\n     |      \n     |      Returns\n     |      -------\n     |      any: bool\n     |  \n     |  pull(self)\n     |      Pulls data represented by this object from Oracle Database into an\n     |      in-memory Python object.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : list of bool and None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.series._Series:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into k consecutive folds \n     |      for use with k-fold cross validation.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of pairs of series objects of the same type as caller\n     |        Each pair within the list is a fold. The first element of the pair is the\n     |        train set, and the second element is the test set, which consists of all\n     |        elements not in the train set.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  __eq__(self, other)\n     |      Equivalent to ``self == other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      equal : oml.Boolean\n     |  \n     |  __ge__(self, other)\n     |      Equivalent to ``self >= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterequal : oml.Boolean\n     |  \n     |  __gt__(self, other)\n     |      Equivalent to ``self > other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterthan : oml.Boolean\n     |  \n     |  __le__(self, other)\n     |      Equivalent to ``self <= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessequal : oml.Boolean\n     |  \n     |  __lt__(self, other)\n     |      Equivalent to ``self < other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessthan : oml.Boolean\n     |  \n     |  __ne__(self, other)\n     |      Equivalent to ``self != other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      notequal : oml.Boolean\n     |  \n     |  count(self)\n     |      Returns the number of elements that are not NULL.\n     |      \n     |      Returns\n     |      -------\n     |      nobs : int\n     |  \n     |  describe(self)\n     |      Generates descriptive statistics that summarize the central tendency, \n     |      dispersion, and shape of an OML series data distribution.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.Series`\n     |        Includes ``count`` (number of non-null entries), ``unique``\n     |        (number of unique entries), ``top`` (most common value), ``freq``,\n     |        (frequency of the most common value).\n     |  \n     |  drop_duplicates(self)\n     |      Removes duplicated elements.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : type of caller\n     |  \n     |  dropna(self)\n     |      Removes missing values.\n     |      \n     |      Missing values include None and/or nan if applicable.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : type of caller\n     |  \n     |  isnull(self)\n     |      Detects the missing value None.\n     |      \n     |      Returns\n     |      -------\n     |      isnull : oml.Boolean\n     |        Indicates missing value None for each element.\n     |  \n     |  max(self, skipna=True)\n     |      Returns the maximum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      max : Python type corresponding to the column or numpy.nan\n     |  \n     |  min(self, skipna=True)\n     |      Returns the minimum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      min : Python type corresponding to the column or numpy.nan\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns the number of unique values.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : int\n     |  \n     |  sort_values(self, ascending=True, na_position='last')\n     |      Sorts the values in the series data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      ascending : bool, True (default)\n     |        If True, sorts in ascending order. Otherwise, sorts in descending order.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them\n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : type of caller\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into multiple sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) (default)\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of series objects of the same type as caller\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from oml.core.series._Series:\n     |  \n     |  __hash__ = None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean\n     |        Must be from the same data source as self.\n     |      \n     |      Returns\n     |      -------\n     |      subset : same type as self\n     |        Contains only the rows satisfying the condition in ``key``.\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class Bytes(oml.core.series._Series)\n     |  Bytes(other, dbtype)\n     |  \n     |  Binary series data class.\n     |  \n     |  Represents a single column of RAW or BLOB data in Oracle Database.\n     |  \n     |  Method resolution order:\n     |      Bytes\n     |      oml.core.series._Series\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, other, dbtype)\n     |      Convert underlying Oracle Database type.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.Bytes\n     |      dbtype : 'raw' or 'blob'\n     |  \n     |  len(self)\n     |      Computes the length of each byte string.\n     |      \n     |      Returns\n     |      -------\n     |      length : oml.Float\n     |  \n     |  pull(self)\n     |      Pulls data represented by this object from Oracle Database into an\n     |      in-memory Python object.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : list of bytes and None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.series._Series:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into k consecutive folds \n     |      for use with k-fold cross validation.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of pairs of series objects of the same type as caller\n     |        Each pair within the list is a fold. The first element of the pair is the\n     |        train set, and the second element is the test set, which consists of all\n     |        elements not in the train set.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  __eq__(self, other)\n     |      Equivalent to ``self == other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      equal : oml.Boolean\n     |  \n     |  __ge__(self, other)\n     |      Equivalent to ``self >= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterequal : oml.Boolean\n     |  \n     |  __gt__(self, other)\n     |      Equivalent to ``self > other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterthan : oml.Boolean\n     |  \n     |  __le__(self, other)\n     |      Equivalent to ``self <= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessequal : oml.Boolean\n     |  \n     |  __lt__(self, other)\n     |      Equivalent to ``self < other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessthan : oml.Boolean\n     |  \n     |  __ne__(self, other)\n     |      Equivalent to ``self != other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      notequal : oml.Boolean\n     |  \n     |  count(self)\n     |      Returns the number of elements that are not NULL.\n     |      \n     |      Returns\n     |      -------\n     |      nobs : int\n     |  \n     |  describe(self)\n     |      Generates descriptive statistics that summarize the central tendency, \n     |      dispersion, and shape of an OML series data distribution.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.Series`\n     |        Includes ``count`` (number of non-null entries), ``unique``\n     |        (number of unique entries), ``top`` (most common value), ``freq``,\n     |        (frequency of the most common value).\n     |  \n     |  drop_duplicates(self)\n     |      Removes duplicated elements.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : type of caller\n     |  \n     |  dropna(self)\n     |      Removes missing values.\n     |      \n     |      Missing values include None and/or nan if applicable.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : type of caller\n     |  \n     |  isnull(self)\n     |      Detects the missing value None.\n     |      \n     |      Returns\n     |      -------\n     |      isnull : oml.Boolean\n     |        Indicates missing value None for each element.\n     |  \n     |  max(self, skipna=True)\n     |      Returns the maximum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      max : Python type corresponding to the column or numpy.nan\n     |  \n     |  min(self, skipna=True)\n     |      Returns the minimum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      min : Python type corresponding to the column or numpy.nan\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns the number of unique values.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : int\n     |  \n     |  sort_values(self, ascending=True, na_position='last')\n     |      Sorts the values in the series data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      ascending : bool, True (default)\n     |        If True, sorts in ascending order. Otherwise, sorts in descending order.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them\n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : type of caller\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into multiple sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) (default)\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of series objects of the same type as caller\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from oml.core.series._Series:\n     |  \n     |  __hash__ = None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean\n     |        Must be from the same data source as self.\n     |      \n     |      Returns\n     |      -------\n     |      subset : same type as self\n     |        Contains only the rows satisfying the condition in ``key``.\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class DataFrame(oml.core.vector._Vector)\n     |  DataFrame(other)\n     |  \n     |  Tabular dataframe class.\n     |  \n     |  Represents multiple columns of Boolean, Bytes, Float, and/or String data.\n     |  \n     |  Method resolution order:\n     |      DataFrame\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, strata_cols=None, use_hash=True, hash_cols=None, nvl=None)\n     |      Splits the oml.DataFrame object randomly into k consecutive folds.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      strata_cols : a list of string values or None (default)\n     |        Names of the columns used for stratification. If None, stratification\n     |        is not performed. Must be None when ``use_hash`` is False.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      hash_cols : a list of string values or None (default)\n     |        If a list of string values, use the values from these named columns\n     |        to hash to split the data. If None, use the values from the 1st 10\n     |        columns to hash.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of k 2-tuples of oml.DataFrame objects\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``hash_cols`` refers to a single LOB column.\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean, str, list of str, 2-tuple\n     |        * oml.Boolean : select only the rows satisfying the condition. Must be from the same data\n     |          source as self.\n     |        * str : select the column of the same name\n     |        * list of str : select the columns whose names matches the elements in the list.\n     |        * 2-tuple : The first element in the tuple denotes which rows to select.\n     |          It can be either a oml.Boolean or ``slice(None)`` (this selects all\n     |          rows). The second element in the tuple denotes which columns to select.\n     |          It can be either ``slice(None)`` (this selects all columns), str, list\n     |          of str, int, or list of int. If int or list of int, selects the\n     |          column(s) in the corresponding position(s).\n     |      \n     |      Returns\n     |      -------\n     |      subset : OML data object\n     |        Is a oml.DataFrame if has more than one column, otherwise is a OML series data object.\n     |  \n     |  __init__(self, other)\n     |      Convert OML series data object(s) to oml.DataFrame.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object or dict mapping str to OML series data objects\n     |        * OML series data object : initializes a single-column oml.DataFrame containing the\n     |          same data. \n     |        * dict : initializes a oml.DataFrame that comprises all the OML series data objects\n     |          in the dict in an arbitrary order. Each column in the resulting oml.DataFrame has as\n     |          its column name its corresponding key in the dict.\n     |  \n     |  corr(self, method='pearson', min_periods=1, skipna=True)\n     |      Computes pairwise correlation between all columns where possible,\n     |      given the type of coefficient.\n     |      \n     |      Parameters\n     |      ----------\n     |      method : 'pearson' (default), 'kendall', or 'spearman'\n     |        * pearson : Uses Pearson's correlation coefficient. Can only calculate\n     |          correlations between Float or Boolean columns.\n     |        * kendall : Uses Kendall's tau-b coefficient.\n     |        * spearman : Uses Spearman's rho coefficient.\n     |      min_periods : int, optional, 1 (default)\n     |        The minimum number of observations required per pair of columns to \n     |        have a valid result.\n     |      skipna : bool, True (default)\n     |        If True, NaN and (+/-)Inf values are mapped to NULL.\n     |      \n     |      Returns\n     |      -------\n     |      y : :py:class:`pandas.DataFrame`\n     |  \n     |  count(self, numeric_only=False)\n     |      Returns the number of elements that are not NULL for each column.\n     |      \n     |      Parameters\n     |      ----------\n     |      numeric_only : boolean, False (default)\n     |        Includes only Float and Boolean columns.\n     |      \n     |      Returns\n     |      -------\n     |      count : :py:class:`pandas.Series`\n     |  \n     |  crosstab(self, index, columns=None, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name='All', dropna=True, normalize=False, pivot=False)\n     |      Computes a simple cross-tabulation of two or more columns. By default,\n     |      computes a frequency table for the columns unless a column and\n     |      an aggregation function have been passed.\n     |      \n     |      Parameters\n     |      ----------\n     |      index : str or list of str\n     |        Names of the column(s) of the DataFrame to group by. If ``pivot`` is\n     |        True, these columns are displayed in the rows of the result table.\n     |      columns : str or list of str, optional\n     |        Names of the other column(s) of the Dataframe to group by. If ``pivot``\n     |        is True, these columns are displayed in the columns of the result\n     |        table.\n     |      values : str, optional\n     |        The name of the column to aggregate according to the grouped columns.\n     |        Requires ``aggfunc`` to be specified.\n     |      aggfunc : OML DataFrame aggregation function object, optional\n     |        The supported oml.DataFrame aggregation functions include: count, \n     |        max, mean, median, min, nunique, std and sum. To use ``aggfunc``, \n     |        specify the function object using its full name, for example, \n     |        ``oml.DataFrame.sum``, ``oml.DataFrame.nunique``, and so on.\n     |        If specified, requires ``values`` to also be specified.\n     |      rownames : str or list of str, None (default)\n     |        If specified, must match number of names in ``index``. If None, names in\n     |        ``index`` are used. \n     |      colnames : str or list of str, None (default)\n     |        If specified, must match number of strings in ``columns``. If None,\n     |        names in ``columns`` are used. Ignored if ``pivot`` is True.\n     |      margins : bool, False (default)\n     |        Includes row and column margins (subtotals)\n     |      margins_name : str, 'All' (default)\n     |        Names of the row and column that contain the totals when ``margins``\n     |        is True. Should be a value not contained in any of the columns specified\n     |        by ``index`` and ``columns``. \n     |      dropna : bool, True (default)\n     |        In addition, if ``pivot`` is True, drops columns from the result\n     |        table if all the entries of the column are NaN.\n     |      normalize : boolean, {'all', 'index', 'columns'} or {0, 1}, False (default)\n     |        Normalizes by dividing the values by their sum.\n     |      \n     |        * If 'all' or True, normalizes over all values.\n     |        * If 'index' or 0, normalizes over each row.\n     |        * If 'columns' or 1, normalizes over each column.\n     |        * If ``margins`` is True, also normalizes margin values.\n     |      pivot : bool, False (default)\n     |        If True, returns results in pivot table format. Else, returns results in\n     |        relational table format.\n     |      \n     |      Returns\n     |      -------\n     |      crosstab : oml.DataFrame\n     |      \n     |      See Also\n     |      --------\n     |      DataFrame.pivot_table\n     |  \n     |  cumsum(self, by, ascending=True, na_position='last', skipna=True)\n     |      Gets the cumulative sum of each ``Float`` or ``Boolean`` column after the\n     |      ``DataFrame`` object is sorted.\n     |      \n     |      Parameters\n     |      ----------\n     |      by : str or list of str\n     |        A single column name or list of column names by which to sort the \n     |        DataFrame object. Columns in ``by`` do not have to be ``Float`` or \n     |        ``Boolean``.\n     |      ascending : bool or list of bool, True (default)\n     |        If True, sort is in ascending order, otherwise descending. Specify \n     |        list for multiple sort orders. If this is a list of bools, must match\n     |        the length of ``by``.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NaN and None at the beginning, ``last`` places them \n     |        at the end.\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      cumsum : oml.DataFrame\n     |  \n     |  describe(self, percentiles=None, include=None, exclude=None)\n     |      Generates descriptive statistics that summarize the central tendency,\n     |      dispersion, and shape of the data in each column\n     |      \n     |      Parameters\n     |      ----------\n     |      percentiles : bool, list-like of numbers, or None (default), optional \n     |        The percentiles to include in the output for `Float` columns. All\n     |        must be between 0 and 1. If ``percentiles`` is None or True,\n     |        ``percentiles`` is set to ``[.25, .5, .75]``, which corresponds\n     |        to the 25th, 50th, and 75th percentiles. If `percentiles` is False,\n     |        only ``min`` and ``max`` stats and no other percentiles is\n     |        included.\n     |      include : 'all', list-like of OML column types or None (default), optional\n     |        Types of columns to include in the result. Available options:\n     |      \n     |        - 'all': Includes all columns.\n     |        - List of OML column types : Only includes specified types in\n     |          the results.\n     |        - None (default) : If ``Float`` columns exist and ``exclude`` is\n     |          None, only includes ``Float`` columns. Otherwise, includes all\n     |          columns.\n     |      exclude : list of OML column types or None (default), optional\n     |        Types of columns to exclude from the result. Available options:\n     |      \n     |        - List of OML column types : Excludes specified types from\n     |          the results.\n     |        - None (default) : Result excludes nothing.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.DataFrame`\n     |         The concatenation of the summary statistics for each column.\n     |      \n     |      See Also\n     |      --------\n     |      DataFrame.count\n     |      DataFrame.max\n     |      DataFrame.min\n     |      DataFrame.mean\n     |      DataFrame.std\n     |      DataFrame.select_types\n     |  \n     |  drop(self, columns)\n     |      Drops specified columns.\n     |      \n     |      Parameters\n     |      ----------\n     |      columns : str or list of str\n     |        Columns to drop from the object.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : oml.DataFrame\n     |  \n     |  drop_duplicates(self, subset=None)\n     |      Removes duplicated rows from oml.DataFrame object.\n     |      \n     |      Use ``subset`` to consider a set of rows duplicates if they have\n     |      identical values for only a subset of the columns. In this case, after\n     |      deduplication, each of the other columns contains the minimum value\n     |      found across the set.\n     |      \n     |      Parameters\n     |      ----------\n     |      subset : str or list of str, optional\n     |        Columns to consider for identifying duplicates. If None, use all\n     |        columns.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : oml.DataFrame\n     |  \n     |  dropna(self, how='any', thresh=None, subset=None)\n     |      Removes rows containing missing values.\n     |      \n     |      Parameters\n     |      ----------\n     |      how : {'any', 'all'}, 'any' (default)\n     |        Determines if row is removed from DataFrame when at least one or all\n     |        values are missing.\n     |      thresh : int, optional\n     |        Requires that many of missing values to drop a row from DataFrame.\n     |      subset : list, optional\n     |        The names of the columns to check for missing values.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : oml.DataFrame\n     |        DataFrame without missing values.\n     |  \n     |  kurtosis(self, skipna=True)\n     |      Returns the sample kurtosis of the values for each ``Float``\n     |      column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      kurt : :py:class:`pandas.Series`\n     |  \n     |  max(self, skipna=True, numeric_only=False)\n     |      Returns the maximum value in each column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      numeric_only : boolean, False (default)\n     |        Includes only ``Float`` and ``Boolean`` columns. \n     |      \n     |      Returns\n     |      -------\n     |      max : :py:class:`pandas.Series`\n     |  \n     |  mean(self, skipna=True)\n     |      Returns the mean of the values for each ``Float`` or ``Boolean`` column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      mean : :py:class:`pandas.Series`\n     |  \n     |  median(self, skipna=True)\n     |      Returns the median of the values for each ``Float`` column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Exclude NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      median : :py:class:`pandas.Series`\n     |  \n     |  merge(self, other, on=None, left_on=None, right_on=None, how='left', suffixes=('_l', '_r'), nvl=True)\n     |      Joins data sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data set object\n     |      on : str or list of str, optional\n     |        Column names to join on. Must be found in both ``self`` and ``other``.\n     |      left_on : str or list of str, optional\n     |        Column names of ``self`` to join on.\n     |      right_on : str or list of str, optional\n     |        Column names of ``other`` to join on. If specified, must specify the same\n     |        number of columns as ``left_on``.\n     |      how : 'left' (default), 'right', 'inner', 'full'\n     |        * left : left outer join\n     |        * right : right outer join\n     |        * full : full outer join\n     |        * inner : inner join\n     |      \n     |        If ``on`` and ``left_on`` are both None, then ``how`` is ignored,\n     |        and a cross join is performed.\n     |      suffixes : sequence of length 2\n     |        Suffix to apply to column names on the left and right side,\n     |        respectively.\n     |      nvl : True (default), False, dict \n     |        * True : join condition includes NULL value\n     |        * False : join condition excludes NULL value\n     |        * dict : specifies the values that join columns use in replacement of NULL value with column names as keys\n     |      \n     |      Returns\n     |      -------\n     |      merged : oml.DataFrame\n     |  \n     |  min(self, skipna=True, numeric_only=False)\n     |      Returns the minimum value in each column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      numeric_only : boolean, False (default)\n     |        Includes only ``Float`` and ``Boolean`` columns\n     |      \n     |      Returns\n     |      -------\n     |      min : :py:class:`pandas.Series`\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns number of unique values for each column of DataFrame.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : pandas.Series\n     |  \n     |  pivot_table(self, index, columns=None, values=None, aggfunc=<cyfunction DataFrame.mean at 0x7f2187fe3b80>, margins=False, dropna=True, margins_name='All')\n     |      Converts data set to a spreadsheet-style pivot table. Due to the Oracle\n     |      1000 column limit, pivot tables with more than 1000 columns are\n     |      automatically truncated to display the categories with the most entries\n     |      for each value column.\n     |      \n     |      Parameters\n     |      ----------\n     |      index : str or list of str\n     |        Names of columns containing the keys to group by on the pivot table\n     |        index.\n     |      columns : str or list of str, optional\n     |        Names of columns containing the keys to group by on the pivot table\n     |        columns. \n     |      values : str or list of str, optional\n     |        Names of columns to aggregate on. If None, values are inferred \n     |        as all columns not in ``index`` or ``columns``.\n     |      aggfunc : OML DataFrame aggregation function or a list of them, oml.DataFrame.mean (default)\n     |        The supported oml.DataFrame aggregation functions include: count, max,\n     |        mean, median, min, nunique, std and sum. When using aggregation\n     |        functions, specify the function object using its full name, for example,\n     |        ``oml.DataFrame.sum``, ``oml.DataFrame.nunique``, and so on.\n     |        If ``aggfunc`` contains more than one function, each function is \n     |        applied to each column in ``values``. If the function does not apply to\n     |        the type of a column in ``values``, the result table skips applying \n     |        the function to the particular column. \n     |      margins : bool, False (default)\n     |        Include row and column margins (subtotals)\n     |      dropna : bool, True (default)\n     |        Unless ``columns`` is None, drop column labels from the result table if\n     |        all the entries corresponding to the column label are NaN for all\n     |        aggregations.\n     |      margins_name : string, 'All' (default)\n     |        Names of the row and column that contain the totals when ``margins``\n     |        is True. Should be a value not contained in any of the columns specified\n     |        by ``index`` and ``columns``. \n     |      \n     |      Returns\n     |      -------\n     |      pivoted : oml.DataFrame\n     |      \n     |      See Also\n     |      --------\n     |      DataFrame.crosstab\n     |  \n     |  pull(self, aslist=False)\n     |      Pulls data represented by the DataFrame from Oracle Database\n     |      into an in-memory Python object.\n     |      \n     |      Parameters\n     |      ----------\n     |      aslist : bool\n     |        If False, returns a pandas.DataFrame. Otherwise, returns the data\n     |        as a list of tuples.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : :py:class:`pandas.DataFrame` or list of tuples\n     |  \n     |  rename(self, columns)\n     |      Renames columns.\n     |      \n     |      Parameters\n     |      ----------\n     |      columns : dict or list\n     |        ``dict`` contains old and new column names.\n     |        ``list`` contains the new names for all the columns in order.\n     |      \n     |      Notes\n     |      -----\n     |      The method changes the column names of the caller DataFrame object too.\n     |      \n     |      Returns\n     |      -------\n     |      renamed : DataFrame\n     |  \n     |  replace(self, old, new, default=None, columns=None)\n     |      Replace values given in `old` with `new` in specified columns.\n     |      \n     |      Parameters\n     |      ----------\n     |      columns : list of str or None (default)\n     |        Columns to look for values in `old`. If None, then all columns\n     |        of DataFrame will be replaced.\n     |      old : list of float, or list of str\n     |        Specifying the old values. When specified with a list of float, it \n     |        can contain float('nan') and None. When specified with a list of str, it\n     |        can contain None.\n     |      new : list of float, or list of str\n     |        A list of the same length as argument `old` specifying \n     |        the new values. When specified with a list of float, it\n     |        can contain float('nan') and None. When specified with a list of str, it\n     |        can contain None.\n     |      default : float, str, or None (default)\n     |        A single value to use for the non-matched elements in argument\n     |        `old`. If None, non-matched elements will preserve their\n     |        original values. If not None, data type should be consistent\n     |        with values in `new`. Must be set when `old` and `new` contain \n     |        values of different data types.\n     |      \n     |      Returns\n     |      -------\n     |      replaced : oml.DataFrame\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * if values in `old` have data types inconsistent with original values\n     |          in the target columns\n     |        * if `default` is specifed with a non-None value which has data type\n     |          inconsistent with values in `new`\n     |        * if `default` is None when `old` and `new` contain values of different \n     |          data types\n     |  \n     |  round(self, decimals=0)\n     |      Rounds oml.Float values in the oml.DataFrame object to \n     |      the specified decimal place.\n     |      \n     |      Parameters\n     |      ----------\n     |      decimals : non-negative int\n     |      \n     |      Returns\n     |      -------\n     |      rounded: oml.DataFrame\n     |  \n     |  sample(self, frac=None, n=None, random_state=None)\n     |      Return a random sample data sets from an oml.DataFrame object.\n     |      \n     |      Parameters\n     |      ----------\n     |      frac : a float value\n     |        Fraction of data sets to return. The value should be between 0 and 1.\n     |        Cannot be used with n.\n     |      n : an integer value\n     |        Number of rows to return. Default = 1 if frac = None.\n     |        Cannot be used with frac. \n     |      random_state : int or 12345 (default)\n     |        The seed to use for random sampling.\n     |      \n     |      Returns\n     |      -------\n     |      sample_data : an oml.DataFrame objects\n     |        It contains the random sample rows from an oml.DataFrame object.\n     |        The fraction of returned data sets is specified by the frac parameter.\n     |  \n     |  select_types(self, include=None, exclude=None)\n     |      Returns the subset of columns include/excluding columns based on their OML\n     |      type.\n     |      \n     |      Parameters\n     |      ----------\n     |      include, exclude : list of OML column types\n     |        A selection of OML column types to be included/excluded. At least one of\n     |        these parameters must be supplied. \n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If both of ``include`` and ``exclude`` are None.\n     |        * If ``include`` and ``exclude`` have overlapping elements.\n     |      \n     |      Returns\n     |      -------\n     |      subset : oml.DataFrame\n     |  \n     |  skew(self, skipna=True)\n     |      Returns the sample skewness of the values for each ``Float``\n     |      column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      skew : :py:class:`pandas.Series`\n     |  \n     |  sort_values(self, by, ascending=True, na_position='last')\n     |      Specifies the order in which rows appear in the result set.\n     |      \n     |      Parameters\n     |      ----------\n     |      by : str or list of str\n     |        Column names or list of column names.\n     |      ascending : bool or list of bool, True (default)\n     |        If True, sort is in ascending order. Sort is in descending order\n     |        otherwise. Specify list for multiple sort orders. If this is a list of\n     |        bools, must match the length of ``by``.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them \n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : oml.DataFrame\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, strata_cols=None, use_hash=True, hash_cols=None, nvl=None)\n     |      Splits the oml.DataFrame object randomly into multiple data sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) default\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      strata_cols: a list of string values or None (default):\n     |        Names of the columns used for stratification. If None, stratification\n     |        is not performed. Must be None when use_hash is False.\n     |      use_hash: boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use random\n     |        number to split the data.\n     |      hash_cols: a list of string values or None (default):\n     |        If a list of string values, use the values from these named columns\n     |        to hash to split the data. If None, use the values from the 1st 10\n     |        columns to hash.\n     |      nvl: numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of oml.DataFrame objects\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``hash_cols`` refers to a single LOB column.\n     |  \n     |  std(self, skipna=True)\n     |      Returns the sample standard deviation of the values of each ``Float`` or\n     |      ``Boolean`` column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      std : :py:class:`pandas.Series`\n     |  \n     |  sum(self, skipna=True)\n     |      Returns the sum of the values of each ``Float`` or ``Boolean`` column.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Exclude NaN values when computing the result\n     |      \n     |      Returns\n     |      -------\n     |      sum : :py:class:`pandas.Series`\n     |  \n     |  t_dot(self, other=None, skipna=True, pull_from_db=True)\n     |      Calculates the matrix cross-product of self with other.\n     |      \n     |      Equivalent to transposing self first, then multiplying it with other. \n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.DataFrame, optional\n     |        If not specified, self is used.\n     |      skipna : bool, True (default)\n     |        Treats NaN entries as 0.\n     |      pull_from_db : bool, True (default)\n     |        If True, returns a pandas.DataFrame. If False, returns a\n     |        oml.DataFrame consisting of three columns:\n     |      \n     |        - ROWID: the row number of the resulting matrix \n     |        - COLID: the column number of the resulting matrix \n     |        - VALUE: the value at the corresponding position of the matrix \n     |      \n     |      Returns\n     |      -------\n     |      prod : float, :py:class:`pandas.Series`, or :py:class:`pandas.DataFrame`\n     |      \n     |      See Also\n     |      --------\n     |      oml.Float.dot\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties defined here:\n     |  \n     |  columns\n     |      The column names of the data set.\n     |  \n     |  dtypes\n     |      The types of the columns of the data set.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class Float(oml.core.number._Number)\n     |  Float(other, dbtype=None)\n     |  \n     |  Numeric series data class.\n     |  \n     |  Represents a single column of NUMBER, BINARY_DOUBLE or BINARY_FLOAT data \n     |  in Oracle Database.\n     |  \n     |  Method resolution order:\n     |      Float\n     |      oml.core.number._Number\n     |      oml.core.series._Series\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __abs__(self)\n     |      Return the absolute value of every element in ``self``.\n     |      \n     |      Equivalent to ``abs(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      absval : oml.Float\n     |  \n     |  __add__(self, other)\n     |      Equivalent to ``self + other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, float, or oml.Float\n     |        * scalar : add the scalar to each element in ``self``. \n     |        * oml.Float : must come from the same data source. Add corresponding\n     |          elements in ``self`` and ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      sum : oml.Float\n     |  \n     |  __contains__(self, item)\n     |      Check whether all elements in ``item`` exists in the Float series\n     |      \n     |      Equivalent to ``item in self``.\n     |      \n     |      Parameters\n     |      ----------\n     |      item : int/float, list of int/float, oml.Float\n     |        Values to check in series\n     |      \n     |      Returns\n     |      -------\n     |      contains : bool\n     |        Returns `True` if all elements exists, otherwise `False`\n     |  \n     |  __divmod__(self, other)\n     |      Equivalent to ``divmod(self, other)``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, float, or oml.Float\n     |        * scalar : Find the quotient and remainder when each element in ``self`` is\n     |          divided by the scalar.\n     |        * oml.Float : must come from the same data source. Find the quotient and\n     |          remainder when each element in ``self`` is divided by the corresponding element\n     |          in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      divrem : oml.DataFrame\n     |        The first column contains the floor of the quotient, and the second column\n     |        contains the remainder.\n     |  \n     |  __floordiv__(self, other)\n     |      Equivalent to ``self // other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, float, or oml.Float\n     |        * scalar : divide each element in ``self`` by the scalar. \n     |        * oml.Float : must come from the same data source. Divide each element in\n     |          ``self`` by the corresponding element in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      quotient : oml.Float\n     |  \n     |  __init__(self, other, dbtype=None)\n     |      Convert to oml.Float, or convert underlying Oracle Database type.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.Boolean or oml.Float\n     |        * oml.Boolean : initialize a oml.Float object that has value 1 (resp. 0)\n     |          wherever ``other`` has value True (resp. False).\n     |        * oml.Float : initialize a oml.Float object with the same data as \n     |          ``other``, except the underlying Oracle Database type has been converted\n     |          to the one specified by ``dbtype``. \n     |      dbtype : 'number' or 'binary_double'\n     |        Ignored if ``other`` is type ``oml.Boolean``. Must be specified if ``other``\n     |        is type ``oml.Float``.\n     |  \n     |  __matmul__(self, other)\n     |      Equivalent to ``self @ other`` and ``self.dot(other)``.\n     |      \n     |      Returns the inner product with an oml.Float. Matrix multiplication with a\n     |      oml.DataFrame.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.Float or oml.DataFrame\n     |      \n     |      Returns\n     |      -------\n     |      matprod : oml.Float\n     |      \n     |      See Also\n     |      --------\n     |      Float.dot\n     |  \n     |  __mod__(self, other)\n     |      Equivalent to ``self % other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, float, or oml.Float\n     |        * scalar : Find the remainder when each element in ``self`` is divided by the\n     |          scalar.\n     |        * oml.Float : must come from the same data source. Find the remainder when each\n     |          element in ``self`` is divided by the corresponding element in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      remainder : oml.Float\n     |  \n     |  __mul__(self, other)\n     |      Equivalent to ``self * other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, float, or oml.Float\n     |        * scalar : multiply the scalar with each element in ``self``. \n     |        * oml.Float : must come from the same data source. Multiply corresponding\n     |          elements in ``self`` and ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      product : oml.Float\n     |  \n     |  __neg__(self)\n     |      Return the negation of every element in ``self``. Equivalent to ``-self``.\n     |      \n     |      Returns\n     |      -------\n     |      negation : oml.Float\n     |  \n     |  __pow__(self, other)\n     |      Equivalent to ``self ** other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, float, or oml.Float\n     |        * scalar : Raise each element in ``self`` to the power of the scalar. \n     |        * oml.Float : must come from the same data source. Raise each element in \n     |          ``self`` to the power of the corresponding element in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      power : oml.Float\n     |  \n     |  __sub__(self, other)\n     |      Equivalent to ``self - other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, float, or oml.Float\n     |        * scalar : subtract the scalar from each element in ``self``. \n     |        * oml.Float : must come from the same data source. From each element in\n     |          ``self``, subtract the corresponding element in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      difference : oml.Float\n     |  \n     |  __truediv__(self, other)\n     |      Equivalent to ``self / other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : int, float, or oml.Float\n     |        * scalar : divide each element in ``self`` by the scalar. \n     |        * oml.Float : must come from the same data source. Divide each element in\n     |          ``self`` by the corresponding element in ``other``.\n     |      \n     |      Returns\n     |      -------\n     |      quotient : oml.Float\n     |  \n     |  ceil(self)\n     |      Returns the ceiling of each element in the Float series data object.\n     |      \n     |      Returns\n     |      -------\n     |      ceil : oml.Float\n     |  \n     |  cut(self, bins, right=True, labels=None, retbins=False, precision=3, include_lowest=False)\n     |      Returns the indices of half-open bins to which each value belongs.\n     |      \n     |      Parameters\n     |      ----------\n     |      bins : int or strictly monotonically increasing sequence of float/int\n     |        If int, defines number of equal-width bins in the range of this column.\n     |        In this case, to include the min and max value, the range is extended by\n     |        .1% on each side where the bin does not include the endpoint.\n     |        If a sequence, defines bin edges allowing for non-uniform bin-widths. In \n     |        this case, the range of x is not extended.\n     |      right : bool, True (default)\n     |        Indicates whether the bins include the rightmost edge or the leftmost\n     |        edge.\n     |      labels : sequence of unique str, int, or float values, False, or None (default)\n     |        If a sequence, must be the same length as the resulting number of bins\n     |        and must have values of same type. If False, bins are sequentially\n     |        labeled with integers. If None, bins are labeled with the intervals\n     |        they correspond to.\n     |      retbins : bool, False (default)\n     |        Indicates whether to return the bin edges or not.  \n     |      precision : int, 3 (default)\n     |        When ``labels`` is None, determines the precision of the bin labels.\n     |      include_lowest : bool, False (default) \n     |        Indicates whether the first interval should be left-inclusive.\n     |      \n     |      Returns\n     |      -------\n     |      out : oml.Float or oml.String\n     |        If labels are ints or floats, return oml.Float.\n     |        If labels are str, return oml.String.\n     |      bins : :py:class:`numpy.ndarray` of floats\n     |        Returned only if ``retbins`` is True.\n     |  \n     |  describe(self, percentiles=None)\n     |      Generates descriptive statistics that summarize the central tendency, \n     |      dispersion, and shape of the OML series data distribution.\n     |      \n     |      Parameters\n     |      ----------\n     |      percentiles : list-like of numbers, optional \n     |        The percentiles to include in the output. All must be between 0 and 1.\n     |        The default is [.25, .5, .75], which corresponds to the inclusion of \n     |        the 25th, 50th, and 75th percentiles.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.Series`\n     |         Includes ``count`` (number of non-null entries), ``mean``, ``std``,\n     |         ``min``, ``max``, and the specified ``percentiles``. The 50th\n     |         percentile is always included.\n     |  \n     |  dot(self, other=None, skipna=True)\n     |      Returns the inner product with an oml.Float. Matrix multiplication with a\n     |      oml.DataFrame.\n     |      \n     |      Can be called using self @ other.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.Float or oml.DataFrame, optional\n     |        If not specified, self is used.\n     |      skipna : bool, True (default)\n     |        Treats NaN entries as 0.\n     |      \n     |      Returns\n     |      -------\n     |      dot_product : :py:class:`pandas.Series` or float\n     |  \n     |  exp(self)\n     |      Returns element-wise e to the power of values in the Float series data object.\n     |      \n     |      Returns\n     |      -------\n     |      exp : oml.Float\n     |  \n     |  floor(self)\n     |      Returns the floor of each element in the Float series data object.\n     |      \n     |      Returns\n     |      -------\n     |      floor : oml.Float\n     |  \n     |  isinf(self)\n     |      Detects infinite values element-wise in the Float series data object.\n     |      \n     |      Returns\n     |      -------\n     |      isinf : oml.Boolean\n     |  \n     |  isnan(self)\n     |      Detects a NaN (not a number) element from Float object.\n     |      \n     |      Returns\n     |      -------\n     |      isnull : oml.Boolean\n     |        Indicates NaN for each element.\n     |  \n     |  log(self, base=None)\n     |      Returns element-wise logarithm, to the given ``base``, of values\n     |      in the Float series data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      base : int, float, optional\n     |        The base of the logarithm, by default natural logarithm\n     |      \n     |      Returns\n     |      -------\n     |      log : oml.Float\n     |  \n     |  replace(self, old, new, default=None)\n     |      Replace values given in `old` with `new`.\n     |      \n     |      Parameters\n     |      ----------\n     |      old : list of float, or list of str\n     |        Specifying the old values. When specified with a list of float, it\n     |        can contain float('nan') and None. When specified with a list of str, it\n     |        can contain None.\n     |      new : list of float, or list of str\n     |        A list of the same length as argument `old` specifying\n     |        the new values. When specified with a list of float, it\n     |        can contain float('nan') and None. When specified with a list of str, it\n     |        can contain None.\n     |      default : float, str, or None (default)\n     |        A single value to use for the non-matched elements in argument\n     |        `old`. If None, non-matched elements will preserve their\n     |        original values. If not None, data type should be consistent\n     |        with values in `new`. Must be set when `old` and `new` contain\n     |        values of different data types.\n     |      \n     |      Returns\n     |      -------\n     |      replaced : oml.Float\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * if values in `old` have data types inconsistent with original values\n     |        * if `default` is specifed with a non-None value which has data type \n     |          inconsistent with values in `new`\n     |        * if `default` is None when `old` and `new` contain values of different\n     |          data types\n     |  \n     |  round(self, decimals=0)\n     |      Rounds oml.Float values to the specified decimal place.\n     |      \n     |      Parameters\n     |      ----------\n     |      decimals : non-negative int\n     |      \n     |      Returns\n     |      -------\n     |      rounded : oml.Float\n     |  \n     |  sqrt(self)\n     |      Returns the square root of each element in the Float series data object.\n     |      \n     |      Returns\n     |      -------\n     |      sqrt : oml.Float\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.number._Number:\n     |  \n     |  cumsum(self, ascending=True, na_position='last', skipna=True)\n     |      Gets the cumulative sum after the OML series data object is sorted.\n     |      \n     |      Parameters\n     |      ----------\n     |      ascending : bool, True (default)\n     |        Sorts ascending, otherwise descending.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NaN and None at the beginning, ``last`` places them \n     |        at the end.\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      cumsum : oml.Float\n     |  \n     |  kurtosis(self, skipna=True)\n     |      Returns the sample kurtosis of the values.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      kurt : float or nan\n     |  \n     |  mean(self, skipna=True)\n     |      Returns the mean of the values.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      mean : float or numpy.nan\n     |  \n     |  median(self, skipna=True)\n     |      Returns the median of the values.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      median : float or numpy.nan\n     |  \n     |  skew(self, skipna=True)\n     |      Returns the sample skewness of the values.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      skew : float or nan\n     |  \n     |  std(self, skipna=True)\n     |      Returns the sample standard deviation of the values.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      std : float or numpy.nan\n     |  \n     |  sum(self, skipna=True)\n     |      Returns the sum of the values.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      sum : float or numpy.nan\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.series._Series:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into k consecutive folds \n     |      for use with k-fold cross validation.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of pairs of series objects of the same type as caller\n     |        Each pair within the list is a fold. The first element of the pair is the\n     |        train set, and the second element is the test set, which consists of all\n     |        elements not in the train set.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  __eq__(self, other)\n     |      Equivalent to ``self == other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      equal : oml.Boolean\n     |  \n     |  __ge__(self, other)\n     |      Equivalent to ``self >= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterequal : oml.Boolean\n     |  \n     |  __gt__(self, other)\n     |      Equivalent to ``self > other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterthan : oml.Boolean\n     |  \n     |  __le__(self, other)\n     |      Equivalent to ``self <= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessequal : oml.Boolean\n     |  \n     |  __lt__(self, other)\n     |      Equivalent to ``self < other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessthan : oml.Boolean\n     |  \n     |  __ne__(self, other)\n     |      Equivalent to ``self != other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      notequal : oml.Boolean\n     |  \n     |  count(self)\n     |      Returns the number of elements that are not NULL.\n     |      \n     |      Returns\n     |      -------\n     |      nobs : int\n     |  \n     |  drop_duplicates(self)\n     |      Removes duplicated elements.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : type of caller\n     |  \n     |  dropna(self)\n     |      Removes missing values.\n     |      \n     |      Missing values include None and/or nan if applicable.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : type of caller\n     |  \n     |  isnull(self)\n     |      Detects the missing value None.\n     |      \n     |      Returns\n     |      -------\n     |      isnull : oml.Boolean\n     |        Indicates missing value None for each element.\n     |  \n     |  max(self, skipna=True)\n     |      Returns the maximum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      max : Python type corresponding to the column or numpy.nan\n     |  \n     |  min(self, skipna=True)\n     |      Returns the minimum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      min : Python type corresponding to the column or numpy.nan\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns the number of unique values.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : int\n     |  \n     |  pull(self)\n     |      Pulls data represented by the series data object from Oracle Database\n     |      into an in-memory Python object.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : list\n     |  \n     |  sort_values(self, ascending=True, na_position='last')\n     |      Sorts the values in the series data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      ascending : bool, True (default)\n     |        If True, sorts in ascending order. Otherwise, sorts in descending order.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them\n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : type of caller\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into multiple sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) (default)\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of series objects of the same type as caller\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from oml.core.series._Series:\n     |  \n     |  __hash__ = None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean\n     |        Must be from the same data source as self.\n     |      \n     |      Returns\n     |      -------\n     |      subset : same type as self\n     |        Contains only the rows satisfying the condition in ``key``.\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class String(oml.core.series._Series)\n     |  String(other, dbtype)\n     |  \n     |  Character series data class.\n     |  \n     |  Represents a single column of VARCHAR2, CHAR, or CLOB data in Oracle Database.\n     |  \n     |  Method resolution order:\n     |      String\n     |      oml.core.series._Series\n     |      oml.core.vector._Vector\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __contains__(self, item)\n     |      Check whether all elements in ``item`` exists in the String series\n     |      \n     |      Equivalent to ``item in self``.\n     |      \n     |      Parameters\n     |      ----------\n     |      item : str, list of str, oml.String\n     |        Values to check in series\n     |      \n     |      Returns\n     |      -------\n     |      contains : bool\n     |        Returns ``True`` if all elements exist, otherwise ``False``.\n     |  \n     |  __init__(self, other, dbtype)\n     |      Convert underlying Oracle Database type.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : oml.String\n     |      dbtype : 'varchar2' or 'clob'\n     |  \n     |  count_pattern(self, pat, flags=0)\n     |      Counts the number of occurrences of the pattern in each string. \n     |      \n     |      Parameters\n     |      ----------\n     |      pat : str that is a valid regular expression conforming to the POSIX standard\n     |      flags : int, 0 (default, no flags)\n     |        The following :py:mod:`python:re` module flags are supported:\n     |      \n     |        - :py:data:`python:re.I`/:py:data:`python:re.IGNORECASE` : Performs case-insensitive matching.\n     |        - :py:data:`python:re.M`/:py:data:`python:re.MULTILINE` : Treats the source string as multiple lines.\n     |          Interprets the caret (^) and dollar sign ($) as the start and end,\n     |          respectively, of any line anywhere in source string. Without this flag,\n     |          the caret and dollar sign match only the start and end, respectively, of\n     |          the source string.\n     |        - :py:data:`python:re.S`/:py:data:`python:re.DOTALL` : Allows the period (.) to match all characters,\n     |          including the newline character. Without this flag, the period matches all\n     |          characters except the newline character.\n     |      \n     |        Multiple flags can be specifed by bitwise OR-ing them.\n     |      \n     |      Returns\n     |      -------\n     |      counts : oml.Float\n     |  \n     |  find(self, sub, start=0)\n     |      Returns the lowest index in each string where substring is found that is\n     |      greater than or equal to ``start``. Returns -1 on failure.\n     |      \n     |      Parameters\n     |      ----------\n     |      sub : str\n     |        The text expression to search.\n     |      start : int\n     |        A nonnegative integer indicating when the function begins the search.   \n     |      \n     |      Returns\n     |      -------\n     |      found : oml.Float\n     |  \n     |  len(self)\n     |      Computes the length of each string.\n     |      \n     |      Returns\n     |      -------\n     |      length : oml.Float\n     |  \n     |  pull(self)\n     |      Pulls data represented by this object from Oracle Database into an\n     |      in-memory Python object.\n     |      \n     |      Returns\n     |      -------\n     |      pulled_obj : list of str and None\n     |  \n     |  replace(self, old, new, default=None)\n     |      Replace values given in `old` with `new`.\n     |      \n     |      Parameters\n     |      ----------\n     |      old : list of float, or list of str\n     |        Specifying the old values. When specified with a list of float, it\n     |        can contain float('nan') and None. When specified with a list of str, it\n     |        can contain None.\n     |      new : list of float, or list of str\n     |        A list of the same length as argument `old` specifying\n     |        the new values. When specified with a list of float, it\n     |        can contain float('nan') and None. When specified with a list of str, it\n     |        can contain None.\n     |      default : float, str, or None (default)\n     |        A single value to use for the non-matched elements in argument\n     |        `old`. If None, non-matched elements will preserve their\n     |        original values. If not None, data type should be consistent\n     |        with values in `new`. Must be set when `old` and `new` contain \n     |        values of different data types.\n     |      \n     |      Returns\n     |      -------\n     |      replaced : oml.String\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * if values in `old` have data types inconsistent with original values\n     |        * if `default` is specifed with a non-None value which has data type\n     |          inconsistent with values in `new`\n     |        * if `default` is None when `old` and `new` contain values of different\n     |          data types\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.series._Series:\n     |  \n     |  KFold(self, n_splits=3, seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into k consecutive folds \n     |      for use with k-fold cross validation.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_splits : int, 3 (default)\n     |        The number of folds. Must be greater than or equal to 2.\n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default):\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      kfold_data : a list of pairs of series objects of the same type as caller\n     |        Each pair within the list is a fold. The first element of the pair is the\n     |        train set, and the second element is the test set, which consists of all\n     |        elements not in the train set.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  __eq__(self, other)\n     |      Equivalent to ``self == other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      equal : oml.Boolean\n     |  \n     |  __ge__(self, other)\n     |      Equivalent to ``self >= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterequal : oml.Boolean\n     |  \n     |  __gt__(self, other)\n     |      Equivalent to ``self > other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      greaterthan : oml.Boolean\n     |  \n     |  __le__(self, other)\n     |      Equivalent to ``self <= other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessequal : oml.Boolean\n     |  \n     |  __lt__(self, other)\n     |      Equivalent to ``self < other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      lessthan : oml.Boolean\n     |  \n     |  __ne__(self, other)\n     |      Equivalent to ``self != other``.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : OML series data object of compatible type or corresponding built-in python scalar\n     |        * scalar : every element in ``self`` will be compared to the scalar.\n     |        * a OML series : must come from the same data source. Every element in ``self`` will be\n     |          compared to the corresponding element in ``other``. oml.Float and oml.Boolean series\n     |          can be compared to each other. oml.String and oml.Bytes series can be compared to each\n     |          other.\n     |      \n     |      Returns\n     |      -------\n     |      notequal : oml.Boolean\n     |  \n     |  count(self)\n     |      Returns the number of elements that are not NULL.\n     |      \n     |      Returns\n     |      -------\n     |      nobs : int\n     |  \n     |  describe(self)\n     |      Generates descriptive statistics that summarize the central tendency, \n     |      dispersion, and shape of an OML series data distribution.\n     |      \n     |      Returns\n     |      -------\n     |      summary : :py:class:`pandas.Series`\n     |        Includes ``count`` (number of non-null entries), ``unique``\n     |        (number of unique entries), ``top`` (most common value), ``freq``,\n     |        (frequency of the most common value).\n     |  \n     |  drop_duplicates(self)\n     |      Removes duplicated elements.\n     |      \n     |      Returns\n     |      -------\n     |      deduplicated : type of caller\n     |  \n     |  dropna(self)\n     |      Removes missing values.\n     |      \n     |      Missing values include None and/or nan if applicable.\n     |      \n     |      Returns\n     |      -------\n     |      dropped : type of caller\n     |  \n     |  isnull(self)\n     |      Detects the missing value None.\n     |      \n     |      Returns\n     |      -------\n     |      isnull : oml.Boolean\n     |        Indicates missing value None for each element.\n     |  \n     |  max(self, skipna=True)\n     |      Returns the maximum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      max : Python type corresponding to the column or numpy.nan\n     |  \n     |  min(self, skipna=True)\n     |      Returns the minimum value.\n     |      \n     |      Parameters\n     |      ----------\n     |      skipna : boolean, True (default)\n     |        Excludes NaN values when computing the result.\n     |      \n     |      Returns\n     |      -------\n     |      min : Python type corresponding to the column or numpy.nan\n     |  \n     |  nunique(self, dropna=True)\n     |      Returns the number of unique values.\n     |      \n     |      Parameters\n     |      ----------\n     |      dropna : bool, True (default)\n     |        If True, NULL values are not included in the count. \n     |      \n     |      Returns\n     |      -------\n     |      nunique : int\n     |  \n     |  sort_values(self, ascending=True, na_position='last')\n     |      Sorts the values in the series data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      ascending : bool, True (default)\n     |        If True, sorts in ascending order. Otherwise, sorts in descending order.\n     |      na_position : {'first', 'last'}, 'last' (default)\n     |        ``first`` places NANs and Nones at the beginning; ``last`` places them\n     |        at the end.\n     |      \n     |      Returns\n     |      -------\n     |      sorted_obj : type of caller\n     |  \n     |  split(self, ratio=(0.7, 0.3), seed=12345, use_hash=True, nvl=None)\n     |      Splits the series data object randomly into multiple sets.\n     |      \n     |      Parameters\n     |      ----------\n     |      ratio : a list of float values or (0.7, 0.3) (default)\n     |        All the numbers must be positive and the sum of them are no more than \n     |        1. Each number represents the ratio of split data in one set. \n     |      seed : int or 12345 (default)\n     |        The seed to use for random splitting.\n     |      use_hash : boolean, True (default)\n     |        If True, use hashing to randomly split the data. If False, use a random\n     |        number to split the data.\n     |      nvl : numeric value, str, or None (default)\n     |        If not None, the specified values are used to hash in place of Null.\n     |      \n     |      Returns\n     |      -------\n     |      split_data : a list of series objects of the same type as caller\n     |        Each of which contains the portion of data by the specified ratio.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |        * If ``use_hash`` is True, and the underlying database column type of\n     |          ``self`` is a LOB.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes inherited from oml.core.series._Series:\n     |  \n     |  __hash__ = None\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.core.vector._Vector:\n     |  \n     |  __del__(self)\n     |  \n     |  __getitem__(self, key)\n     |      Index self. Equivalent to ``self[key]``.\n     |      \n     |      Parameters\n     |      ----------\n     |      key : oml.Boolean\n     |        Must be from the same data source as self.\n     |      \n     |      Returns\n     |      -------\n     |      subset : same type as self\n     |        Contains only the rows satisfying the condition in ``key``.\n     |  \n     |  __len__(self)\n     |      Returns number of rows. Equivalent to ``len(self)``.\n     |      \n     |      Returns\n     |      -------\n     |      rownum : int\n     |  \n     |  __repr__(self)\n     |  \n     |  append(self, other, all=True)\n     |      Appends the ``other`` OML data object of the same class to this data object.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : An OML data object of the same class\n     |      all : boolean, True (default)\n     |        Keeps the duplicated elements from the two data objects.\n     |      \n     |      Returns\n     |      -------\n     |      appended : type of caller\n     |        A new data object containing the elements from both objects.\n     |  \n     |  concat(self, other, auto_name=False)\n     |      Combines current OML data object with the ``other`` data objects column-wise.\n     |      \n     |      Current object and the ``other`` data objects must be combinable, that is,\n     |      they both represent data from the same underlying database table, view, or query.\n     |      \n     |      Parameters\n     |      ----------\n     |      other : an OML data object, a list of OML data objects, or a dict mapping str to OML data objects.\n     |        * OML data object: an OML series data object or an oml.DataFrame\n     |        * list: a sequence of OML series and DataFrame objects to concat.\n     |        * dict: a dict mapping str to OML series and DataFrame objects,\n     |          the column name of concatenated OML series object is replaced with str,\n     |          column names of concatenated OML DataFrame object is prefixed with str.\n     |          Need to specify a :py:obj:`python:collections.OrderedDict` if the \n     |          concatenation order is expected to follow the key insertion order.\n     |      auto_name : boolean, False (default)\n     |        Indicates whether to automatically resolve conflict column names.\n     |        If True, append duplicated column names with suffix ``[column_index]``.\n     |      \n     |      Notes\n     |      -----\n     |      After concatenation is done, if there is any empty column names in the resulting \n     |      oml.DataFrame, they will be renamed with ``COL[column_index]``.\n     |      \n     |      Raises\n     |      ------\n     |      ValueError\n     |        * If ``other`` is not a single nor a list/dict of OML objects, or if ``other`` is empty.\n     |        * If objects in ``other`` are not from same data source.\n     |        * If ``auto_name`` is False and duplicated column names are detected.\n     |      \n     |      Returns\n     |      -------\n     |      concat_table : oml.DataFrame\n     |        An oml.DataFrame data object with its original columns followed by the \n     |        columns of ``other``.\n     |  \n     |  create_view(self, view=None, use_colname=False)\n     |      Creates an Oracle Database view for the data represented by the OML data \n     |      object.\n     |      \n     |      Parameters\n     |      ----------\n     |      view : str or None (default)\n     |        The name of a database view. If ``view`` is None, the created view is managed\n     |        by OML and the view is automatically dropped when no longer needed.\n     |        If a ``view`` is specified, then it is up to the user to drop the view.\n     |      use_colname : bool, False (default)\n     |        Indicates whether to create the view with the same column names as the\n     |        DataFrame object. Ignored if ``view`` is specified.\n     |      \n     |      Raises\n     |      ------\n     |      TypeError\n     |       * If the object represents data from a temporary table or view, and the view\n     |         to create is meant to persist past the current session.\n     |      \n     |      Returns\n     |      -------\n     |      new_view : oml.DataFrame\n     |  \n     |  head(self, n=5)\n     |      Returns the first n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_head : type of caller\n     |  \n     |  materialize(self, table=None)\n     |      Pushes the contents represented by an OML proxy object (a view, a table and so on) \n     |      into a table in Oracle Database.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : str or None (default)\n     |        The name of a table. If ``table`` is None, an OML-managed table is \n     |        created, that is, OML drops the table when it is no longer used by \n     |        any OML object or when you invoke ``oml.disconnect(cleanup=True)`` to \n     |        terminate the database connection. If a table is specified, \n     |        then it's up to the user to drop the named table.\n     |      \n     |      Returns\n     |      -------\n     |      new_table : same type as self\n     |  \n     |  tail(self, n=5)\n     |      Returns the last n elements.\n     |      \n     |      Parameters\n     |      ----------\n     |      n : int, 5 (default)\n     |        The number of elements to return.\n     |      \n     |      Returns\n     |      -------\n     |      obj_tail : type of caller\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.core.vector._Vector:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  shape\n     |      The dimensions of the data set.\n     |      The first element is the number of rows and the second is the number of\n     |      columns.\n    \n    class ai(oml.algo.model.odmModel)\n     |  ai(model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Attribute Importance <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/attribute-importance.html>`_ Model\n     |  \n     |  Computes the relative importance of variables (aka attributes or columns) when predicting\n     |  a target variable (numeric or categorical column). This function exposes the \n     |  corresponding Oracle Advanced Analytics in-database algorithm. \n     |  Oracle Advanced Analytics does not support the prediction functions\n     |  for attribute importance. The results of attribute importance are the attributes\n     |  of the build data ranked according to their predictive influence. The ranking and\n     |  the measure of importance can be used for selecting attributes.\n     |  \n     |  :Attributes:\n     |  \n     |      **importance** : oml.DataFrame\n     |  \n     |          Relative importance of predictor variables for predicting a response variable.\n     |          It includes the following components:\n     |              \n     |              - variable: The name of the predictor variable\n     |              - importance: The importance of the predictor variable\n     |              - rank: The predictor variable rank based on the importance value.\n     |  \n     |  Method resolution order:\n     |      ai\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of Attribute Importance object.\n     |      \n     |      Parameters\n     |      ----------\n     |      model_name : string or None (default)\n     |          The name of an existing database Attribute Importance model to create an oml.ai object from.\n     |          The specified database model is not dropped when the oml.ai object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Attribute Importance model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each list element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings or Algorithm-specific Settings are not\n     |          applicable to Attribute Importance model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, y, model_name=None, case_id=None)\n     |      Fits an Attribute Importance Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object, or string\n     |          Target values.\n     |          If y is a single column OML object, target values specified by y must be combinable with x.\n     |          If y is a string, y is the name of the column in x that specifies the target values.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.ai object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.ai object is deleted\n     |          unless oml.ai object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The column name used as case id for building the model.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class ar(oml.algo.model.odmModel)\n     |  ar(model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Association Rules <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/association-rules.html>`_ Model\n     |  \n     |  Builds an Association Rules Model used to discover the probability of item co-occurrence\n     |  in a collection. This function exposes the corresponding Oracle Advanced Analytics \n     |  in-database algorithm. The relationships between co-occurring items are expressed as \n     |  association rules.\n     |  Oracle Advanced Analytics does not support the prediction functions for association modeling.\n     |  The results of an association model are the rules that identify patterns of\n     |  association within the data. Association rules can be ranked by support\n     |  (How often do these items occur together in the data?) and confidence\n     |  (How likely are these items to occur together in the data?).\n     |  \n     |  :Attributes:\n     |  \n     |      **rules** : oml.DataFrame\n     |  \n     |          Details of each rule that shows \n     |          how the appearance of a set of items in a transactional\n     |          record implies the existence of another set of items.\n     |          It includes the following components:\n     |  \n     |          - rule_id: The identifier of the rule\n     |          - number_of_items: The total number of attributes referenced in the antecedent and consequent of the rule\n     |          - lhs_name: The name of the antecedent.\n     |          - lhs_value: The value of the antecedent.\n     |          - rhs_name: The name of the consequent.\n     |          - rhs_value: The value of the consequent.\n     |          - support: The number of transactions that satisfy the rule.\n     |          - confidence: The likelihood of a transaction satisfying the rule.\n     |          - revconfidence: The number of transactions in which the rule occurs divided by the number of transactions in which the consequent occurs.\n     |          - lift: The degree of improvement in the prediction over random chance when the rule is satisfied.\n     |  \n     |      **itemsets** : oml.DataFrame\n     |  \n     |          Description of the item sets from the model built.\n     |          It includes the following components:\n     |  \n     |          - itemset_id: The itemset identifier\n     |          - support: The support of the itemset\n     |          - number_of_items: The number of items in the itemset\n     |          - item_name: The name of the item\n     |          - item_value: The value of the item\n     |  \n     |  Method resolution order:\n     |      ar\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of Association Rules object.\n     |      \n     |      Parameters\n     |      ----------\n     |      model_name : string or None (default)\n     |          The name of an existing database Association Rules model to create an oml.ar object from.\n     |          The specified database model is not dropped when the oml.ar object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Association Rules model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each list element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic\n     |          Data Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Association are applicable.\n     |          No algorithm-specific Settings are applicable to Association model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, model_name=None, case_id=None)\n     |      Fits an Association Rules Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.ar object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.ar object is deleted\n     |          unless oml.ar object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The column name used as case id for building the model.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class dt(oml.algo.model.odmModel)\n     |  dt(model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Decision Tree <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/decision-tree.html>`_ Model\n     |  \n     |  Builds a Decision Tree Model used to generate rules (conditional statements \n     |  that can easily be understood by humans and be used within a database to identify \n     |  a set of records) to predict a target value (numeric or categorical column). This \n     |  function exposes the corresponding Oracle Advanced Analytics in-database algorithm.\n     |  A decision tree predicts a target value by asking a sequence of questions. \n     |  At a given stage in the sequence, the question that is asked depends upon the \n     |  answers to the previous questions. The goal is to ask questions that, taken \n     |  together, uniquely identify specific target values. Graphically, this process \n     |  forms a tree structure. During the training process, the Decision Tree algorithm \n     |  must repeatedly find the most efficient way to split a set of cases (records) \n     |  into two child nodes. The model offers two homogeneity metrics, gini and entropy, \n     |  for calculating the splits. The default metric is gini.\n     |  \n     |  \n     |  :Attributes:\n     |  \n     |      **nodes** : oml.DataFrame\n     |      \n     |        The node summary information with tree node details.\n     |        It includes the following components:\n     |            \n     |        - parent: The node ID of the parent\n     |        - node.id: The node ID\n     |        - row.count: The number of records in the training set that belong to the node\n     |        - prediction: The predicted Target value\n     |        - split: The main split\n     |        - surrogate: The surrogate split\n     |        - full.splits: The full splitting criterion\n     |        \n     |      **distributions** : oml.DataFrame\n     |  \n     |        The target class distributions at each tree node.\n     |        It includes the following components:\n     |            \n     |        - node_id: The node ID\n     |        - target_value: The target value\n     |        - target_count: The number of rows for a given target_value\n     |  \n     |  Method resolution order:\n     |      dt\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of dt object.\n     |      \n     |      Parameters\n     |      ----------\n     |      model_name : string or None (default)\n     |          The name of an existing database Decision Tree model to create an oml.dt object from.\n     |          The specified database model is not dropped when the oml.dt object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Decision Tree model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each dict element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Classification and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-03435110-D723-42FD-B4EA-39C86A039566>`_\n     |          are applicable to Decision Tree model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, y, model_name=None, cost_matrix=None, case_id=None)\n     |      Fits a decision tree model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object, or string\n     |          Target values.\n     |          If y is a single column OML object, target values specified by y must be combinable with x.\n     |          If y is a string, y is the name of the column in x that specifies the target values.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.dt object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.dt object is deleted\n     |          unless oml.dt object is saved into a datastore.\n     |      cost_matrix : OML DataFrame, list of ints, floats or None (default)\n     |          An optional numerical matrix that specifies the costs for incorrectly\n     |          predicting the target values. The first value represents the actual target value.\n     |          The second value represents the predicted target value. The third value is the cost.\n     |          In general, the diagonal entries of the matrix are zeros. Refer to `Oracle Data\n     |          Mining User's Guide <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-89E0DB46-BA9A-4420-8216-FD6C96C74D6D>`_\n     |          for more details about cost matrix.\n     |      case_id : string or None (default)\n     |          The column name used as case id for building the model.\n     |  \n     |  predict(self, x, supplemental_cols=None, proba=False, topN_attrs=False)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      proba : boolean, False (default)\n     |          Returns prediction probability if proba is True.\n     |      topN_attrs : boolean, positive integer, False (default)\n     |          Returns the top N most influence attributes of the predicted target value\n     |          for regression if topN_attrs is not False.\n     |          Returns the top N most influence attributes of the highest probability class\n     |          for classification if topN_attrs is not False.\n     |          N is equal to the specified positive integer or 5 if topN_attrs is True.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols``, and the\n     |        results. The results include the most likely target class.\n     |  \n     |  predict_proba(self, x, supplemental_cols=None, topN=None)\n     |      Makes predictions and returns probability for each class on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer or None (default)\n     |          A positive integer that restricts the returned target classes to\n     |          the specified number of those that have the highest probability.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include for each target class, the probability\n     |        belonging to that class.\n     |  \n     |  score(self, x, y)\n     |      Makes predictions on new data and returns the mean accuracy.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object\n     |          Target values.\n     |      \n     |      Returns\n     |      -------\n     |      score : float\n     |              Mean accuracy for classifications.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class em(oml.algo.model.odmModel)\n     |  em(n_clusters=None, model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Expectation Maximization <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/expectation-maximization.html>`_ Model\n     |  \n     |  Builds an Expectation Maximization (EM) Model used to performs probabilistic \n     |  clustering based on a density estimation algorithm. This function exposes the \n     |  corresponding Oracle Advanced Analytics in-database algorithm. In density estimation, \n     |  the goal is to construct a density function that captures how a given population is \n     |  distributed. The density estimate is based on observed data that represents a \n     |  sample of the population.\n     |  \n     |  :Attributes:\n     |  \n     |      **clusters** : oml.DataFrame\n     |      \n     |        The general per-cluster information.\n     |        It includes the following components:\n     |            \n     |            - cluster_id: The ID of a cluster in the model\n     |            - cluster_name: The name of a cluster in the model\n     |            - record_count: The number of rows used in the build\n     |            - parent: The ID of the parent\n     |            - tree_level: The number of splits from the root\n     |            - left_child_id: The ID of the left child\n     |            - right_child_id: The ID of the right child\n     |            \n     |      **taxonomy**: oml.DataFrame\n     |      \n     |        The parent/child cluster relationship.\n     |        It includes the following components:\n     |            \n     |            - parent_cluster_id: The ID of the parent cluster\n     |            - child_cluster_id: The ID of the child cluster\n     |            \n     |      **centroids**: oml.DataFrame\n     |      \n     |        Per cluster-attribute center (centroid) information.\n     |        It includes the following components:\n     |            \n     |            - cluster_id: The ID of a cluster in the model\n     |            - attribute_name: The attribute name\n     |            - mean: The average value of a numeric attribute\n     |            - mode_value: The most frequent value of a categorical attribute\n     |            - variance: The variance of a numeric attribute\n     |            \n     |      **leaf_cluster_counts**: pandas.DataFrame\n     |      \n     |        Leaf clusters with support.\n     |        It includes the following components:\n     |            \n     |            - cluster_id: The ID of a leaf cluster in the model\n     |            - cnt: The number of records in a leaf cluster\n     |            \n     |      **attribute_importance**: oml.DataFrame\n     |      \n     |        Attribute importance of the fitted model.\n     |        It includes the following components:\n     |            \n     |            - attribute_name: The attribute name\n     |            - attribute_importance_value: The attribute importance for an attribute\n     |            - attribute_rank: The rank of the attribute based on importance\n     |            \n     |      **projection**: oml.DataFrame\n     |      \n     |        The coefficients used by random projections to map nested columns to a lower dimensional space.\n     |        It exists only when nested or text data is present in the build data.\n     |        It includes the following components:\n     |            \n     |            - feature_name: The name of feature\n     |            - attribute_name: The attribute name\n     |            - attribute_value: The attribute value\n     |            - coefficient: The projection coefficient for an attribute\n     |            \n     |      **components**: oml.DataFrame\n     |      \n     |        EM components information about their prior probabilities and what cluster they map to.\n     |        It includes the following components:\n     |            \n     |            - component_id: The unique identifier of a component\n     |            - cluster_id: The ID of a cluster in the model\n     |            - prior_probability: The component prior probability\n     |            \n     |      **cluster_hists**: oml.DataFrame\n     |        Cluster histogram information.\n     |        It includes the following components:\n     |            \n     |            - cluster.id: The ID of a cluster in the model\n     |            - variable: The attribute name\n     |            - bin.id: The ID of a bin\n     |            - lower.bound: The numeric lower bin boundary\n     |            - upper.bound: The numeric upper bin boundary\n     |            - label: The label of the cluster\n     |            - count: The histogram count\n     |            \n     |      **rules**: oml.DataFrame\n     |      \n     |        Conditions for a case to be assigned with some probability to a cluster.\n     |        It includes the following components:\n     |            \n     |            - cluster.id: The ID of a cluster in the model\n     |            - rhs.support: The record count\n     |            - rhs.conf: The record confidence\n     |            - lhr.support: The rule support\n     |            - lhs.conf: The rule confidence\n     |            - lhs.var: The attribute predicate name\n     |            - lhs.var.support: The attribute predicate support\n     |            - lhs.var.conf: The attribute predicate confidence\n     |            - predicate: The attribute predicate\n     |  \n     |  Method resolution order:\n     |      em\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, n_clusters=None, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of em object.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_clusters : positive integer, None (default)\n     |          The number of clusters. If n_clusters is None, the number of clusters will be determined\n     |          either by current setting parameters or automatically by the algorithm.\n     |      model_name : string or None (default)\n     |          The name of an existing database Expectation Maximization model to create an oml.em object from.\n     |          The specified database model is not dropped when the oml.em object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Expectation Maximization model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each list element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Clustering and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-1796B451-BE1B-43BC-9839-05F5F73031C8>`_\n     |          are applicable to Expectation Maximization model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, model_name=None, case_id=None)\n     |      Fits an Expectation Maximization Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.em object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.em object is deleted\n     |          unless oml.em object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The name of a column that contains unique case identifiers.\n     |  \n     |  predict(self, x, supplemental_cols=None)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. If the mode is 'class', the results include the most likely\n     |        target class and its probability. If mode is 'raw', the results\n     |        include for each target class, the probability belonging\n     |        to that class.\n     |  \n     |  predict_proba(self, x, supplemental_cols=None, topN=None)\n     |      Makes predictions and returns probability for each cluster on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer or None (default)\n     |          A positive integer that restricts the returned clusters to\n     |          the specified number of those that have the highest probability.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include for each cluster, the probability\n     |        belonging to that cluster.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class esa(oml.algo.model.odmModel)\n     |  esa(model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Explicit Semantic Analysis <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/explicit-semantic-analysis.html>`_ Model\n     |  \n     |  Builds an Explicit Semantic Analysis (ESA) Model to be used for feature extraction. \n     |  This function exposes the corresponding Oracle Advanced Analytics in-database algorithm.\n     |  ESA uses concepts of an existing knowledge base as features rather than latent\n     |  features derived by latent semantic analysis methods such as Singular\n     |  Value Decomposition and Latent Dirichlet Allocation. Each row, for example,\n     |  a document in the training data maps to a feature, that is, a concept.\n     |  ESA works best with concepts represented by text documents.\n     |  It has multiple applications in the area of text processing, most\n     |  notably semantic relatedness (similarity) and explicit topic modeling.\n     |  Text similarity use cases might involve, for example, resume matching, searching\n     |  for similar blog postings, and so on.\n     |  \n     |  :Attributes:\n     |  \n     |      **features** : oml.DataFrame\n     |      \n     |        Description of each feature extracted. \n     |        It includes the following components:\n     |            \n     |            - feature_id: The unique identifier of a feature as it appears in the training data\n     |            - attribute_name: The attribute name\n     |            - attribute_value: The attribute value\n     |            - coefficient: The coefficient (weight) associated with the attribute in a particular feature.\n     |  \n     |  Method resolution order:\n     |      esa\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of esa object.\n     |      \n     |      Parameters\n     |      ----------\n     |      model_name : string or None (default)\n     |          The name of an existing database Explicit Semantic Analysis model to create an oml.esa object from.\n     |          The specified database model is not dropped when the oml.esa object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Explicit Semantic Analysis model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each list element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Feature Extraction and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-91FC543B-24E4-4D93-9D79-E95B1846F3B7>`_\n     |          are applicable to Explicit Semantic Analysis model.\n     |  \n     |  __repr__(self)\n     |  \n     |  feature_compare(self, x, compare_cols=None, supplemental_cols=None)\n     |      Compares features of data and generates relatedness.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          The data used to measure relatedness.\n     |      compare_cols : str, a list of str or None (default)\n     |          The column(s) used to measure data relatedness.\n     |          If None, all the columns of ``x`` are compared to measure relatedness.\n     |      supplemental_cols : a list of str or None (default)\n     |          A list of columns to display along with the resulting 'SIMILARITY' column.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |          Contains a 'SIMILARITY' column that measures relatedness and supplementary columns if specified.\n     |  \n     |  fit(self, x, model_name=None, case_id=None, ctx_settings=None)\n     |      Fits an ESA Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.esa object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.esa object is deleted\n     |          unless oml.esa object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The column name used as case id for building the model.\n     |      ctx_settings : dict or None (default)\n     |          A list to specify Oracle Text attribute-specific settings.\n     |          This argument is applicable to building models in Oracle Database 12.2 or later.\n     |          The name of each list element refers to the text column while the list value\n     |          is a scalar string specifying the attribute-specific text transformation.\n     |          The valid entries in the string include TEXT, POLICY_NAME, TOKEN_TYPE, and\n     |          MAX_FEATURES.\n     |  \n     |  predict(self, x, supplemental_cols=None)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include the most likely feature and its probability.\n     |  \n     |  transform(self, x, supplemental_cols=None, topN=None)\n     |      Make predictions and return relevancy for each feature on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer or None (default)\n     |          A positive integer that restricts the returned values to\n     |          the specified number of features that have the highest topN values.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the relevancy for each feature on new data and the specified ``supplemental_cols``.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class glm(oml.algo.model.odmModel)\n     |  glm(mining_function='CLASSIFICATION', model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Generalized Linear Models <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/general-linearized-model.html>`_\n     |  \n     |  Builds Generalized Linear Models (GLM), which include and extend the class of \n     |  linear models (linear regression), to be used for classification or regression. \n     |  This function exposes the corresponding Oracle Advanced Analytics in-database algorithm.\n     |  Generalized linear models relax the restrictions on linear models, which are often \n     |  violated in practice. For example, binary (yes/no or 0/1) responses do not have same \n     |  variance across classes. This model uses a parametric modeling technique. Parametric \n     |  models make assumptions about the distribution of the data. When the assumptions are \n     |  met, parametric models can be more efficient than non-parametric models.\n     |  \n     |  :Attributes:\n     |  \n     |      **coef** : oml.DataFrame\n     |      \n     |        The coefficients of the GLM model, one for each predictor variable.\n     |        It includes the following components:\n     |            \n     |            - nonreference: The target value used as nonreference\n     |            - name: The attribute name\n     |            - level: The attribute value\n     |            - estimate: The estimated coefficient\n     |            \n     |      **fit_details**: oml.DataFrame\n     |      \n     |        The model fit details such as adjusted_r_square, error_mean_square and so on.\n     |        It includes the following components:\n     |            \n     |            - name: The fit detail name\n     |            - value: The fit detail value\n     |            \n     |      **deviance**: float\n     |      \n     |        Minus twice the maximized log-likelihood, up to a constant.\n     |        \n     |      **null_deviance**: float\n     |      \n     |        The deviance for the null (intercept only) model.\n     |        \n     |      **aic**: float\n     |      \n     |        Akaike information criterion.\n     |        \n     |      **rank**: integer\n     |      \n     |        The numeric rank of the fitted model.\n     |        \n     |      **df_residual**: float\n     |      \n     |        The residual degrees of freedom.\n     |        \n     |      **df_null**: float\n     |      \n     |        The residual degrees of freedom for the null model.\n     |        \n     |      **converged**: bool\n     |      \n     |        The indicator for whether the model converged.\n     |        \n     |      **nonreference**: int or str\n     |      \n     |        For logistic regression, the response values that represents success.\n     |  \n     |  Method resolution order:\n     |      glm\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, mining_function='CLASSIFICATION', model_name=None, model_owner=None, **params)\n     |      Initializes an instance of glm object.\n     |      \n     |      Parameters\n     |      ----------\n     |      mining_function : 'CLASSIFICATION' or 'REGRESSION', 'CLASSIFICATION' (default)\n     |          Type of model mining functionality\n     |      model_name : string or None (default)\n     |          The name of an existing database Generalized Linear Model to create an oml.glm object from.\n     |          The specified database model is not dropped when the oml.glm object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Generalized Linear Model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each list element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Classification and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-4E3665B9-B1C2-4F6B-AB69-A7F353C70F5C>`_\n     |          are applicable to Generalized Linear Model model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, y, model_name=None, case_id=None, ctx_settings=None)\n     |      Fits a GLM Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object, or string\n     |          Target values.\n     |          If y is a single column OML object, target values specified by y must be combinable with x.\n     |          If y is a string, y is the name of the column in x that specifies the target values.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.glm object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.glm object is deleted\n     |          unless oml.glm object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The name of a column that contains unique case identifiers.\n     |      ctx_settings : dict or None (default)\n     |          A list to specify Oracle Text attribute-specific settings.\n     |          This argument is applicable to building models in Oracle Database 12.2 or later.\n     |          The name of each list element refers to the text column while the list value\n     |          is a scalar string specifying the attribute-specific text transformation.\n     |          The valid entries in the string include TEXT, POLICY_NAME, TOKEN_TYPE, and\n     |          MAX_FEATURES.\n     |  \n     |  predict(self, x, supplemental_cols=None, confint=None, level=None, proba=False, topN_attrs=False)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      confint : bool, False (default)\n     |          A logical indicator for whether to produce confidence intervals.\n     |          for the predicted values.\n     |      level : float between 0 and 1 or None (default)\n     |          A numeric value within [0, 1] to use for the confidence level.\n     |      proba : boolean, False (default)\n     |          Returns prediction probability if ``proba`` is True for classification.\n     |      topN_attrs : boolean, positive integer, False (default)\n     |          Returns the top N most influence attributes of the predicted target value\n     |          for regression if topN_attrs is not False.\n     |          Returns the top N most influence attributes of the highest probability class\n     |          for classification if topN_attrs is not False.\n     |          N is equal to the specified positive integer or 5 if topN_attrs is True.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. For a classification model, the results include the most\n     |        likely target class and optionally its probability and confidence\n     |        intervals. For a linear regression model, the results consist of a column\n     |        for the prediction and optionally its confidence intervals.\n     |  \n     |  predict_proba(self, x, supplemental_cols=None, topN=None)\n     |      Makes predictions and returns probability for each class on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer or None (default)\n     |          A positive integer that restricts the returned target classes to\n     |          the specified number of those that have the highest probability.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include for each target class, the probability\n     |        belonging to that class.\n     |  \n     |  residuals(self, x, y)\n     |      Return the deviance residuals, which includes the following components:\n     |        - deviance: The deviance residual\n     |        - pearson: The Pearson residual\n     |        - response: The residual of the working response.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object, or string\n     |          Target values.\n     |          If y is a single column OML object, target values specified by y must be combinable with x.\n     |          If y is a string, y is the name of the column in x that specifies the target values.\n     |      \n     |      Return: oml.DataFrame\n     |  \n     |  score(self, x, y)\n     |      Makes predictions on new data, returns the mean accuracy for classifications\n     |      or the coefficient of determination R^2 of the prediction for regressions.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object\n     |          Target values.\n     |      \n     |      Returns\n     |      -------\n     |      score : float\n     |              Mean accuracy for classifications or the coefficient of\n     |              determination R^2 of the prediction for regressions.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class km(oml.algo.model.odmModel)\n     |  km(n_clusters=None, model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `k-means <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/k-means.html>`_ Model\n     |  \n     |  Builds a K-Means (KM) Model that uses a distance-based clustering algorithm to \n     |  partition data into a specified number of clusters. This function exposes the \n     |  corresponding Oracle Advanced Analytics in-database algorithm. Distance-based \n     |  algorithms rely on a distance function to measure the similarity between cases. \n     |  Cases are assigned to the nearest cluster according to the distance function used.\n     |  \n     |  :Attributes:\n     |  \n     |      **clusters** : oml.DataFrame\n     |      \n     |        The general per-cluster information.\n     |        It includes the following components:\n     |            \n     |            - cluster_id: The ID of a cluster in the model\n     |            - row_cnt: The number of rows used in the build\n     |            - parent_cluster_id: The ID of the parent\n     |            - tree_level: The number of splits from the root\n     |            - dispersion: The measure of the quality of the cluster, and computationally, the sum of square errors\n     |            \n     |      **taxonomy**: oml.DataFrame\n     |      \n     |        The parent/child cluster relationship.\n     |        It includes the following components:\n     |            \n     |            - parent_cluster_id: The ID of the parent cluster\n     |            - child_cluster_id: The ID of the child cluster\n     |            \n     |      **centroids**: oml.DataFrame\n     |      \n     |        Per cluster-attribute center (centroid) information.\n     |        It includes the following components:\n     |            \n     |            - cluster_id: The ID of a cluster in the model\n     |            - attribute_name: The attribute name\n     |            - mean: The average value of a numeric attribute\n     |            - mode_value: The most frequent value of a categorical attribute\n     |            - variance: The variance of a numeric attribute\n     |            \n     |      **leaf_cluster_counts**: pandas.DataFrame\n     |      \n     |        Leaf clusters with support.\n     |        It includes the following components:\n     |            \n     |            - cluster_id: The ID of a leaf cluster in the model\n     |            - cnt: The number of records in a leaf cluster\n     |            \n     |      **cluster_hists**: oml.DataFrame\n     |      \n     |        Cluster histogram information.\n     |        It includes the following components:\n     |            \n     |            - cluster.id: The ID of a cluster in the model\n     |            - variable: The attribute name\n     |            - bin.id: The ID of a bin\n     |            - lower.bound: The numeric lower bin boundary\n     |            - upper.bound: The numeric upper bin boundary\n     |            - label: The label of the cluster\n     |            - count: The histogram count\n     |            \n     |      **rules**: oml.DataFrame\n     |      \n     |        Conditions for a case to be assigned with some probability to a cluster.\n     |        It includes the following components:\n     |            \n     |            - cluster.id: The ID of a cluster in the model\n     |            - rhs.support: The record count\n     |            - rhs.conf: The record confidence\n     |            - lhr.support: The rule support\n     |            - lhs.conf: The rule confidence\n     |            - lhs.var: The attribute predicate name\n     |            - lhs.var.support: The attribute predicate support\n     |            - lhs.var.conf: The attribute predicate confidence\n     |            - predicate: The attribute predicate\n     |  \n     |  Method resolution order:\n     |      km\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, n_clusters=None, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of km object.\n     |      \n     |      Parameters\n     |      ----------\n     |      n_clusters : positive integer, default None\n     |          Number of clusters. If n_clusters is None, the number of clusters will be determined\n     |          either by current setting parameters or automatically by the internal algorithm.\n     |      model_name : string or None (default)\n     |          The name of an existing database K-Means model to create an oml.km object from.\n     |          The specified database model is not dropped when the oml.km object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing K-Means model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each list element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Clustering and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-7010593E-C323-4DFC-8468-D85CE41A0C3C>`_\n     |          are applicable to K-Means model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, model_name=None, case_id=None, ctx_settings=None)\n     |      Fits a K-Means Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.km object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.km object is deleted\n     |          unless oml.km object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The name of a column that contains unique case identifiers.\n     |      ctx_settings : dict or None(default)\n     |          A list to specify Oracle Text attribute-specific settings.\n     |          This argument is applicable to building models in Oracle Database 12.2 or later.\n     |          The name of each list element refers to the text column while the list value\n     |          is a scalar string specifying the attribute-specific text transformation.\n     |          The valid entries in the string include TEXT, POLICY_NAME, TOKEN_TYPE, and\n     |          MAX_FEATURES.\n     |  \n     |  predict(self, x, supplemental_cols=None)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results.\n     |  \n     |  predict_proba(self, x, supplemental_cols=None, topN=None)\n     |      Makes predictions and returns probability for each cluster on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer\n     |          A positive integer that restricts the returned clusters to\n     |          the specified number of those that have the highest probability.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include for each cluster, the probability\n     |        belonging to that cluster.\n     |  \n     |  score(self, x)\n     |      Calculates the score value based on the input data ``x``.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          A new data set used to calculate score value.\n     |      \n     |      Returns\n     |      -------\n     |      pred : float\n     |             Score values, that is, opposite of the value of ``x`` on the K-means objective.\n     |  \n     |  transform(self, x)\n     |      Transforms ``x`` to a cluster-distance space.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the distance to each cluster.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class nb(oml.algo.model.odmModel)\n     |  nb(model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Naive Bayes <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/naive-bayes.html>`_ Model\n     |  \n     |  Builds a Naive Bayes Model that uses conditional probabilities to predict a target \n     |  variable (numeric or categorical column). Naive Bayes looks at the historical data \n     |  and calculates conditional probabilities for the target values by observing the \n     |  frequency of attribute values and of combinations of attribute values. Naive Bayes \n     |  assumes that each predictor is conditionally independent of the others. (Bayes' \n     |  Theorem requires that the predictors be independent.)\n     |  \n     |  :Attributes:\n     |  \n     |      **priors** : oml.DataFrame\n     |      \n     |        An optional named numerical vector that specifies the priors for the target classes.\n     |        It includes the following components:\n     |            \n     |            - target_name: The name of the target column\n     |            - target_value: The target value\n     |            - prior_probability: The prior probability for a given target_value\n     |            - count: The number of rows for a given target_value\n     |            \n     |      **conditionals** : oml.DataFrame\n     |      \n     |        Conditional probabilities for each predictor variable.\n     |        It includes the following components:\n     |            \n     |            - target_name: The name of the target column\n     |            - target_value: The target value\n     |            - attribute_name: The column name\n     |            - attribute_subname: The nested column subname.\n     |            - attribute_value: The mining attribute value\n     |            - conditional_probability: The conditional probability of a mining attribute for a given target\n     |            - count: The number of rows for a given mining attribute and a given target\n     |  \n     |  Method resolution order:\n     |      nb\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of nb object.\n     |      \n     |      Parameters\n     |      ----------\n     |      model_name : string or None (default)\n     |          The name of an existing database Naive Bayes model to create an oml.nb object from.\n     |          The specified database model is not dropped when the oml.nb object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Naive Bayes model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each dict element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Classification and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-A04C5F4E-1303-44DC-A7DA-185C969330C8>`_\n     |          are applicable to Naive Bayes model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, y, model_name=None, priors=None, case_id=None)\n     |      Fits a Naive Bayes Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object, or string\n     |          Target values.\n     |          If y is a single column OML object, target values specified by y must be combinable with x.\n     |          If y is a string, y is the name of the column in x that specifies the target values.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.nb object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.nb object is deleted\n     |          unless oml.nb object is saved into a datastore.\n     |      priors : OML DataFrame or dict or list of ints or floats or None (default)\n     |          The priors represent the overall distribution of the target in the\n     |          population. By default, the priors are computed from the sample.\n     |          If the sample is known to be a distortion of the population target\n     |          distribution, then the user can override the default by providing\n     |          a priors table as a setting for model creation. For OML DataFrame\n     |          input, the first value represents the target value. The second value\n     |          represents the prior probability. For dictionary type input, the key\n     |          represents the target value. The value represents the prior probability.\n     |          For list type input, the first value represents target value. The\n     |          second value represents the prior probability. See `Oracle Data\n     |          Mining Concepts Guide <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-4303E423-3613-4ABC-B077-450C20755F4C>`_\n     |          for more details.\n     |      case_id : string or None (default)\n     |          The column name used as case id for building the model.\n     |  \n     |  predict(self, x, supplemental_cols=None, proba=False, topN_attrs=False)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      proba : boolean, False (default)\n     |          Returns prediction probability if ``proba`` is True.\n     |      topN_attrs : boolean, positive integer, False (default)\n     |          Returns the top N most influence attributes of the predicted target value\n     |          for regression if topN_attrs is not False.\n     |          Returns the top N most influence attributes of the highest probability class\n     |          for classification if topN_attrs is not False.\n     |          N is equal to the specified positive integer or 5 if topN_attrs is True.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include the most likely target class.\n     |  \n     |  predict_proba(self, x, supplemental_cols=None, topN=None)\n     |      Makes predictions and returns probability for each class on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      TopN : positive integer or None (default)\n     |          A positive integer that restricts the returned target classes to\n     |          the specified number of those that have the highest probability.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include for each target class, the probability\n     |        belonging to that class.\n     |  \n     |  score(self, x, y)\n     |      Makes predictions on new data and returns the mean accuracy.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object\n     |          Target values.\n     |      \n     |      Returns\n     |      -------\n     |      score : float\n     |              Mean accuracy for classifications.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class nn(oml.algo.model.odmModel)\n     |  nn(mining_function='CLASSIFICATION', model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Neural Network <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/neural-network.html>`_ Model\n     |  \n     |  Builds a Neural Network (NN) Model that uses an algorithm inspired from biological\n     |  neural network for classification and regression. Neural Network is used to to estimate\n     |  or approximate functions that depend on a large number of generally unknown inputs.\n     |  This function exposes the corresponding Oracle Advanced Analytics in-database algorithm.\n     |  An artificial neural network is composed of a large number of interconnected neurons\n     |  which exchange messages between each other to solve specific problems. They learn by\n     |  examples and tune the weights of the connections among the neurons during the learning\n     |  process. Neural Network is capable of solving a wide variety of tasks such as computer\n     |  vision, speech recognition, and various complex business problems.\n     |  \n     |  :Attributes:\n     |  \n     |      **weights** : oml.DataFrame\n     |  \n     |        Weights of fitted model between nodes in different layers.\n     |        It includes the following components:\n     |  \n     |            - layer: The layer ID, 0 as an input layer\n     |            - idx_from: The node index that the weight connects from (attribute id for input layer)\n     |            - idx_to: The node index that the weights connects to\n     |            - attribute_name: The attribute name (only for the input layer)\n     |            - attribute_subname: The attribute subname\n     |            - attribute_value: The attribute value\n     |            - target_value: The target value.\n     |            - weight: The value of weight\n     |  \n     |      **topology** : oml.DataFrame\n     |  \n     |        Topology of the fitted model including number of nodes and hidden layers.\n     |        It includes the following components:\n     |  \n     |            - hidden_layer_id: The id number of the hidden layer\n     |            - num_node: The number of nodes in each layer\n     |            - activation_function: The activation function in each layer\n     |  \n     |  Method resolution order:\n     |      nn\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, mining_function='CLASSIFICATION', model_name=None, model_owner=None, **params)\n     |      Initializes an instance of nn object.\n     |      \n     |      Parameters\n     |      ----------\n     |      mining_function : 'CLASSIFICATION' or 'REGRESSION', 'CLASSIFICATION' (default)\n     |          Type of model mining functionality\n     |      model_name : string or None (default)\n     |          The name of an existing database Neural Network model to create an oml.nn object from.\n     |          The specified database model is not dropped when the oml.nn object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Neural Network model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each dict element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Classification and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-7793F608-2719-45EA-87F9-6F246BA800D4>`_\n     |          are applicable to Neural Network model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, y, model_name=None, case_id=None, class_weight=None)\n     |      Fits a Neural Network Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object, or string\n     |          Target values.\n     |          If y is a single column OML object, target values specified by y must be combinable with x.\n     |          If y is a string, y is the name of the column in x that specifies the target values.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.nn object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.nn object is deleted\n     |          unless oml.nn object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The column name used as case id for building the model.\n     |      class_weight : OML DataFrame or dict or list of ints or floats or None (default)\n     |          An optional matrix that is used to influence the weighting of\n     |          target classes during model creation. For OML DataFrame input, the first\n     |          value represents the target value. The second value represents the class weight.\n     |          For dictionary type input, the key represents the target value. The value\n     |          represents the class weight. For list type input, the first value represents\n     |          target value. The second value represents the predicted target value.\n     |          Refer to `Oracle Data Mining  User's Guide <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-44E40062-CE46-4C10-BE10-BB96B562BA20>`_\n     |          for more details about class weights.\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches settings of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If params is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  predict(self, x, supplemental_cols=None, proba=False, topN_attrs=False)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      proba : boolean, False (default)\n     |          Returns prediction probability if ``proba`` is True.\n     |      topN_attrs : boolean, positive integer, False (default)\n     |          Returns the top N most influence attributes of the predicted target value\n     |          for regression if topN_attrs is not False.\n     |          Returns the top N most influence attributes of the highest probability class\n     |          for classification if topN_attrs is not False.\n     |          N is equal to the specified positive integer or 5 if topN_attrs is True.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. For a classification model, the results include the most\n     |        likely target class and its probability. For a regression\n     |        model, the results consist of a column for the prediction. For an\n     |        anomaly detection model, the results include a prediction and its\n     |        probability. If the prediction is 1, the case is considered typical.\n     |        If the prediction is 0, the case is considered anomalous. This\n     |        behavior reflects the fact that the model is trained with normal data.\n     |  \n     |  predict_proba(self, x, supplemental_cols=None, topN=None)\n     |      Makes predictions and returns probability for each class on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer or None (default)\n     |          A positive integer that restricts the returned target classes to\n     |          the specified number of those that have the highest probability.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include for each target class, the probability\n     |        belonging to that class.\n     |  \n     |  score(self, x, y)\n     |      Makes predictions on new data, returns the mean accuracy for classifications\n     |      or the coefficient of determination R^2 of the prediction for regressions.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object\n     |          Target values.\n     |      \n     |      Returns\n     |      -------\n     |      score : float\n     |              Mean accuracy for classifications or the coefficient of\n     |              determination R^2 of the prediction for regressions.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class rf(oml.algo.model.odmModel)\n     |  rf(model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Random Forest <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/random-forest.html>`_ Model\n     |  \n     |  Builds a Random Forest (RF) Model that uses an ensemble (also called forest) of trees \n     |  for classification. This function exposes the corresponding Oracle Advanced Analytics \n     |  in-database algorithm. Random Forest is a popular ensemble learning technique for \n     |  classification. By combining the ideas of bagging and random selection of variables, \n     |  the algorithm produces collection of decision trees with controlled variance, while \n     |  avoiding overfitting - a common problem for decision trees.\n     |  \n     |  :Attributes:\n     |  \n     |      **importance** : oml.DataFrame\n     |      \n     |        Attribute importance of the fitted model.\n     |        It includes the following components:\n     |            \n     |            - attribute_name: The attribute name\n     |            - attribute_subname: The attribute subname \n     |            - attribute_importance: The attribute importance for an attribute in the forest\n     |  \n     |  Method resolution order:\n     |      rf\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of rf object.\n     |      \n     |      Parameters\n     |      ----------\n     |      model_name : string or None (default)\n     |          The name of an existing database Random Forest model to create an oml.rf object from.\n     |          The specified database model is not dropped when the oml.rf object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Random Forest model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each dict element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Classification and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-481B6C67-B26E-4689-AD4C-98062D5A2117>`_\n     |          are applicable to Random Forest model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, y, model_name=None, cost_matrix=None, case_id=None)\n     |      Fits a Random Forest Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object, or string\n     |          Target values.\n     |          If y is a single column OML object, target values specified by y must be combinable with x.\n     |          If y is a string, y is the name of the column in x that specifies the target values.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.rf object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.rf object is deleted\n     |          unless oml.rf object is saved into a datastore.\n     |      cost_matrix : OML DataFrame or list of ints or floats or None (default)\n     |          An optional numerical square matrix that specifies the costs for incorrectly\n     |          predicting the target values. The first value represents the actual target value.\n     |          The second value represents the predicted target value. The third value is the cost.\n     |          In general, the diagonal entries of the matrix are zeros. Refer to `Oracle Data\n     |          Mining User's Guide <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-89E0DB46-BA9A-4420-8216-FD6C96C74D6D>`_\n     |          for more details about cost matrix.\n     |      case_id : string or None (default)\n     |          The column name used as case id for building the model.\n     |  \n     |  predict(self, x, supplemental_cols=None, proba=False, topN_attrs=False)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      proba : boolean, False (default)\n     |          Returns prediction probability if ``proba`` is True\n     |      topN_attrs : boolean, positive integer, False (default)\n     |          Returns the top N most influence attributes of the predicted target value\n     |          for regression if topN_attrs is not False.\n     |          Returns the top N most influence attributes of the highest probability class\n     |          for classification if topN_attrs is not False.\n     |          N is equal to the specified positive integer or 5 if topN_attrs is True.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols``, and the most likely\n     |        target class.\n     |  \n     |  predict_proba(self, x, supplemental_cols=None, topN=None)\n     |      Makes predictions and returns probability for each class on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer or None (default)\n     |          A positive integer that restricts the returned target classes to\n     |          the specified number of those that have the highest probability.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include for each target class, the probability\n     |        belonging to that class.\n     |  \n     |  score(self, x, y)\n     |      Makes predictions on new data and returns the mean accuracy.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object\n     |          Target values.\n     |      \n     |      Returns\n     |      -------\n     |      score : float\n     |              Mean accuracy for classifications.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class svd(oml.algo.model.odmModel)\n     |  svd(model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Singular Value Decomposition <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/singular-value-decomposition.html>`_ Model\n     |  \n     |  Builds a Singular Value Decomposition (SVD) Model that can be used for feature \n     |  extraction. SVD provides orthogonal linear transformations that capture the \n     |  underlying variance of the data by decomposing a rectangular matrix into three \n     |  matrixes: U, D, and V. Matrix D is a diagonal matrix and its singular values \n     |  reflect the amount of data variance captured by the bases. Columns of matrix V \n     |  contain the right singular vectors and columns of matrix U contain the left singular\n     |  vectors.\n     |  \n     |  :Attributes:\n     |  \n     |      **features** : oml.DataFrame\n     |      \n     |        Features extracted by the fitted model including feature id and associated coefficient.\n     |        It includes the following components:\n     |            \n     |            - feature_id: The ID of a feature in the model\n     |            - attribute_name: The attribute name\n     |            - attribute_value: The attribute value\n     |            - value: The matrix entry value\n     |            \n     |      **u** : oml.DataFrame\n     |      \n     |        A dataframe whose columns contain the left singular vectors.\n     |        The column name is the corresponding feature id.\n     |        \n     |      **v** : oml.DataFrame\n     |      \n     |        A dataframe whose columns contain the right singular vectors.\n     |        The column name is the corresponding feature id.\n     |        \n     |      **d** : oml.DataFrame\n     |      \n     |        A dataframe containing the singular values of the input data.\n     |        It includes the following components:\n     |            \n     |            - feature_id: The ID of a feature in the model\n     |            - value: The singular values of the input data\n     |  \n     |  Method resolution order:\n     |      svd\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, model_name=None, model_owner=None, **params)\n     |      Initializes an instance of svd object.\n     |      \n     |      Parameters\n     |      ----------\n     |      model_name : string or None (default)\n     |          The name of an existing database Singular Value Decomposition model to create an oml.svd object from.\n     |          The specified database model is not dropped when the oml.svd object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Singular Value Decomposition model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each list element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Feature Extraction and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-684B3705-A314-458B-A6D9-3191DF376117>`_\n     |          are applicable to Singular Value Decomposition model.\n     |  \n     |  __repr__(self)\n     |  \n     |  feature_compare(self, x, compare_cols=None, supplemental_cols=None)\n     |      Compares features of data and generates relatedness.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          The data used to measure relatedness.\n     |      compare_cols : str, a list of str or None (default)\n     |          The column(s) used to measure data relatedness.\n     |          If None, all the columns of ``x`` are compared to measure relatedness.\n     |      supplemental_cols : a list of str or None (default)\n     |          A list of columns to display along with the resulting 'SIMILARITY' column.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |          Contains a 'SIMILARITY' column that measures relatedness and supplementary columns if specified.\n     |  \n     |  fit(self, x, model_name=None, case_id=None, ctx_settings=None)\n     |      Fits an SVD Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.svd object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.svd object is deleted\n     |          unless oml.svd object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The column name used as case id for building the model. \n     |          ``case_id`` and SVDS_U_MATRIX_OUTPUT in ``odm_settings`` \n     |          must be specified in order to produce matrix U.\n     |      ctx_settings : dict or None (default)\n     |          A list to specify Oracle Text attribute-specific settings.\n     |          This argument is applicable to building models in Oracle Database 12.2 or later.\n     |          The name of each list element refers to the text column while the list value\n     |          is a scalar string specifying the attribute-specific text transformation.\n     |          The valid entries in the string include TEXT, POLICY_NAME, TOKEN_TYPE, and\n     |          MAX_FEATURES.\n     |  \n     |  predict(self, x, supplemental_cols=None)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the predicted feature index on the new data and the specified ``supplemental_cols``.\n     |  \n     |  transform(self, x, supplemental_cols=None, topN=None)\n     |      Performs dimensionality reduction and returns value for each feature on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer or None (default)\n     |          A positive integer that restricts the returned values to\n     |          the specified number of features that have the highest topN values.\n     |          If None, all features will be returned.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the values of new data after the SVD transform and the specified ``supplemental_cols``.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n    \n    class svm(oml.algo.model.odmModel)\n     |  svm(mining_function='CLASSIFICATION', model_name=None, model_owner=None, **params)\n     |  \n     |  In-database `Support Vector Machine <https://docs.oracle.com/en/database/oracle/oracle-machine-learning-for-python/1.0/mlpug/support-vector-machine.html>`_ Model\n     |  \n     |  Builds a Support Vector Machine (SVM) Model to be used for regression, classification, \n     |  or anomaly detection. This function exposes the corresponding Oracle Advanced Analytics \n     |  in-database algorithm. SVM is a powerful, state-of-the-art algorithm with strong \n     |  theoretical foundations based on the Vapnik-Chervonenkis theory. SVM has strong \n     |  regularization properties. Regularization refers to the generalization of the model to \n     |  new data.\n     |  \n     |  \n     |  :Attributes:\n     |  \n     |      **coef** : oml.DataFrame\n     |      \n     |        The coefficients of the SVM model, one for each predictor variable.\n     |        It includes the following components:\n     |          \n     |            - target_value: The target value\n     |            - attribute_name: The attribute name\n     |            - attribute_subname: The attribute subname\n     |            - attribute_value: The attribute value\n     |            - coef: The projection coefficient value\n     |  \n     |  Method resolution order:\n     |      svm\n     |      oml.algo.model.odmModel\n     |      builtins.object\n     |  \n     |  Methods defined here:\n     |  \n     |  __init__(self, mining_function='CLASSIFICATION', model_name=None, model_owner=None, **params)\n     |      Initializes an instance of svm object.\n     |      \n     |      Parameters\n     |      ----------\n     |      mining_function : 'CLASSIFICATION' (default), 'REGRESSION' or 'ANOMALY_DETECTION'\n     |          Type of model mining functionality.\n     |      model_name : string or None (default)\n     |          The name of an existing database Support Vector Machine model to create an oml.svm object from.\n     |          The specified database model is not dropped when the oml.svm object is deleted.\n     |      model_owner: string or None (default)\n     |          The owner name of the existing Support Vector Machine model\n     |          The current database user by default\n     |      params : key-value pairs or dict\n     |          Oracle Advanced Analytics parameter settings. Each list element's name and\n     |          value refer to the parameter setting name and value, respectively.\n     |          The setting value must be numeric or string. Refer to `Oracle Data Mining\n     |          Model Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/dmprg/specifying-model-settings.html#GUID-F1083AFB-E357-4BC8-B629-1ABD85EBFA38>`_\n     |          for applicable parameters and valid values. Global and Automatic Data\n     |          Preparation Settings in Table 5-5 apply generally to the model.\n     |          Mining Function Settings for Classification and `Algorithm-specific\n     |          Settings <https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_DATA_MINING.html#GUID-12408982-E738-4D0F-A2BC-84D895E07ABB>`_\n     |          are applicable to Support Vector Machine model.\n     |  \n     |  __repr__(self)\n     |  \n     |  fit(self, x, y, model_name=None, case_id=None, ctx_settings=None)\n     |      Fits an SVM Model according to the training data and parameter settings.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object or None, or string\n     |          Target values.\n     |          Must be specified when SVM algorithm is used for classification\n     |          or regression and must be None when used for anomaly detection.\n     |          If y is a single column OML object, target values specified by y must be combinable with x.\n     |          If y is a string, y is the name of the column in x that specifies the target values.\n     |      model_name : string or None (default)\n     |          User-specified model name.\n     |          The user-specified database model is not dropped when oml.svm object is deleted.\n     |          If None, a system-generated model name will be used.\n     |          The system-generated model is dropped when oml.svm object is deleted\n     |          unless oml.svm object is saved into a datastore.\n     |      case_id : string or None (default)\n     |          The name of a column that contains unique case identifiers.\n     |      ctx_settings : dict or None (default)\n     |          A list to specify Oracle Text attribute-specific settings.\n     |          This argument is applicable to building models in Oracle Database 12.2 or later.\n     |          The name of each list element refers to the text column while the list value\n     |          is a scalar string specifying the attribute-specific text transformation.\n     |          The valid entries in the string include TEXT, POLICY_NAME, TOKEN_TYPE, and\n     |          MAX_FEATURES.\n     |  \n     |  predict(self, x, supplemental_cols=None, proba=False, topN_attrs=False)\n     |      Makes predictions on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : oml.DataFrame\n     |          Predictor values used by the model to generate scores\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      proba : boolean, False (default)\n     |          Returns prediction probability if ``proba`` is True.\n     |      topN_attrs : boolean, positive integer, False (default)\n     |          Returns the top N most influence attributes of the predicted target value\n     |          for regression if topN_attrs is not False.\n     |          Returns the top N most influence attributes of the highest probability class\n     |          for classification if topN_attrs is not False.\n     |          N is equal to the specified positive integer or 5 if topN_attrs is True.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. For a classification model, the results include the most\n     |        likely target class and its probability. For a regression\n     |        model, the results consist of a column for the prediction. For an\n     |        anomaly detection model, the results include a prediction and its\n     |        probability. If the prediction is 1, the case is considered normal.\n     |        If the prediction is 0, the case is considered anomalous. This\n     |        behavior reflects the fact that the model is trained with normal data.\n     |  \n     |  predict_proba(self, x, supplemental_cols=None, topN=None)\n     |      Makes predictions and returns probability for each class on new data.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |        Attribute values used by the model to generate scores.\n     |      supplemental_cols : oml.DataFrame, oml.Float, oml.String, or None (default)\n     |          Data set presented with the prediction result.\n     |          It must be concatenatable with ``x``.\n     |      topN : positive integer or None (default)\n     |          A positive integer that restricts the returned target classes to\n     |          the specified number of those that have the highest probability.\n     |      \n     |      Returns\n     |      -------\n     |      pred : oml.DataFrame\n     |        Contains the features specified by ``supplemental_cols`` and the\n     |        results. The results include for each target class, the probability\n     |        belonging to that class.\n     |  \n     |  score(self, x, y)\n     |      Makes predictions on new data, returns the mean accuracy for classifications\n     |      or the coefficient of determination R^2 of the prediction for regressions.\n     |      \n     |      Parameters\n     |      ----------\n     |      x : an OML object\n     |          Attribute values for building the model.\n     |      y : a single column OML object\n     |          Target values.\n     |      \n     |      Returns\n     |      -------\n     |      score : float\n     |              Mean accuracy for classifications or the coefficient of\n     |              determination R^2 of the prediction for regressions.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Methods inherited from oml.algo.model.odmModel:\n     |  \n     |  export_sermodel(self, table=None, partition=None)\n     |      Export model.\n     |      \n     |      Parameters\n     |      ----------\n     |      table : string or None (default)\n     |          A name for the new table where the serialized model is saved.\n     |          If None, the serialized model will be saved to a temporary table.\n     |      partition : string or None (default)\n     |          Name of the partition that needs to be exported.\n     |          If partition is None, all partitions are exported\n     |      \n     |      Returns\n     |      -------\n     |      oml_bytes : an oml.Bytes object\n     |        Contains the BLOB content from the model export\n     |  \n     |  get_params(self, params=None, deep=False)\n     |      Fetches parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : iterable of strings, None (default)\n     |          Names of parameters to fetch. If ``params`` is None,\n     |          fetches all settings.\n     |      deep : boolean, False (default)\n     |          Includes the computed and default parameters or not.\n     |      \n     |      Returns\n     |      -------\n     |      settings : dict mapping str to str\n     |  \n     |  set_params(self, **params)\n     |      Changes parameters of the model.\n     |      \n     |      Parameters\n     |      ----------\n     |      params : dict object mapping str to str\n     |          The key should be the name of the setting, and the value should be\n     |          the new setting.\n     |      \n     |      Returns\n     |      -------\n     |      model : the model itself.\n     |  \n     |  ----------------------------------------------------------------------\n     |  Readonly properties inherited from oml.algo.model.odmModel:\n     |  \n     |  model_owner\n     |      The owner name of database mining model\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from oml.algo.model.odmModel:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  model_name\n     |      The given name of database mining model\n     |  \n     |  pivot_limit\n     |      The maximum number of classes, clusters, or features for which the predicted probabilities are presented after pivoted\n\nFUNCTIONS\n    boxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_ticks=True, autorange=False, zorder=None)\n        Makes a box and whisker plot.\n        \n        For every column of ``x`` or for every column object in ``x``, makes a box and whisker plot.\n        \n        Parameters\n        ----------\n        x : oml.DataFrame or oml.Float or list of oml.Float\n          The data to plot.\n        notch : bool, False (default), optional\n          If True, produces a notched box plot. Otherwise, a rectangular\n          boxplot is produced. By default, the confidence intervals are approximated\n          as ``median +/-1.57 IQR/sqrt(n)`` where ``n`` is the number of not-null/NA\n          values in the column. \n        conf_intervals : array-like, optional\n          Array or sequence whose first dimension is equal to the number of columns\n          in ``x`` and whose second dimension is 2.\n        labels : sequence, optional\n          Length must be equal to the number of columns in ``x``. When an element of\n          ``labels`` is not None, the default label of the column, which is the name\n          of the column, is overridden.\n        \n        Notes\n        -----\n        For information on the other parameters, see documentation for :py:func:`matplotlib.pyplot.boxplot`.\n        \n        Returns\n        -------\n        ax : :py:class:`matplotlib.axes.Axes`\n          The :py:class:`matplotlib.axes.Axes` instance of the boxplot figure.\n        result : dict\n          A dict mapping each component of the boxplot to the corresponding list of\n          :py:class:`matplotlib.lines.Lines2D` instances created.\n    \n    check_embed()\n        Indicates whether embedded Python is set up in the connected Oracle Database.\n        \n        Returns\n        -------\n        embed_status : bool or None\n          None when not connected.\n    \n    connect(user=None, password=None, host=None, port=None, sid=None, service_name=None, dsn=None, encoding='UTF-8', nencoding='UTF-8', automl=None, **kwargs)\n        Establishes an Oracle Database connection.\n        \n        Just as with :py:func:`cx_Oracle.connect`, the user, password, and data\n        source name can be provided separately or with host, port, sid or\n        service_name.\n        \n        There can be only one active connection. Calling this method when an\n        active connection already exists replaces the active connection with\n        a new one. This results in the previous connection being implicitly\n        disconnected with the corresponding release of resources.\n        \n        Parameters\n        ----------\n        user : str or None (default)\n        password : str or None (default)\n        host : str or None (default)\n          Host name of the Oracle Database.\n        port : int, str or None (default)\n          The Oracle Database port number.\n        sid : str or None (default)\n          The Oracle Database SID.\n        service_name : str or None (default)\n          The service name to be used in the connection identifier for\n          the Oracle Database.\n        dsn : str or None (default)\n          Data source name. The TNS entry of the database, or an TNS\n          alias in the Oracle Wallet.\n        encoding : str, 'UTF-8' (default)\n          Encoding to use for regular database strings.\n        nenconding : str, 'UTF-8' (default)\n          Encoding to use for national character set database strings.\n        automl : str, or bool or None (default)\n          To enable automl, specify:\n            * True: if ``host``, ``port``, ``sid`` or ``service_name``\n              are specified and a connection pool is running for this\n              (``host``, ``port``, ``sid`` or ``service_name``).\n            * Data source name: for a running connection pool\n              if ``dsn`` is specified with a data source name.\n            * TNS alias in an Oracle Wallet: for a running connection pool\n              if ``dsn`` is also specified with Wallet TNS alias.\n          Otherwise, automl is disabled.\n        \n        Notes\n        -----\n         * Parameters ``sid`` and ``service_name`` are exclusive.\n         * Parameters (``host``, ``port``, ``sid`` or ``service_name``),\n           and ``dsn`` can only be specified exclusively.\n         * Parameter ``user`` and ``password`` must be provided when\n           (``host``, ``port``, ``sid`` or ``service_name``) is specified,\n           or ``dsn`` (and optionally ``automl``) is specified with\n           a data source name.\n         * Parameter ``user`` and ``password`` should be set to empty str \"\",\n           when ``dsn`` (and optionally ``automl``) is specified with\n           Wallet TNS alias, to establish connection with Oracle Wallet.\n         * Automl requires `Database Resident Connection Pooling (DRCP)\n           <https://docs.oracle.com/en/database/oracle/oracle-database/18/jjdbc/database-resident-connection-pooling.html#GUID-80365FCC-7053-46BD-819F-E051065E4C4E>`_\n           running on the Database server.\n    \n    create(x, table, oranumber=True, dbtypes=None, append=False)\n        Creates a table in Oracle Database from a Python data set.\n        \n        Parameters\n        ----------\n        x : pandas.DataFrame or a list of tuples of equal size\n          If ``x`` is a list of tuples of equal size, each tuple represents\n          a row in the table. The column names are set to COL1, COL2, ... and so on.\n        table : str\n          A name for the table.\n        oranumber : bool, True (default)\n          If True, use SQL NUMBER for numeric columns. Otherwise, use BINARY_DOUBLE.\n          Ignored if ``append`` is True.\n        dbtypes : dict mapping str to str or list of str\n          A list of SQL types to use on the new table. If a list, its length should\n          be equal to the number of columns. If a dict, the keys are the names of the\n          columns. Ignored if ``append`` is True.\n        append : bool, False (default)\n          Indicates whether to append the data to the existing table.\n        \n        Notes\n        -----\n         * When creating a new table, for columns whose SQL types are not specified in\n           ``dbtypes``, NUMBER is used for numeric columns when ``oranumber`` is True\n           and BINARY_DOUBLE is used when ``oranumber`` is False. Users should set\n           ``oranumber`` to False when the data contains NaN values. For string columns,\n           the default type is VARCHAR2(4000), and for bytes columns, the default type\n           is BLOB.\n         * When ``x`` is specified with an empty pandas.DataFrame, OML creates an\n           empty table. NUMBER is used for numeric columns when ``oranumber`` is True\n           and BINARY_DOUBLE is used when ``oranumber`` is False. VARCHAR2(4000) is\n           used for columns of object dtype in the pandas.DataFrame.\n         * OML does not support columns containing values of multiple data types,\n           data conversion is needed or a TypeError may be raised.\n         * OML determines default column types by looking at 20 random rows sampled\n           from the table. For tables with less than 20 rows, all rows are used\n           in column type determination. NaN values are considered as float type.\n           If a column has all Nones, or has inconsistent data types that are not\n           None in the sampled rows, a default column type cannot be determined,\n           and a ValueError is raised unless a SQL type for the column is specified\n           in ``dbtypes``.\n        \n        Returns\n        -------\n        new_table : oml.DataFrame\n          A proxy object that represents the newly-created table.\n    \n    cursor()\n        Returns a cx_Oracle cursor object of the current OML database connection.\n        It can be used to execute queries against Oracle Database.\n        \n        Returns\n        -------\n        cursor_obj : a cx_Oracle :ref:`cx:cursorobj`.\n    \n    dir()\n        Returns the names of OML objects in the workspace.\n        \n        Returns\n        -------\n        obj_names : list of str\n    \n    disconnect(cleanup=True)\n        Terminates the Oracle Database connection. By default, the OML\n        objects created through this connection will be deleted.\n        \n        Parameters\n        ----------\n        cleanup : bool, True (default)\n          Cleans up OML objects defined in Python's main module before\n          disconnecting from the database.\n    \n    do_eval(func, func_owner=None, graphics=False, **kwargs)\n        Executes a Python function in Oracle Database server.\n        \n        Parameters\n        ----------\n        func : function, str or :py:func:`oml.script.Callable <oml.script.load>`\n          ``func`` can be one of the following:\n        \n          * A Python function.\n          * Name of a registered script that defines a Python function.\n          * A string that if evaluated, defines a Python function.\n          * A callable object returned from ``script_load`` function.\n        func_owner : str or None (default)\n          An optional value specifying the owner of the registered script\n          when argument ``func`` is set to a registered script name.\n        graphics : bool, False (default)\n          If True, images rendered from extant :py:class:`matplotlib.figure.Figure`\n          objects are included in the result.\n        **kwargs :\n          Contains any combinaton of the following:\n        \n          * :ref:`special-control`\n          * additional arguments to ``func``.\n        \n        Returns\n        -------\n        result : Python object or oml.embed.data_image._DataImage\n          If no image is rendered in the script, returns whatever Python object returned\n          by the function. Otherwise, returns an oml.embed.data_image._DataImage object.\n          See :ref:`more-output`.\n    \n    drop(table=None, view=None, model=None)\n        Drops a database table, view, or model.\n        \n        Parameters\n        ----------\n        table : str or None (default)\n          The name of the table to drop.\n        view : str or None (default)\n          The name of the view to drop.\n        model : str or None (default)\n          The name of the model to drop.\n    \n    grant(name, typ='datastore', user=None)\n        Grants read privilege for a Python script or datastore.\n        Requires the user to have the `PYQADMIN` Oracle Database role.\n        \n        Parameters\n        ----------\n        name : str\n          The name of Python script in the Python script repository or the name of\n          a datastore. The current user must be the owner of the Python script or\n          datastore.\n        typ : 'datastore' (default) or 'pyqscript'\n          A str specifying either 'datastore' or 'pyqscript' to grant the\n          read privilege. 'pyqscript' requires Embedded Python.\n        user : str or None (default)\n          The user to grant read privilege of the named Python script or datastore\n          to. Treated as case-sensitive if wrapped in double quotes. Treated as\n          case-insensitive otherwise. If None, grant read privilege to public.\n    \n    group_apply(data, index, func, func_owner=None, parallel=None, orderby=None, graphics=False, **kwargs)\n        Partitions an in-database data set by the column(s) specified in ``index``\n        and executes a python function on those partitions within Python processes\n        running inside Oracle Database server.\n        \n        Parameters\n        ----------\n        data : oml.DataFrame\n          The OML DataFrame that represents the in-database data that ``func`` is\n          applied on.\n        index : OML data object\n          The columns to partition the ``data`` before sending it to ``func``.\n        func : function, str or :py:func:`oml.script.Callable <oml.script.load>`\n          ``func`` can be one of the following:\n        \n          * A Python function.\n          * Name of a registered script that defines a Python function.\n          * A string that if evaluated, defines a Python function.\n          * A callable object returned from ``script_load`` function.\n        func_owner : str or None (default)\n          An optional value specifying the owner of the registered script\n          when argument ``func`` is set to a registered script name.\n        parallel : bool or int or None (default)\n          A preferred degree of parallelism to use in the embedded Python job;\n          either a positive integer greater than or equal to 1\n          for a specific degree of parallelism,\n          a value of 'None', 'False' or '0' for no parallelism,\n          a value of 'True' for the ``data`` default parallelism.\n          Cannot exceed the degree of parallelism limit controlled by \n          service level in ADW.\n        orderby : oml.DataFrame, oml.Float, or oml.String\n          An optional argument used to specify the ordering of group partitions.\n        graphics : bool, False (default)\n          If True, images rendered from extant :py:class:`matplotlib.figure.Figure`\n          objects are included in the result.\n        **kwargs :\n          Contains any combinaton of the following:\n        \n          * :ref:`special-control`\n          * additional arguments to ``func``.\n        \n        Returns\n        -------\n        result : dict \n          If no image is rendered in the script, returns a dict of Python objects\n          returned by the function. Otherwise, returns a dict of \n          oml.embed.data_image._DataImage objects. See :ref:`more-output`.\n    \n    hist(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, **kwargs)\n        Plots a histogram.\n        \n        Computes and draws a histogram for every data set column contained in ``x``.\n        \n        Parameters\n        ----------\n        x : oml.Float\n        bins : int, strictly monotonic increasing sequence, 'auto', 'doane', 'fd', 'rice', 'scott', 'sqrt', or 'sturges', optional\n          * If an integer, denotes the number of equal width bins to generate.\n          * If a sequence, denotes bin edges and overrides the values of ``range``.\n          * If a string, denotes the estimator to use calculate the optimal number\n            of bins. 'auto' is the maximum of the 'fd' and 'sturges' estimators.\n          * Default is taken from the matplotlib rcParam ``hist.bins``.\n        weights : oml.Float\n          Must come from the same table as ``x``.\n        cumulative : int, float, or boolean, False (Default)\n          If greater than zero, then a histogram is computed where each bin gives\n          the counts in that bin plus all bins for smaller values. If ``density``\n          is also True, then the histogram is normalized so the last bin equals 1.\n          If less than zero, the direction of accumulation is reversed. In this\n          case, if ``density`` is True, then the histogram is normalized so that the\n          first bin equals 1. \n        rwidth : int, float, or None (default)\n          Ratio of the width of the bars to the bin widths. Values less than 0\n          is treated as 0. Values more than 1 is treated as 1. If None,\n          defaults to 1.\n        color : str that indicates a color spec or None (default)\n          If None, use the standard line color sequence. \n        label : str or None (default) \n          The label that is applied to the first patch of the histogram.\n        \n        Notes\n        -----\n        For information on the other parameters, see documentation for :py:func:`matplotlib.pyplot.hist`.\n        \n        Returns\n        -------\n        n : :py:class:`numpy.ndarray`\n          The values of the histogram bins. \n        bins : :py:class:`numpy.ndarray`\n          The edges of the bins. An array of length #bins + 1.\n        patches : list of :py:class:`matplotlib.patches.Rectangle`\n          Individual patches used to create the histogram.\n    \n    index_apply(times, func, func_owner=None, parallel=None, graphics=False, **kwargs)\n        Executes a python function multiple times inside Oracle Database server.\n        \n        Parameters\n        ----------\n        times : int\n          The number of times to execute the function.\n        func : function, str or :py:func:`oml.script.Callable <oml.script.load>`\n          ``func`` can be one of the following:\n        \n          * A Python function.\n          * Name of a registered script that defines a Python function.\n          * A string that if evaluated, defines a Python function.\n          * A callable object returned from ``script_load`` function.\n        func_owner : str or None (default)\n          An optional value specifying the owner of the registered script\n          when argument ``func`` is set to a registered script name.\n        parallel : bool or int or None (default)\n          A preferred degree of parallelism to use in the embedded Python job;\n          either a positive integer greater than or equal to 1\n          for a specific degree of parallelism,\n          a value of 'None', 'False' or '0' for no parallelism,\n          a value of 'True' for the ``data`` default parallelism.\n          Cannot exceed the degree of parallelism limit controlled by\n          service level in ADW.\n        graphics : bool, False (default)\n          If True, images rendered from extant :py:class:`matplotlib.figure.Figure`\n          objects are included in the result.\n        **kwargs :\n          Contains any combinaton of the following:\n        \n          * :ref:`special-control`\n          * additional arguments to ``func``.\n        \n        Returns\n        -------\n        result : list\n          If no image is rendered in the script, returns a list of Python objects\n          returned by the function. Otherwise, returns a list of \n          oml.embed.data_image._DataImage objects. See :ref:`more-output`.\n    \n    isconnected(check_automl=False)\n        Indicates whether an active Oracle Database connection exists.\n        \n        Parameters\n        ----------\n        check_automl: bool, False (default)\n            Indicates whether to check the connection is automl-enabled.\n        \n        Returns\n        -------\n        connected : bool\n    \n    push(x, oranumber=True, dbtypes=None)\n        Pushes data into Oracle Database.\n        \n        Creates an internal table in Oracle Database and inserts the data\n        into the table. The table exists as long as an OML object (either\n        in the Python client or saved in the datastore) references the table.\n        \n        Parameters\n        ----------\n        x : pandas.DataFrame or a list of tuples of equal size\n          If ``x`` is a list of tuples of equal size, each tuple represents\n          a row in the table. The column names are set to COL1, COL2, ... and so on.\n        oranumber : bool\n          If True (default), use SQL NUMBER for numeric columns. Otherwise\n          use BINARY_DOUBLE. Ignored if ``append`` is True.\n        dbtypes : dict or list of str\n          The SQL data types to use in the table.\n        \n        Notes\n        -----\n         * When creating a new table, for columns whose SQL types are not specified in\n           ``dbtypes``, NUMBER is used for numeric columns when ``oranumber`` is True\n           and BINARY_DOUBLE is used when ``oranumber`` is False. Users should set\n           ``oranumber`` to False when the data contains NaN values. For string columns,\n           the default type is VARCHAR2(4000), and for bytes columns, the default type\n           is BLOB.\n         * When ``x`` is specified with an empty pandas.DataFrame, OML creates an\n           empty table. NUMBER is used for numeric columns when ``oranumber`` is True\n           and BINARY_DOUBLE is used when ``oranumber`` is False. VARCHAR2(4000) is\n           used for columns of object dtype in the pandas.DataFrame.\n         * OML does not support columns containing values of multiple data types,\n           data conversion is needed or a TypeError may be raised.\n         * OML determines default column types by looking at 20 random rows sampled\n           from the table. For tables with less than 20 rows, all rows are used\n           in column type determination. NaN values are considered as float type.\n           If a column has all Nones, or has inconsistent data types that are not\n           None in the sampled rows, a default column type cannot be determined,\n           and a ValueError is raised unless a SQL type for the column is specified\n           in ``dbtypes``.\n        \n        Returns\n        -------\n        temp_table : oml.DataFrame\n    \n    revoke(name, typ='datastore', user=None)\n        Revokes read privilege for a Python script or datastore.\n        Requires the user to have the `PYQADMIN` Oracle Database role.\n        \n        Parameters\n        ----------\n        name : str\n          The name of Python script in the Python script repository or the name of\n          a datastore. The current user must be the owner of the Python script or\n          datastore.\n        typ : 'datastore' (default) or 'pyqscript'\n          A str specifying either 'datastore' or 'pyqscript' to revoke the\n          read privilege. 'pyqscript' requires Embedded Python.\n        user : str or None (default)\n          The user to revoke read privilege of the named Python script or datastore\n          from. Treated as case-sensitive if wrapped in double quotes. Treated as\n          case-insensitive otherwise. If None, revoke read privilege from public.\n    \n    row_apply(data, func, func_owner=None, rows=1, parallel=None, graphics=False, **kwargs)\n        Partitions an in-database data set into row chunks and executes a python\n        function on the data pulled from those chunks within Python processes\n        running inside Oracle Database server.\n        \n        Parameters\n        ----------\n        data : oml.DataFrame\n          The OML DataFrame that represents the in-database data that ``func``\n          is applied on.\n        func : function, str or :py:func:`oml.script.Callable <oml.script.load>`\n          ``func`` can be one of the following:\n        \n          * A Python function.\n          * Name of a registered script that defines a Python function.\n          * A string that if evaluated, defines a Python function.\n          * A callable object returned from ``script_load`` function.\n        func_owner : str or None (default)\n          An optional value specifying the owner of the registered script\n          when argument ``func`` is set to a registered script name.\n        rows : int, 1 (default)\n          The maximum number of rows in each chunk.\n        parallel : bool or int or None (default)\n          A preferred degree of parallelism to use in the embedded Python job;\n          either a positive integer greater than or equal to 1\n          for a specific degree of parallelism,\n          a value of 'None', 'False' or '0' for no parallelism,\n          a value of 'True' for the ``data`` default parallelism.\n          Cannot exceed the degree of parallelism limit controlled by \n          service level in ADW.\n        graphics : bool, False (default)\n          If True, images rendered from extant :py:class:`matplotlib.figure.Figure`\n          objects are included in the result.\n        **kwargs :\n          Contains any combinaton of the following:\n        \n          * :ref:`special-control`\n          * additional arguments to ``func``.\n        \n        Returns\n        -------\n        result : pandas.DataFrame or a list of oml.embed.data_image._DataImage\n          If no image is rendered in the script, returns a :py:class:`pandas.DataFrame`.\n          Otherwise, returns a list of oml.embed.data_image._DataImage objects.\n          See :ref:`more-output`.\n    \n    sync(schema=None, regex_match=False, **kwargs)\n        Creates a DataFrame proxy object in Python that represents an Oracle\n        Database data set.\n        \n        The data set can be one of the following: a database table, view, or query.\n        \n        Parameters\n        ----------\n        schema : str or None (default)\n          The name of the schema where the database object exists;\n          if None, then the current schema is used.\n        regex_match : bool, False (default)\n          Synchronizes tables or views that match a regular expression.\n          Ignored if ``query`` is used.\n        table, view, query : str or None (default)\n          The name of a table, of a view, or of an Oracle SQL query to select\n          from the database. When ``regex_match`` is True, this specifies the\n          name pattern. Exactly one of these parameters must be a str and the\n          other two must be None.\n        \n        Notes\n        -----\n        When ``regex_match`` is True, synchronizes the matched tables or views\n        to a dict with the table or view name as the key.\n        \n        Returns\n        -------\n        data_set : oml.DataFrame, or if ``regex_match`` is used, returns\n          a dict of oml.DataFrame\n    \n    table_apply(data, func, func_owner=None, graphics=False, **kwargs)\n        Executes a Python function with data pulled from Oracle Database.\n        \n        Parameters\n        ----------\n        data : oml.DataFrame\n          The oml.DataFrame that represents the data ``func`` is applied on.\n        func : function, str or :py:func:`oml.script.Callable <oml.script.load>`\n          ``func`` can be one of the following:\n        \n          * A Python function.\n          * Name of a registered script that defines a Python function.\n          * A string that if evaluated, defines a Python function.\n          * A callable object returned from ``script_load`` function.\n        func_owner : str or None (default)\n          An optional value specifying the owner of the registered script\n          when argument ``func`` is set to a registered script name.\n        graphics : bool, False (default)\n          If True, images rendered from extant :py:class:`matplotlib.figure.Figure`\n          objects are included in the result.\n        **kwargs :\n          Contains any combinaton of the following:\n        \n          * :ref:`special-control`\n          * additional arguments to ``func``.\n        \n        Returns\n        -------\n        result : Python object or oml.embed.data_image._DataImage\n          If no image is rendered in the script, returns whatever Python object returned\n          by the function. Otherwise, returns an oml.embed.data_image._DataImage object.\n          See :ref:`more-output`.\n\nDATA\n    __all__ = ['connect', 'disconnect', 'isconnected', 'check_embed', 'cur...\n    __build_serial__ = '1.0_05122020_1855'\n\nVERSION\n    1.0\n\nFILE\n    /usr/local/lib/python3.8/site-packages/oml/__init__.py\n\n\n"}]},"interrupted":false,"jobName":"paragraph_1612554902826_-433389084","id":"20210205-195502_404053537","dateCreated":"2021-02-05T19:55:02+0000","dateStarted":"2021-02-05T20:35:42+0000","dateFinished":"2021-02-05T20:35:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:56"},{"title":"Try it yourself","text":"%md\n\nView the ***oml.push*** help file.","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>View the <strong><em>oml.push</em></strong> help file.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_-250284223","id":"20210125-170339_2112043354","dateCreated":"2021-01-17T04:53:18+0000","dateStarted":"2021-02-05T20:35:42+0000","dateFinished":"2021-02-05T20:35:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:57"},{"text":"%python\n\n# Insert code here\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:43+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1612555992026_-1170351957","id":"20210205-201312_344733276","dateCreated":"2021-02-05T20:13:12+0000","dateStarted":"2021-02-05T20:35:43+0000","dateFinished":"2021-02-05T20:35:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:58"},{"title":"Notes","text":"%md\n\n* ***z*** is a reserved zeppelin-context variable and must not be used as a variable in **%python** paragraphs in Oracle Machine Learning Notebooks. In OML notebooks we use the show method ***z.show*** to display Python objects and proxy object content.\n\n* The Oracle Database connectivity package **cx_Oracle** is used to support database access and users can get access to the underlying connection to use **cx_Oracle** directly via the function ***oml.cursor***. See <https://cx-oracle.readthedocs.io/en/latest> for general **cx_Oracle** documentation. \n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:44:15+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<ul>\n<li><p><strong><em>z</em></strong> is a reserved zeppelin-context variable and must not be used as a variable in <strong>%python</strong> paragraphs in Oracle Machine Learning Notebooks. In OML notebooks we use the show method <strong><em>z.show</em></strong> to display Python objects and proxy object content.</p>\n</li>\n<li><p>The Oracle Database connectivity package <strong>cx_Oracle</strong> is used to support database access and users can get access to the underlying connection to use <strong>cx_Oracle</strong> directly via the function <strong><em>oml.cursor</em></strong>. See <a href=\"https://cx-oracle.readthedocs.io/en/latest\">https://cx-oracle.readthedocs.io/en/latest</a> for general <strong>cx_Oracle</strong> documentation.</p>\n</li>\n</ul>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_-554500926","id":"20210125-170339_669929748","dateCreated":"2021-01-08T17:59:31+0000","dateStarted":"2021-02-05T20:42:16+0000","dateFinished":"2021-02-05T20:42:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:59"},{"text":"%md\n\n## End of Script\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>End of Script</h2>\n"}]},"interrupted":false,"jobName":"paragraph_1611594219658_1971271336","id":"20210125-170339_1388369045","dateCreated":"2021-01-08T19:58:28+0000","dateStarted":"2021-02-05T20:35:44+0000","dateFinished":"2021-02-05T20:35:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":true,"$$hashKey":"object:60"},{"text":"%md\n","user":"OMLUSER03","dateUpdated":"2021-02-05T20:35:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"md","editOnDblClick":false},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"interrupted":false,"jobName":"paragraph_1612557344199_1788360019","id":"20210205-203544_177907629","dateCreated":"2021-02-05T20:35:44+0000","status":"READY","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:61"}],"name":"Lab 1: Getting Started with OML4Py","id":"32092","noteParams":{},"noteForms":{},"angularObjects":{"ORA96849F3DDA:shared_process":[],"MDW381939C745:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}