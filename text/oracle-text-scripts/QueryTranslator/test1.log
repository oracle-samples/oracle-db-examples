SQL> 
SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
 27.000 cat cat cat cat cat cat cat xx dog                                      
 19.000 cat cat cat cat cat xx dog                                              
 11.000 cat dog xx cat dog xx cat dog                                           
  8.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  8.000 cat cat dog                                                             
  8.000 cat cat xx dog dog dog dog dog                                          
  4.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  4.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  4.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  4.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  4.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  4.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  4.000 cat dog rabbit fox                                                      
  4.000 cat dog dog rabbit                                                      
  4.000 cat sheep cow <secb>sheep cow<secb>                                     
  4.000 cat                                                                     
  4.000 cat dog                                                                 

17 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  '+cat'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
 27.000 cat cat cat cat cat cat cat xx dog                                      
 19.000 cat cat cat cat cat xx dog                                              
 11.000 cat dog xx cat dog xx cat dog                                           
  8.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  8.000 cat cat dog                                                             
  8.000 cat cat xx dog dog dog dog dog                                          
  4.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  4.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  4.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  4.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  4.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  4.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  4.000 cat dog rabbit fox                                                      
  4.000 cat dog dog rabbit                                                      
  4.000 cat sheep cow <secb>sheep cow<secb>                                     
  4.000 cat                                                                     
  4.000 cat dog                                                                 

17 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  '+cat dog'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
 27.000 cat cat cat cat cat cat cat xx dog                                      
 19.000 cat cat cat cat cat xx dog                                              
 11.000 cat dog xx cat dog xx cat dog                                           
  8.000 cat cat xx dog dog dog dog dog                                          
  8.000 cat cat dog                                                             
  4.000 cat dog                                                                 
  4.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  4.000 cat dog rabbit fox                                                      
  4.000 cat dog dog rabbit                                                      
  2.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  2.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  2.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  2.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  2.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  2.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  2.000 cat                                                                     
  2.000 cat sheep cow <secb>sheep cow<secb>                                     

17 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  '+cat +dog'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
 11.000 cat dog xx cat dog xx cat dog                                           
  8.000 cat cat xx dog dog dog dog dog                                          
  4.000 cat dog rabbit fox                                                      
  4.000 cat cat cat cat cat cat cat xx dog                                      
  4.000 cat dog dog rabbit                                                      
  4.000 cat cat dog                                                             
  4.000 cat dog                                                                 
  4.000 cat cat cat cat cat xx dog                                              

8 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat dog +rabbit'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  5.000 cat dog dog rabbit                                                      
  5.000 cat dog rabbit fox                                                      
  5.000 dog rabbit fox                                                          
  2.000 rabbit fox                                                              
  2.000 catty doggy sheepy rabbit<secb>cow</secb>                               
  2.000 cat-dog rabbit fox                                                      

6 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'seca:(dog)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  9.000 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>               
  5.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  5.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  5.000 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  5.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  5.000 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  5.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  5.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  5.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  5.000 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>               

10 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat +secb:(albatross)'
  3  ),1) > 0 order by score desc;

no rows selected

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  '+seca:(rabbit) +secb:(sheep) +cat'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  4.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  4.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  4.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  4.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  4.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  4.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               

6 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat +secb:(+albatross)'
  3  ),1) > 0 order by score desc;

no rows selected

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat +secb:(albatross cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  2.000 cat sheep cow <secb>sheep cow<secb>                                     
  2.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  2.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  2.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  2.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  2.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  2.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  2.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  1.000 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  1.000 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>               
  1.000 catty doggy sheepy rabbit<secb>cow</secb>                               
  1.000 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  1.000 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  1.000 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>               

14 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat +secb:(albatross flamingo)'
  3  ),1) > 0 order by score desc;

no rows selected

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat secb:(albatross flamingo)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
 13.000 cat cat cat cat cat cat cat xx dog                                      
 10.000 cat cat cat cat cat xx dog                                              
  6.000 cat dog xx cat dog xx cat dog                                           
  4.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  4.000 cat cat dog                                                             
  4.000 cat cat xx dog dog dog dog dog                                          
  2.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  2.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  2.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  2.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  2.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  2.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  2.000 cat dog rabbit fox                                                      
  2.000 cat dog dog rabbit                                                      
  2.000 cat sheep cow <secb>sheep cow<secb>                                     
  2.000 cat                                                                     
  2.000 cat dog                                                                 

17 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat +secb:(fox cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
 52.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
 52.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
 52.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
 52.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
 52.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
 52.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
 52.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
 26.000 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
 26.000 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>               
 26.000 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
 26.000 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                       
 26.000 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>               
  2.000 cat sheep cow <secb>sheep cow<secb>                                     
  1.000 catty doggy sheepy rabbit<secb>cow</secb>                               

14 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'dog +secb:(cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  4.000 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  4.000 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  2.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  2.000 catty doggy sheepy rabbit<secb>cow</secb>                               
  2.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  2.000 cat sheep cow <secb>sheep cow<secb>                                     
  2.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  2.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  2.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  2.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  2.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             

14 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'dog +secb:(cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  4.000 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  4.000 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  2.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  2.000 catty doggy sheepy rabbit<secb>cow</secb>                               
  2.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  2.000 cat sheep cow <secb>sheep cow<secb>                                     
  2.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  2.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  2.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  2.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  2.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             

14 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'cat +secb:(cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  4.000 cat sheep cow <secb>sheep cow<secb>                                     
  4.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  4.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  4.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  4.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  4.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  4.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  4.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  2.000 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  2.000 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>               
  2.000 catty doggy sheepy rabbit<secb>cow</secb>                               
  2.000 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  2.000 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  2.000 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>               

14 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'secb:(+fox cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  4.000 cat <seca>dog</seca><secb>fox sheep cow</secb>                          
  4.000 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  4.000 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   
  4.000 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                       
  4.000 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>         
  4.000 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>               
  4.000 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>             
  4.000 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>               
  4.000 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                   

12 rows selected.

SQL> select score(1) score, text from avtest where contains (text, parser.simplesearch(
  2  'catt*'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                    
------- -----------------------------------------------------------------       
  8.000 catty doggy sheepy rabbit<secb>cow</secb>                               

1 row selected.

SQL> 
SQL> -- prompt progressive relaxation
SQL> column "Query Text" format a111
SQL> set linesize 111
SQL> set long 500000
SQL> set pagesize 50
SQL> 
SQL> variable :qry varchar2(4000)
SP2-0553: Illegal variable name ":qry".
SQL> 
SQL> exec parser.setIndexName('avtestindex')

PL/SQL procedure successfully completed.

SQL> exec parser.setScoreType(parser.scoreTypeFloat)

PL/SQL procedure successfully completed.

SQL> 
SQL> select parser.progrelax('cat') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})),(({cat})) ), AND, ADD )</seq>                                              
      <seq>DEFINEMERGE( ( (NEAR(({cat}))),(({cat})) ), AND, ADD )</seq>                                        
      <seq>DEFINEMERGE( ( (({cat})),(({cat})) ), AND, ADD )</seq>                                              
      <seq>DEFINEMERGE( ( ({cat}),(({cat})) ), AND, ADD )</seq>                                                
      <seq>((({cat})))</seq>                                                                                   
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 90.707 cat cat cat cat cat cat cat xx dog                                                                     
 87.648 cat cat cat cat cat xx dog                                                                             
 84.589 cat dog xx cat dog xx cat dog                                                                          
 83.059 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 83.059 cat cat dog                                                                                            
 83.059 cat cat xx dog dog dog dog dog                                                                         
 81.530 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.530 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.530 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 81.530 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 81.530 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 81.530 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
 81.530 cat dog rabbit fox                                                                                     
 81.530 cat dog dog rabbit                                                                                     
 81.530 cat sheep cow <secb>sheep cow<secb>                                                                    
 81.530 cat                                                                                                    
 81.530 cat dog                                                                                                

17 rows selected.

SQL> select parser.progrelax('+cat') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})),(({cat})) ), AND, ADD )</seq>                                              
      <seq>DEFINEMERGE( ( (NEAR(({cat}))),(({cat})) ), AND, ADD )</seq>                                        
      <seq>DEFINEMERGE( ( (({cat})),(({cat})) ), AND, ADD )</seq>                                              
      <seq>DEFINEMERGE( ( ({cat}&{cat}),(({cat})) ), AND, ADD )</seq>                                          
      <seq>((({cat}))&{cat})</seq>                                                                             
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  '+cat'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 90.707 cat cat cat cat cat cat cat xx dog                                                                     
 87.648 cat cat cat cat cat xx dog                                                                             
 84.589 cat dog xx cat dog xx cat dog                                                                          
 83.059 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 83.059 cat cat dog                                                                                            
 83.059 cat cat xx dog dog dog dog dog                                                                         
 81.530 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.530 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.530 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 81.530 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 81.530 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 81.530 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
 81.530 cat dog rabbit fox                                                                                     
 81.530 cat dog dog rabbit                                                                                     
 81.530 cat sheep cow <secb>sheep cow<secb>                                                                    
 81.530 cat                                                                                                    
 81.530 cat dog                                                                                                

17 rows selected.

SQL> select parser.progrelax('+cat dog') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat} {dog})),(({cat}) & ({cat},{dog})) ), AND, ADD )</seq>                        
      <seq>DEFINEMERGE( ( (NEAR(({cat},{dog}))),(({cat}) & ({cat},{dog})) ), AND, ADD )</seq>                  
      <seq>DEFINEMERGE( ( (({cat}&{dog})),(({cat}) & ({cat},{dog})) ), AND, ADD )</seq>                        
      <seq>DEFINEMERGE( ( ((NEAR(({cat},{dog})))&{cat}),(({cat}) & ({cat},{dog})) ), AND, ADD )</seq>          
      <seq>((({cat},{dog}))&{cat})</seq>                                                                       
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  '+cat dog'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 84.741 cat dog xx cat dog xx cat dog                                                                          
 82.345 cat cat dog                                                                                            
 81.580 cat dog dog rabbit                                                                                     
 81.580 cat dog                                                                                                
 81.580 cat dog rabbit fox                                                                                     
 80.000 cat cat xx dog dog dog dog dog                                                                         
 80.000 cat cat cat cat cat cat cat xx dog                                                                     
 77.277 cat cat cat cat cat xx dog                                                                             
   .765 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .382 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
   .382 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
   .382 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .382 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .382 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .382 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .382 cat sheep cow <secb>sheep cow<secb>                                                                    
   .382 cat                                                                                                    

17 rows selected.

SQL> select parser.progrelax('+cat +dog') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat} {dog})),(({cat}&{dog})) ), AND, ADD )</seq>                                  
      <seq>DEFINEMERGE( ( (NEAR(({cat},{dog}))),(({cat}&{dog})) ), AND, ADD )</seq>                            
      <seq>DEFINEMERGE( ( (({cat}&{dog})),(({cat}&{dog})) ), AND, ADD )</seq>                                  
      <seq>DEFINEMERGE( ( ((NEAR(({cat},{dog})))&{cat}&{dog}),(({cat}&{dog})) ), AND, ADD )</seq>              
      <seq>((({cat},{dog}))&{cat}&{dog})</seq>                                                                 
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  '+cat +dog'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 84.741 cat dog xx cat dog xx cat dog                                                                          
 81.631 cat cat dog                                                                                            
 81.580 cat dog                                                                                                
 81.580 cat dog dog rabbit                                                                                     
 81.580 cat dog rabbit fox                                                                                     
 80.000 cat cat xx dog dog dog dog dog                                                                         
 79.423 cat cat cat cat cat cat cat xx dog                                                                     
 74.268 cat cat cat cat cat xx dog                                                                             

8 rows selected.

SQL> select parser.progrelax('+dog +cat') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({dog} {cat})),(({dog}&{cat})) ), AND, ADD )</seq>                                  
      <seq>DEFINEMERGE( ( (NEAR(({dog},{cat}))),(({dog}&{cat})) ), AND, ADD )</seq>                            
      <seq>DEFINEMERGE( ( (({dog}&{cat})),(({dog}&{cat})) ), AND, ADD )</seq>                                  
      <seq>DEFINEMERGE( ( ((NEAR(({dog},{cat})))&{dog}&{cat}),(({dog}&{cat})) ), AND, ADD )</seq>              
      <seq>((({dog},{cat}))&{dog}&{cat})</seq>                                                                 
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  '+dog +cat'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 80.000 cat cat xx dog dog dog dog dog                                                                         
 80.000 cat dog xx cat dog xx cat dog                                                                          
 79.423 cat cat cat cat cat cat cat xx dog                                                                     
 74.268 cat cat cat cat cat xx dog                                                                             
 66.361 cat cat dog                                                                                            
 66.311 cat dog dog rabbit                                                                                     
 63.555 cat dog                                                                                                
 63.555 cat dog rabbit fox                                                                                     

8 rows selected.

SQL> select parser.progrelax('dog cat') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({dog} {cat})),(({dog},{cat})) ), AND, ADD )</seq>                                  
      <seq>DEFINEMERGE( ( (NEAR(({dog},{cat}))),(({dog},{cat})) ), AND, ADD )</seq>                            
      <seq>DEFINEMERGE( ( (({dog}&{cat})),(({dog},{cat})) ), AND, ADD )</seq>                                  
      <seq>DEFINEMERGE( ( ((NEAR(({dog},{cat})))),(({dog},{cat})) ), AND, ADD )</seq>                          
      <seq>((({dog},{cat})))</seq>                                                                             
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'dog cat'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 80.000 cat cat cat cat cat cat cat xx dog                                                                     
 80.000 cat cat xx dog dog dog dog dog                                                                         
 80.000 cat cat cat cat cat xx dog                                                                             
 80.000 cat dog xx cat dog xx cat dog                                                                          
 76.145 cat dog dog rabbit                                                                                     
 76.132 cat cat dog                                                                                            
 73.185 cat dog rabbit fox                                                                                     
 73.185 cat dog                                                                                                
   .765 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 dog rabbit fox                                                                                         
   .408 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .408 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .382 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
   .382 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
   .382 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .382 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .382 cat sheep cow <secb>sheep cow<secb>                                                                    
   .382 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .382 cat                                                                                                    
   .382 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      

23 rows selected.

SQL> select parser.progrelax('cat dog +rabbit') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat} {dog} {rabbit})),(({rabbit}) & ({rabbit},{cat},{dog})) ), AND, ADD )</seq>   
      <seq>DEFINEMERGE( ( (NEAR(({cat},{dog},{rabbit}))),(({rabbit}) & ({rabbit},{cat},{dog})) ), AND, ADD )</s
eq>                                                                                                            
      <seq>DEFINEMERGE( ( (({cat}&{dog}&{rabbit})),(({rabbit}) & ({rabbit},{cat},{dog})) ), AND, ADD )</seq>   
      <seq>DEFINEMERGE( ( ((NEAR(({cat},{dog})),NEAR(({cat},{rabbit})),NEAR(({dog},{rabbit})))&{rabbit}),(({rab
bit}) & ({rabbit},{cat},{dog})) ), AND, ADD )</seq>                                                            
      <seq>((({cat},{dog},{rabbit}))&{rabbit})</seq>                                                           
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat dog +rabbit'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 82.072 cat dog rabbit fox                                                                                     
 67.390 cat dog dog rabbit                                                                                     
 21.966 dog rabbit fox                                                                                         
   .345 rabbit fox                                                                                             
   .345 catty doggy sheepy rabbit<secb>cow</secb>                                                              
   .345 cat-dog rabbit fox                                                                                     

6 rows selected.

SQL> select parser.progrelax('cat rabbit') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat} {rabbit})),(({cat},{rabbit})) ), AND, ADD )</seq>                            
      <seq>DEFINEMERGE( ( (NEAR(({cat},{rabbit}))),(({cat},{rabbit})) ), AND, ADD )</seq>                      
      <seq>DEFINEMERGE( ( (({cat}&{rabbit})),(({cat},{rabbit})) ), AND, ADD )</seq>                            
      <seq>DEFINEMERGE( ( ((NEAR(({cat},{rabbit})))),(({cat},{rabbit})) ), AND, ADD )</seq>                    
      <seq>((({cat},{rabbit})))</seq>                                                                          
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat rabbit'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 73.207 cat dog rabbit fox                                                                                     
 73.173 cat dog dog rabbit                                                                                     
  2.677 cat cat cat cat cat cat cat xx dog                                                                     
  1.912 cat cat cat cat cat xx dog                                                                             
  1.147 cat dog xx cat dog xx cat dog                                                                          
   .765 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .765 cat cat xx dog dog dog dog dog                                                                         
   .765 cat cat dog                                                                                            
   .518 rabbit fox                                                                                             
   .518 catty doggy sheepy rabbit<secb>cow</secb>                                                              
   .518 cat-dog rabbit fox                                                                                     
   .518 dog rabbit fox                                                                                         
   .382 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .382 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .382 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .382 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
   .382 cat dog                                                                                                
   .382 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .382 cat sheep cow <secb>sheep cow<secb>                                                                    
   .382 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
   .382 cat                                                                                                    

21 rows selected.

SQL> select parser.progrelax('"cat rabbit"') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat rabbit})),(({cat rabbit})) ), AND, ADD )</seq>                                
      <seq>DEFINEMERGE( ( (NEAR(({cat rabbit}))),(({cat rabbit})) ), AND, ADD )</seq>                          
      <seq>DEFINEMERGE( ( (({cat rabbit})),(({cat rabbit})) ), AND, ADD )</seq>                                
      <seq>DEFINEMERGE( ( ({cat rabbit}),(({cat rabbit})) ), AND, ADD )</seq>                                  
      <seq>((({cat rabbit})))</seq>                                                                            
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  '"cat rabbit"'
  3  ),1) > 0 order by score desc;

no rows selected

SQL> select parser.progrelax('+cat +rabbit') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat} {rabbit})),(({cat}&{rabbit})) ), AND, ADD )</seq>                            
      <seq>DEFINEMERGE( ( (NEAR(({cat},{rabbit}))),(({cat}&{rabbit})) ), AND, ADD )</seq>                      
      <seq>DEFINEMERGE( ( (({cat}&{rabbit})),(({cat}&{rabbit})) ), AND, ADD )</seq>                            
      <seq>DEFINEMERGE( ( ((NEAR(({cat},{rabbit})))&{cat}&{rabbit}),(({cat}&{rabbit})) ), AND, ADD )</seq>     
      <seq>((({cat},{rabbit}))&{cat}&{rabbit})</seq>                                                           
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  '+cat +rabbit'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 63.521 cat dog rabbit fox                                                                                     
 63.488 cat dog dog rabbit                                                                                     

2 rows selected.

SQL> select parser.progrelax('seca:(dog)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (((({(dog)})) WITHIN seca)),((((({(dog)})) WITHIN seca))) ), AND, ADD )</seq>        
      <seq>DEFINEMERGE( ( (((NEAR(({(dog)}))) WITHIN seca)),((((({(dog)})) WITHIN seca))) ), AND, ADD )</seq>  
      <seq>DEFINEMERGE( ( (((({(dog)})) WITHIN seca)),((((({(dog)})) WITHIN seca))) ), AND, ADD )</seq>        
      <seq>DEFINEMERGE( ( ((({(dog)}) WITHIN seca)),((((({(dog)})) WITHIN seca))) ), AND, ADD )</seq>          
      <seq>((((((({(dog)})))) WITHIN seca)))</seq>                                                             
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'seca:(dog)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 83.612 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
 81.806 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.806 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.806 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.806 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 81.806 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.806 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 81.806 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 81.806 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
 81.806 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              

10 rows selected.

SQL> select parser.progrelax('seca:(+dog)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (((({(+dog)})) WITHIN seca)),((((({(+dog)})) WITHIN seca))) ), AND, ADD )</seq>      
      <seq>DEFINEMERGE( ( (((NEAR(({(+dog)}))) WITHIN seca)),((((({(+dog)})) WITHIN seca))) ), AND, ADD )</seq>
                                                                                                               
      <seq>DEFINEMERGE( ( (((({(+dog)})) WITHIN seca)),((((({(+dog)})) WITHIN seca))) ), AND, ADD )</seq>      
      <seq>DEFINEMERGE( ( ((({(+dog)}) WITHIN seca)),((((({(+dog)})) WITHIN seca))) ), AND, ADD )</seq>        
      <seq>((((((({(+dog)})))) WITHIN seca)))</seq>                                                            
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'seca:(+dog)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 83.612 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
 81.806 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.806 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.806 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.806 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 81.806 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.806 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 81.806 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 81.806 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
 81.806 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              

10 rows selected.

SQL> select parser.progrelax('seca:(-dog)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (((({(} {dog)})) WITHIN seca)),((((({(},{dog)})) WITHIN seca))) ), AND, ADD )</seq>  
      <seq>DEFINEMERGE( ( (((NEAR(({(},{dog)}))) WITHIN seca)),((((({(},{dog)})) WITHIN seca))) ), AND, ADD )</
seq>                                                                                                           
      <seq>DEFINEMERGE( ( (((({(}&{dog)})) WITHIN seca)),((((({(},{dog)})) WITHIN seca))) ), AND, ADD )</seq>  
      <seq>DEFINEMERGE( ( ((((NEAR(({(},{dog)})))) WITHIN seca)),((((({(},{dog)})) WITHIN seca))) ), AND, ADD )
</seq>                                                                                                         
      <seq>((((((({(},{dog)})))) WITHIN seca)))</seq>                                                          
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'seca:(-dog)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 83.612 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
 81.806 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.806 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.806 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.806 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 81.806 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.806 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 81.806 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 81.806 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
 81.806 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              

10 rows selected.

SQL> select parser.progrelax('cat +secb:(albatross)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(albatross)})) WITHIN secb)),((((({(albatross)})) WITHIN secb)) & (((({(
albatross)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                         
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(albatross)}))) WITHIN secb)),((((({(albatross)})) WITHIN sec
b)) & (((({(albatross)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                             
      <seq>DEFINEMERGE( ( (({cat})&((({(albatross)})) WITHIN secb)),((((({(albatross)})) WITHIN secb)) & (((({(
albatross)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                         
      <seq>DEFINEMERGE( ( ({cat}&(({(albatross)}) WITHIN secb)&((({(albatross)})) WITHIN secb)),((((({(albatros
s)})) WITHIN secb)) & (((({(albatross)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                             
      <seq>((({cat}),((((({(albatross)})))) WITHIN secb))&((({(albatross)})) WITHIN secb))</seq>               
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat +secb:(albatross)'
  3  ),1) > 0 order by score desc;

no rows selected

SQL> select parser.progrelax('+seca:(rabbit) +secb:(sheep) +cat') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(rabbit)})) WITHIN seca)&((({(sheep)})) WITHIN secb)),((((({(rabbit)})) 
WITHIN seca)&((({(sheep)})) WITHIN secb)&{cat})) ), AND, ADD )</seq>                                           
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(rabbit)}))) WITHIN seca)&((NEAR(({(sheep)}))) WITHIN secb)),
((((({(rabbit)})) WITHIN seca)&((({(sheep)})) WITHIN secb)&{cat})) ), AND, ADD )</seq>                         
      <seq>DEFINEMERGE( ( (({cat})&((({(rabbit)})) WITHIN seca)&((({(sheep)})) WITHIN secb)),((((({(rabbit)})) 
WITHIN seca)&((({(sheep)})) WITHIN secb)&{cat})) ), AND, ADD )</seq>                                           
      <seq>DEFINEMERGE( ( ({cat}&(({(rabbit)}) WITHIN seca)&(({(sheep)}) WITHIN secb)&((({(rabbit)})) WITHIN se
ca)&((({(sheep)})) WITHIN secb)&{cat}),((((({(rabbit)})) WITHIN seca)&((({(sheep)})) WITHIN secb)&{cat})) ), AN
D, ADD )</seq>                                                                                                 
      <seq>((({cat}),((((({(rabbit)})))) WITHIN seca),((((({(sheep)})))) WITHIN secb))&((({(rabbit)})) WITHIN s
eca)&((({(sheep)})) WITHIN secb)&{cat})</seq>                                                                  
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  '+seca:(rabbit) +secb:(sheep) +cat'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 81.669 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 81.530 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.530 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 81.530 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 81.530 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 81.530 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              

6 rows selected.

SQL> select parser.progrelax('cat +secb:(+albatross)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(+albatross)})) WITHIN secb)),((((({(+albatross)})) WITHIN secb)) & ((((
{(+albatross)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                      
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(+albatross)}))) WITHIN secb)),((((({(+albatross)})) WITHIN s
ecb)) & (((({(+albatross)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                          
      <seq>DEFINEMERGE( ( (({cat})&((({(+albatross)})) WITHIN secb)),((((({(+albatross)})) WITHIN secb)) & ((((
{(+albatross)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                      
      <seq>DEFINEMERGE( ( ({cat}&(({(+albatross)}) WITHIN secb)&((({(+albatross)})) WITHIN secb)),((((({(+albat
ross)})) WITHIN secb)) & (((({(+albatross)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                         
      <seq>((({cat}),((((({(+albatross)})))) WITHIN secb))&((({(+albatross)})) WITHIN secb))</seq>             
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat +secb:(+albatross)'
  3  ),1) > 0 order by score desc;

no rows selected

SQL> select parser.progrelax('cat +secb:(albatross cow)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(albatross} {cow)})) WITHIN secb)),((((({(albatross},{cow)})) WITHIN sec
b)) & (((({(albatross},{cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                       
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(albatross},{cow)}))) WITHIN secb)),((((({(albatross},{cow)})
) WITHIN secb)) & (((({(albatross},{cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                           
      <seq>DEFINEMERGE( ( (({cat})&((({(albatross}&{cow)})) WITHIN secb)),((((({(albatross},{cow)})) WITHIN sec
b)) & (((({(albatross},{cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                       
      <seq>DEFINEMERGE( ( ({cat}&(((NEAR(({(albatross},{cow)})))) WITHIN secb)&((({(albatross},{cow)})) WITHIN 
secb)),((((({(albatross},{cow)})) WITHIN secb)) & (((({(albatross},{cow)})) WITHIN secb),{cat})) ), AND, ADD )<
/seq>                                                                                                          
      <seq>((({cat}),((((({(albatross},{cow)})))) WITHIN secb))&((({(albatross},{cow)})) WITHIN secb))</seq>   
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat +secb:(albatross cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
   .408 cat sheep cow <secb>sheep cow<secb>                                                                    
   .408 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
   .408 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
   .408 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .408 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .408 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .408 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .204 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .204 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .204 catty doggy sheepy rabbit<secb>cow</secb>                                                              
   .204 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .204 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .204 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              

14 rows selected.

SQL> select parser.progrelax('cat +secb:(albatross flamingo)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(albatross} {flamingo)})) WITHIN secb)),((((({(albatross},{flamingo)})) 
WITHIN secb)) & (((({(albatross},{flamingo)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                        
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(albatross},{flamingo)}))) WITHIN secb)),((((({(albatross},{f
lamingo)})) WITHIN secb)) & (((({(albatross},{flamingo)})) WITHIN secb),{cat})) ), AND, ADD )</seq>            
      <seq>DEFINEMERGE( ( (({cat})&((({(albatross}&{flamingo)})) WITHIN secb)),((((({(albatross},{flamingo)})) 
WITHIN secb)) & (((({(albatross},{flamingo)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                        
      <seq>DEFINEMERGE( ( ({cat}&(((NEAR(({(albatross},{flamingo)})))) WITHIN secb)&((({(albatross},{flamingo)}
)) WITHIN secb)),((((({(albatross},{flamingo)})) WITHIN secb)) & (((({(albatross},{flamingo)})) WITHIN secb),{c
at})) ), AND, ADD )</seq>                                                                                      
      <seq>((({cat}),((((({(albatross},{flamingo)})))) WITHIN secb))&((({(albatross},{flamingo)})) WITHIN secb)
)</seq>                                                                                                        
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat +secb:(albatross flamingo)'
  3  ),1) > 0 order by score desc;

no rows selected

SQL> select parser.progrelax('cat secb:(albatross flamingo)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(albatross} {flamingo)})) WITHIN secb)),((((({(albatross},{flamingo)})) 
WITHIN secb),{cat})) ), AND, ADD )</seq>                                                                       
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(albatross},{flamingo)}))) WITHIN secb)),((((({(albatross},{f
lamingo)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                           
      <seq>DEFINEMERGE( ( (({cat})&((({(albatross}&{flamingo)})) WITHIN secb)),((((({(albatross},{flamingo)})) 
WITHIN secb),{cat})) ), AND, ADD )</seq>                                                                       
      <seq>DEFINEMERGE( ( ({cat}&(((NEAR(({(albatross},{flamingo)})))) WITHIN secb)),((((({(albatross},{flaming
o)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                                 
      <seq>((({cat}),((((({(albatross},{flamingo)})))) WITHIN secb)))</seq>                                    
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat secb:(albatross flamingo)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
  2.677 cat cat cat cat cat cat cat xx dog                                                                     
  1.912 cat cat cat cat cat xx dog                                                                             
  1.147 cat dog xx cat dog xx cat dog                                                                          
   .765 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .765 cat cat dog                                                                                            
   .765 cat cat xx dog dog dog dog dog                                                                         
   .382 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .382 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .382 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
   .382 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
   .382 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .382 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .382 cat dog rabbit fox                                                                                     
   .382 cat dog dog rabbit                                                                                     
   .382 cat sheep cow <secb>sheep cow<secb>                                                                    
   .382 cat                                                                                                    
   .382 cat dog                                                                                                

17 rows selected.

SQL> select parser.progrelax('cat +secb:(fox cow)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(fox} {cow)})) WITHIN secb)),((((({(fox},{cow)})) WITHIN secb)) & (((({(
fox},{cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                         
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(fox},{cow)}))) WITHIN secb)),((((({(fox},{cow)})) WITHIN sec
b)) & (((({(fox},{cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                             
      <seq>DEFINEMERGE( ( (({cat})&((({(fox}&{cow)})) WITHIN secb)),((((({(fox},{cow)})) WITHIN secb)) & (((({(
fox},{cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                         
      <seq>DEFINEMERGE( ( ({cat}&(((NEAR(({(fox},{cow)})))) WITHIN secb)&((({(fox},{cow)})) WITHIN secb)),(((((
{(fox},{cow)})) WITHIN secb)) & (((({(fox},{cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                   
      <seq>((({cat}),((((({(fox},{cow)})))) WITHIN secb))&((({(fox},{cow)})) WITHIN secb))</seq>               
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat +secb:(fox cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 51.233 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 51.183 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 51.183 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 51.183 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 51.183 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 51.183 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
 51.183 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
  5.209 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
  5.209 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
  5.209 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
  5.209 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
  5.209 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .408 cat sheep cow <secb>sheep cow<secb>                                                                    
   .204 catty doggy sheepy rabbit<secb>cow</secb>                                                              

14 rows selected.

SQL> select parser.progrelax('dog +secb:(cow)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({dog})&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(cow)})) WITH
IN secb),{dog})) ), AND, ADD )</seq>                                                                           
      <seq>DEFINEMERGE( ( (NEAR(({dog}))&((NEAR(({(cow)}))) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(
cow)})) WITHIN secb),{dog})) ), AND, ADD )</seq>                                                               
      <seq>DEFINEMERGE( ( (({dog})&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(cow)})) WITH
IN secb),{dog})) ), AND, ADD )</seq>                                                                           
      <seq>DEFINEMERGE( ( ({dog}&(({(cow)}) WITHIN secb)&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)
) & (((({(cow)})) WITHIN secb),{dog})) ), AND, ADD )</seq>                                                     
      <seq>((({dog}),((((({(cow)})))) WITHIN secb))&((({(cow)})) WITHIN secb))</seq>                           
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'dog +secb:(cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 81.631 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
 81.631 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.631 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 81.631 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.631 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
   .408 cat sheep cow <secb>sheep cow<secb>                                                                    
   .408 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
   .408 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .408 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .408 catty doggy sheepy rabbit<secb>cow</secb>                                                              
   .408 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .408 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      

14 rows selected.

SQL> select parser.progrelax('dog +secb:(cow)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({dog})&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(cow)})) WITH
IN secb),{dog})) ), AND, ADD )</seq>                                                                           
      <seq>DEFINEMERGE( ( (NEAR(({dog}))&((NEAR(({(cow)}))) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(
cow)})) WITHIN secb),{dog})) ), AND, ADD )</seq>                                                               
      <seq>DEFINEMERGE( ( (({dog})&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(cow)})) WITH
IN secb),{dog})) ), AND, ADD )</seq>                                                                           
      <seq>DEFINEMERGE( ( ({dog}&(({(cow)}) WITHIN secb)&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)
) & (((({(cow)})) WITHIN secb),{dog})) ), AND, ADD )</seq>                                                     
      <seq>((({dog}),((((({(cow)})))) WITHIN secb))&((({(cow)})) WITHIN secb))</seq>                           
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'dog +secb:(cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 81.631 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
 81.631 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.631 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 81.631 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.631 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
   .408 cat sheep cow <secb>sheep cow<secb>                                                                    
   .408 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
   .408 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .408 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .408 catty doggy sheepy rabbit<secb>cow</secb>                                                              
   .408 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .408 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      

14 rows selected.

SQL> select parser.progrelax('cat +secb:(cow)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(cow)})) WITH
IN secb),{cat})) ), AND, ADD )</seq>                                                                           
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(cow)}))) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(
cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                               
      <seq>DEFINEMERGE( ( (({cat})&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)) & (((({(cow)})) WITH
IN secb),{cat})) ), AND, ADD )</seq>                                                                           
      <seq>DEFINEMERGE( ( ({cat}&(({(cow)}) WITHIN secb)&((({(cow)})) WITHIN secb)),((((({(cow)})) WITHIN secb)
) & (((({(cow)})) WITHIN secb),{cat})) ), AND, ADD )</seq>                                                     
      <seq>((({cat}),((((({(cow)})))) WITHIN secb))&((({(cow)})) WITHIN secb))</seq>                           
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat +secb:(cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 81.631 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 81.580 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 81.580 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 81.580 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 81.580 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 81.580 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
 81.580 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 81.580 cat sheep cow <secb>sheep cow<secb>                                                                    
   .408 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .408 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .408 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .408 catty doggy sheepy rabbit<secb>cow</secb>                                                              

14 rows selected.

SQL> select parser.progrelax('secb:(+fox cow)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (((({(+fox} {cow)})) WITHIN secb)),((((({(+fox},{cow)})) WITHIN secb))) ), AND, ADD )
</seq>                                                                                                         
      <seq>DEFINEMERGE( ( (((NEAR(({(+fox},{cow)}))) WITHIN secb)),((((({(+fox},{cow)})) WITHIN secb))) ), AND,
 ADD )</seq>                                                                                                   
      <seq>DEFINEMERGE( ( (((({(+fox}&{cow)})) WITHIN secb)),((((({(+fox},{cow)})) WITHIN secb))) ), AND, ADD )
</seq>                                                                                                         
      <seq>DEFINEMERGE( ( ((((NEAR(({(+fox},{cow)})))) WITHIN secb)),((((({(+fox},{cow)})) WITHIN secb))) ), AN
D, ADD )</seq>                                                                                                 
      <seq>((((((({(+fox},{cow)})))) WITHIN secb)))</seq>                                                      
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'secb:(+fox cow)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 73.174 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
 73.174 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 73.174 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 73.174 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 73.174 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
 73.174 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 73.174 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
 73.174 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 73.174 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
 73.174 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 73.174 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 73.174 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 cat sheep cow <secb>sheep cow<secb>                                                                    
   .408 catty doggy sheepy rabbit<secb>cow</secb>                                                              

14 rows selected.

SQL> select parser.progrelax('seca:(dog rabbit)') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (((({(dog} {rabbit)})) WITHIN seca)),((((({(dog},{rabbit)})) WITHIN seca))) ), AND, A
DD )</seq>                                                                                                     
      <seq>DEFINEMERGE( ( (((NEAR(({(dog},{rabbit)}))) WITHIN seca)),((((({(dog},{rabbit)})) WITHIN seca))) ), 
AND, ADD )</seq>                                                                                               
      <seq>DEFINEMERGE( ( (((({(dog}&{rabbit)})) WITHIN seca)),((((({(dog},{rabbit)})) WITHIN seca))) ), AND, A
DD )</seq>                                                                                                     
      <seq>DEFINEMERGE( ( ((((NEAR(({(dog},{rabbit)})))) WITHIN seca)),((((({(dog},{rabbit)})) WITHIN seca))) )
, AND, ADD )</seq>                                                                                             
      <seq>((((((({(dog},{rabbit)})))) WITHIN seca)))</seq>                                                    
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'seca:(dog rabbit)'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 91.574 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
 91.348 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 91.348 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 91.348 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 91.348 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
 91.348 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 91.348 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 91.348 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 73.202 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
   .452 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .439 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .439 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      

12 rows selected.

SQL> select parser.progrelax('catt*') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( ((catt%)),((catt%)) ), AND, ADD )</seq>                                              
      <seq>DEFINEMERGE( ( (NEAR((catt%))),((catt%)) ), AND, ADD )</seq>                                        
      <seq>DEFINEMERGE( ( ((catt%)),((catt%)) ), AND, ADD )</seq>                                              
      <seq>DEFINEMERGE( ( (catt%),((catt%)) ), AND, ADD )</seq>                                                
      <seq>(((catt%)))</seq>                                                                                   
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'catt*'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 83.006 catty doggy sheepy rabbit<secb>cow</secb>                                                              

1 row selected.

SQL> select parser.progrelax('cat-dog') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat} {dog})),(({cat},{dog})) ), AND, ADD )</seq>                                  
      <seq>DEFINEMERGE( ( (NEAR(({cat},{dog}))),(({cat},{dog})) ), AND, ADD )</seq>                            
      <seq>DEFINEMERGE( ( (({cat}&{dog})),(({cat},{dog})) ), AND, ADD )</seq>                                  
      <seq>DEFINEMERGE( ( ((NEAR(({cat},{dog})))),(({cat},{dog})) ), AND, ADD )</seq>                          
      <seq>((({cat},{dog})))</seq>                                                                             
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat-dog'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 93.631 cat dog xx cat dog xx cat dog                                                                          
 91.414 cat dog dog rabbit                                                                                     
 91.402 cat cat dog                                                                                            
 91.210 cat dog                                                                                                
 91.210 cat dog rabbit fox                                                                                     
 80.000 cat cat cat cat cat xx dog                                                                             
 80.000 cat cat cat cat cat cat cat xx dog                                                                     
 80.000 cat cat xx dog dog dog dog dog                                                                         
   .765 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .408 dog rabbit fox                                                                                         
   .408 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .408 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .382 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
   .382 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
   .382 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .382 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .382 cat sheep cow <secb>sheep cow<secb>                                                                    
   .382 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .382 cat                                                                                                    
   .382 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      

23 rows selected.

SQL> select parser.progrelax('cat*dog') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat*dog})),(({cat*dog})) ), AND, ADD )</seq>                                      
      <seq>DEFINEMERGE( ( (NEAR(({cat*dog}))),(({cat*dog})) ), AND, ADD )</seq>                                
      <seq>DEFINEMERGE( ( (({cat*dog})),(({cat*dog})) ), AND, ADD )</seq>                                      
      <seq>DEFINEMERGE( ( ({cat*dog}),(({cat*dog})) ), AND, ADD )</seq>                                        
      <seq>((({cat*dog})))</seq>                                                                               
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat*dog'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 82.645 cat*dog rabbit*fox                                                                                     
 82.645 cat*dog rabbit*fox                                                                                     

2 rows selected.

SQL> select parser.progrelax('cat*dog*') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( ((cat\*dog%)),((cat\*dog%)) ), AND, ADD )</seq>                                      
      <seq>DEFINEMERGE( ( (NEAR((cat\*dog%))),((cat\*dog%)) ), AND, ADD )</seq>                                
      <seq>DEFINEMERGE( ( ((cat\*dog%)),((cat\*dog%)) ), AND, ADD )</seq>                                      
      <seq>DEFINEMERGE( ( (cat\*dog%),((cat\*dog%)) ), AND, ADD )</seq>                                        
      <seq>(((cat\*dog%)))</seq>                                                                               
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat*dog*'
  3  ),1) > 0 order by score desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 82.645 cat*dog rabbit*fox                                                                                     
 82.645 cat#doggy                                                                                              
 82.645 cat*dog rabbit*fox                                                                                     

3 rows selected.

SQL> select parser.progrelax('cat +seca:(rabbit +dog) -mouse -horse') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({cat})&((({(rabbit} {dog)})) WITHIN seca) ~{mouse} ~{horse}),((((({dog)}) & ({dog)}
,{(rabbit})) WITHIN seca)) & (((({dog)}) & ({dog)},{(rabbit})) WITHIN seca),{cat}) ~{mouse} ~{horse}) ), AND, A
DD )</seq>                                                                                                     
      <seq>DEFINEMERGE( ( (NEAR(({cat}))&((NEAR(({(rabbit},{dog)}))) WITHIN seca) ~{mouse} ~{horse}),((((({dog)
}) & ({dog)},{(rabbit})) WITHIN seca)) & (((({dog)}) & ({dog)},{(rabbit})) WITHIN seca),{cat}) ~{mouse} ~{horse
}) ), AND, ADD )</seq>                                                                                         
      <seq>DEFINEMERGE( ( (({cat})&((({(rabbit}&{dog)})) WITHIN seca) ~{mouse} ~{horse}),((((({dog)}) & ({dog)}
,{(rabbit})) WITHIN seca)) & (((({dog)}) & ({dog)},{(rabbit})) WITHIN seca),{cat}) ~{mouse} ~{horse}) ), AND, A
DD )</seq>                                                                                                     
      <seq>DEFINEMERGE( ( ({cat}&(((NEAR(({(rabbit},{dog)})))&{dog)}) WITHIN seca)&((({dog)}) & ({dog)},{(rabbi
t})) WITHIN seca) ~{mouse} ~{horse}),((((({dog)}) & ({dog)},{(rabbit})) WITHIN seca)) & (((({dog)}) & ({dog)},{
(rabbit})) WITHIN seca),{cat}) ~{mouse} ~{horse}) ), AND, ADD )</seq>                                          
      <seq>((({cat}),((((({(rabbit},{dog)}))&{dog)})) WITHIN seca))&((({dog)}) & ({dog)},{(rabbit})) WITHIN sec
a) ~{mouse} ~{horse})</seq>                                                                                    
    </progression>                                                                                             
  </textquery>                                                                                                 
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'cat +seca:(rabbit +dog) -mouse -horse'
  3  ),1) > 0 order by score(1) desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 41.781 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
 41.668 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
 41.668 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .903 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .452 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
   .452 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .452 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .452 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         

8 rows selected.

SQL> select parser.progrelax('the angry cat attacked the ugly horse. They then both attacked the dog who was scared of the mouse. Afterwards, the went for a cup of tea with the rabbit') "Query Text" from dual;

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
                                                                                                               
<query>                                                                                                        
  <textquery>                                                                                                  
    <progression>                                                                                              
      <seq>DEFINEMERGE( ( (({the} {angry} {cat} {attacked} {the} {ugly} {horse.} {They} {then} {both} {attacked
} {the} {dog} {who} {was} {scared} {of} {the} {mouse.} {Afterwards,} {the} {went} {for} {a} {cup} {of} {tea} {w
ith} {the} {rabbit})),(({the},{angry},{cat},{attacked},{the},{ugly},{horse.},{They},{then},{both},{attacked},{t
he},{dog},{who},{was},{scared},{of},{the},{mouse.},{Afterwards,},{the},{went},{for},{a},{cup},{of},{tea},{with}
,{the},{rabbit})) ), AND, ADD )</seq>                                                                          
      <seq>DEFINEMERGE( ( (NEAR(({the},{angry},{cat},{attacked},{the},{ugly},{horse.},{They},{then},{both},{att
acked},{the},{dog},{who},{was},{scared},{of},{the},{mouse.},{Afterwards,},{the},{went},{for},{a},{cup},{of},{te
a},{with},{the},{rabbit}))),(({the},{angry},{cat},{attacked},{the},{ugly},{horse.},{They},{then},{both},{attack
ed},{the},{dog},{who},{was},{scared},{of},{the},{mouse.},{Afterwards,},{the},{went},{for},{a},{cup},{of},{tea},
{with},{the},{rabbit})) ), AND, ADD )</seq>                                                                    
      <seq>DEFINEMERGE( ( (({the}&{angry}&{cat}&{attacked}&{the}&{ugly}&{horse.}&{They}&{then}&{both}&{attacked
}&{the}&{dog}&{who}&{was}&{scared}&{of}&{the}&{mouse.}&{Afterwards,}&{the}&{went}&{for}&{a}&{cup}&{of}&{tea}&{w
ith}&{the}&{rabbit})),(({the},{angry},{cat},{attacked},{the},{ugly},{horse.},{They},{then},{both},{attacked},{t
he},{dog},{who},{was},{scared},{of},{the},{mouse.},{Afterwards,},{the},{went},{for},{a},{cup},{of},{tea},{with}
,{the},{rabbit})) ), AND, ADD )</seq>                                                                          
      <seq>DEFINEMERGE( ( ((NEAR(({angry},{cat})),NEAR(({angry},{attacked})),NEAR(({angry},{ugly})),NEAR(({angr
y},{horse.})),NEAR(({angry},{attacked})),NEAR(({angry},{dog})),NEAR(({angry},{scared})),NEAR(({angry},{mouse.})
),NEAR(({angry},{Afterwards,})),NEAR(({angry},{went})),NEAR(({angry},{cup})),NEAR(({angry},{tea})),NEAR(({angry
},{rabbit})),NEAR(({cat},{attacked})),NEAR(({cat},{ugly})),NEAR(({cat},{horse.})),NEAR(({cat},{attacked})),NEAR
(({cat},{dog})),NEAR(({cat},{scared})),NEAR(({cat},{mouse.})),NEAR(({cat},{Afterwards,})),NEAR(({cat},{went})),
NEAR(({cat},{cup})),NEAR(({cat},{tea})),NEAR(({cat},{rabbit})),NEAR(({attacked},{ugly})),NEAR(({attacked},{hors
e.})),NEAR(({attacked},{attacked})),NEAR(({attacked},{dog})),NEAR(({attacked},{scared})),NEAR(({attacked},{mous
e.})),NEAR(({attacked},{Afterwards,})),NEAR(({attacked},{went})),NEAR(({attacked},{cup})),NEAR(({attacked},{tea
})),NEAR(({attacked},{rabbit})),NEAR(({ugly},{horse.})),NEAR(({ugly},{attacked})),NEAR(({ugly},{dog})),NEAR(({u
gly},{scared})),NEAR(({ugly},{mouse.})),NEAR(({ugly},{Afterwards,})),NEAR(({ugly},{went})),NEAR(({ugly},{cup}))
,NEAR(({ugly},{tea})),NEAR(({ugly},{rabbit})),NEAR(({horse.},{attacked})),NEAR(({horse.},{dog})),NEAR(({horse.}
,{scared})),NEAR(({horse.},{mouse.})),NEAR(({horse.},{Afterwards,})),NEAR(({horse.},{went})),NEAR(({horse.},{cu
p})),NEAR(({horse.},{tea})),NEAR(({horse.},{rabbit})),NEAR(({attacked},{dog})),NEAR(({attacked},{scared})),NEAR
(({attacked},{mouse.})),NEAR(({attacked},{Afterwards,})),NEAR(({attacked},{went})),NEAR(({attacked},{cup})),NEA
R(({attacked},{tea})),NEAR(({attacked},{rabbit})),NEAR(({dog},{scared})),NEAR(({dog},{mouse.})),NEAR(({dog},{Af
terwards,})),NEAR(({dog},{went})),NEAR(({dog},{cup})),NEAR(({dog},{tea})),NEAR(({dog},{rabbit})),NEAR(({scared}
,{mouse.})),NEAR(({scared},{Afterwards,})),NEAR(({scared},{went})),NEAR(({scared},{cup})),NEAR(({scared},{tea})
),NEAR(({scared},{rabbit})),NEAR(({mouse.},{Afterwards,})),NEAR(({mouse.},{went})),NEAR(({mouse.},{cup})),NEAR(
({mouse.},{tea})),NEAR(({mouse.},{rabbit})),NEAR(({Afterwards,},{went})),NEAR(({Afterwards,},{cup})),NEAR(({Aft
erwards,},{tea})),NEAR(({Afterwards,},{rabbit})),NEAR(({went},{cup})),NEAR(({went},{tea})),NEAR(({went},{rabbit
})),NEAR(({cup},{tea})),NEAR(({cup},{rabbit})),NEAR(({tea},{rabbit})))),(({the},{angry},{cat},{attacked},{the},
{ugly},{horse.},{They},{then},{both},{attacked},{the},{dog},{who},{was},{scared},{of},{the},{mouse.},{Afterward
s,},{the},{went},{for},{a},{cup},{of},{tea},{with},{the},{rabbit})) ), AND, ADD )</seq>                        
      <seq>((({the},{angry},{cat},{attacked},{the},{ugly},{horse.},{They},{then},{both},{attacked},{the},{dog},
{who},{was},{scared},{of},{the},{mouse.},{Afterwards,},{the},{went},{for},{a},{cup},{of},{tea},{with},{the},{ra
bbit})))</seq>                                                                                                 
    </progression>                                                                                             
  </textquery>                                                                                                 

Query Text                                                                                                     
---------------------------------------------------------------------------------------------------------------
  <score datatype="FLOAT"/>                                                                                    
</query>                                                                                                       
                                                                                                               

1 row selected.

SQL> select score(1) score, text from avtest where contains (text, parser.progrelax(
  2  'the angry cat attacked the ugly horse. They then both attacked the dog who was scared of the mouse. Afterwards, the went for a cup of tea with the rabbit'
  3  ),1) > 0 order by score(1) desc;

  SCORE TEXT                                                                                                   
------- -----------------------------------------------------------------                                      
 23.429 cat dog dog rabbit                                                                                     
 23.390 cat dog rabbit fox                                                                                     
 21.853 cat cat cat cat cat cat cat xx dog                                                                     
 21.849 cat cat xx dog dog dog dog dog                                                                         
 21.818 cat dog xx cat dog xx cat dog                                                                          
 21.742 cat cat cat cat cat xx dog                                                                             
 21.573 cat cat dog                                                                                            
 21.540 cat horse <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                            
 21.540 cat mouse <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                        
 21.525 dog rabbit fox                                                                                         
 21.516 cat dog                                                                                                
   .109 cat cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .074 cat-dog rabbit fox                                                                                     
   .074 rabbit fox                                                                                             
   .074 catty doggy sheepy rabbit<secb>cow</secb>                                                              
   .058 dog <seca>dog dog rabbit</seca><secb>fox sheep cow</secb>                                              
   .058 dog <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .058 dog <seca>dog cat rabbit</seca><secb>fox sheep cow</secb>                                              
   .058 dog <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  
   .058 dog <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .055 cat <seca>dog</seca><secb>fox sheep cow</secb>                                                         
   .055 cat sheep cow <secb>sheep cow<secb>                                                                    
   .055 cat                                                                                                    
   .055 cat <seca>rabbit</seca><secb>fox sheep cow</secb>                                                      
   .055 cat <seca>dog rabbit cow</seca><secb>fox sheep cow</secb>                                              
   .055 cat <seca>dog rabbit</seca><secb>fox sheep cow</secb>                                                  

26 rows selected.

SQL> 
SQL> set echo off
